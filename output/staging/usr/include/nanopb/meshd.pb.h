/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Wed Aug  2 09:02:09 2017. */

#ifndef PB_MESHD_MESHD_PB_H_INCLUDED
#define PB_MESHD_MESHD_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _meshd_config {
    char ssid[32];
    char pwd[128];
/* @@protoc_insertion_point(struct:meshd_config) */
} meshd_config;

typedef struct _meshd_mesh_ie_s {
    uint32_t role;
    uint32_t hops;
    uint32_t family_cnt;
    uint32_t ul_score;
    uint32_t status;
/* @@protoc_insertion_point(struct:meshd_mesh_ie_s) */
} meshd_mesh_ie_s;

typedef struct _meshd_timeval_s {
    int64_t tv_sec;
    int64_t tv_usec;
/* @@protoc_insertion_point(struct:meshd_timeval_s) */
} meshd_timeval_s;

typedef PB_BYTES_ARRAY_T(6) meshd_mesh_dev_s_bssid_t;
typedef struct _meshd_mesh_dev_s {
    meshd_mesh_dev_s_bssid_t bssid;
    uint32_t channel;
    uint32_t snr;
    int32_t rssi;
    meshd_mesh_ie_s mesh_ie;
    meshd_timeval_s last_seen;
/* @@protoc_insertion_point(struct:meshd_mesh_dev_s) */
} meshd_mesh_dev_s;

typedef struct _meshd_ap_list_s {
    pb_size_t ap_list_count;
    meshd_mesh_dev_s ap_list[32];
/* @@protoc_insertion_point(struct:meshd_ap_list_s) */
} meshd_ap_list_s;

typedef struct _meshd_self_s {
    meshd_mesh_dev_s self;
/* @@protoc_insertion_point(struct:meshd_self_s) */
} meshd_self_s;

/* Default values for struct fields */

/* Initializer values for message structs */
#define meshd_config_init_default                {"", ""}
#define meshd_self_s_init_default                {meshd_mesh_dev_s_init_default}
#define meshd_ap_list_s_init_default             {0, {meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default, meshd_mesh_dev_s_init_default}}
#define meshd_mesh_dev_s_init_default            {{0, {0}}, 0, 0, 0, meshd_mesh_ie_s_init_default, meshd_timeval_s_init_default}
#define meshd_mesh_ie_s_init_default             {0, 0, 0, 0, 0}
#define meshd_timeval_s_init_default             {0, 0}
#define meshd_config_init_zero                   {"", ""}
#define meshd_self_s_init_zero                   {meshd_mesh_dev_s_init_zero}
#define meshd_ap_list_s_init_zero                {0, {meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero, meshd_mesh_dev_s_init_zero}}
#define meshd_mesh_dev_s_init_zero               {{0, {0}}, 0, 0, 0, meshd_mesh_ie_s_init_zero, meshd_timeval_s_init_zero}
#define meshd_mesh_ie_s_init_zero                {0, 0, 0, 0, 0}
#define meshd_timeval_s_init_zero                {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define meshd_config_ssid_tag                    1
#define meshd_config_pwd_tag                     2
#define meshd_mesh_ie_s_role_tag                 1
#define meshd_mesh_ie_s_hops_tag                 2
#define meshd_mesh_ie_s_family_cnt_tag           3
#define meshd_mesh_ie_s_ul_score_tag             4
#define meshd_mesh_ie_s_status_tag               5
#define meshd_timeval_s_tv_sec_tag               1
#define meshd_timeval_s_tv_usec_tag              2
#define meshd_mesh_dev_s_bssid_tag               1
#define meshd_mesh_dev_s_channel_tag             2
#define meshd_mesh_dev_s_snr_tag                 3
#define meshd_mesh_dev_s_rssi_tag                4
#define meshd_mesh_dev_s_mesh_ie_tag             5
#define meshd_mesh_dev_s_last_seen_tag           6
#define meshd_ap_list_s_ap_list_tag              1
#define meshd_self_s_self_tag                    1

/* Struct field encoding specification for nanopb */
extern const pb_field_t meshd_config_fields[3];
extern const pb_field_t meshd_self_s_fields[2];
extern const pb_field_t meshd_ap_list_s_fields[2];
extern const pb_field_t meshd_mesh_dev_s_fields[7];
extern const pb_field_t meshd_mesh_ie_s_fields[6];
extern const pb_field_t meshd_timeval_s_fields[3];

/* Maximum encoded size of messages (where known) */
#define meshd_config_size                        165
#define meshd_self_s_size                        89
#define meshd_ap_list_s_size                     2848
#define meshd_mesh_dev_s_size                    87
#define meshd_mesh_ie_s_size                     30
#define meshd_timeval_s_size                     22

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESHD_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
