webpackJsonp([0],{0:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)},1:function(module,exports,__webpack_require__){"use strict";var device=angular.module("dcc.device",[]);__webpack_require__(2)("dcc.device"),device.factory("dsysinit",function(){return{GetWAN:__webpack_require__(121),Clean:__webpack_require__(124),RemoveWAN:__webpack_require__(125),VLAN:__webpack_require__(126),DSL_VLAN:__webpack_require__(127),WAN:__webpack_require__(128),USBSettings:__webpack_require__(130),Mac:__webpack_require__(131),LAN:__webpack_require__(132),WiFi:__webpack_require__(133),SuperMesh:__webpack_require__(134),Password:__webpack_require__(135),Language:__webpack_require__(136),Mode:__webpack_require__(137),USBModem:__webpack_require__(138),VoIP:__webpack_require__(139),UPnP:__webpack_require__(140),xDSL:__webpack_require__(141),RemoteAccess:__webpack_require__(142),Time:__webpack_require__(143),HotSpot:__webpack_require__(144)}}),device.factory("device",["cpe","funcs","$http",function(cpe,funcs,$http){function reset(){function reboot(){cpe.Reboot(!1)}return cpe.FactoryReset().then(reboot)}function updateGwifConnection(input){function getNetwork(){return cpe.GetParameterValues(["Device.Network"]).then(function(res){return funcs.buildTree(res.result.ParameterList)})}function updateConnection(config){var applyData={},connectionLink=input.connectionLink,connection=funcs.fetchBranch(config,connectionLink);if(isPPP(input)){var pppConfLink=connection.PPPConfiguration,pppConfParams={};_.has(input,"username")&&(pppConfParams.Username=input.username),_.has(input,"password")&&(pppConfParams.Password=input.password),funcs.setValue(pppConfLink.replace(/\.$/,""),pppConfParams,applyData)}else if(isCellular(input)){var path="Device.USB.Connection.",connections=funcs.fetchBranch(config,path);for(var key in funcs.newConfig.normalize(connections))if(connections[key].Interface==input.connectionLink){var pppConfParams={};_.has(input,"username")&&(pppConfParams.Username=input.username),_.has(input,"password")&&(pppConfParams.Password=input.password),funcs.setValue(path+key,pppConfParams,applyData);break}}var parameterList=funcs.splitTree(applyData);return cpe.SetParameterValues(parameterList)}function isPPP(input){var re=/pppoe|pppoev6|pppoedual|pptp|l2tp/,type=input.type;return re.test(type)}function isCellular(input){var re=/3g|lte|mobileinet/,type=input.type;return re.test(type)}return getNetwork().then(updateConnection)}function authCheck(){return cpe.GetParameterValues(["Device.Users.CurrentUser."])}return{funcs:__webpack_require__(5),system:{reset:reset,reboot:cpe.Reboot,save:cpe.SaveConfig},updateGwifConnection:updateGwifConnection,authCheck:authCheck,tm:__webpack_require__(145)}}])},121:function(module,exports,__webpack_require__){"use strict";function get_wan(config){var link=void 0;return _.each(config.Device.Switch.Switches,function(s,sk){_.each(s.Vlan,function(v,vk){_.find(v.Ports,function(p){return funcs.fetchBranch(config,p.Link).Upstream})&&(link="Device.Switch.Switches."+sk+".Vlan."+vk+".")})}),{__interface:link}}var _=__webpack_require__(4),funcs=(__webpack_require__(122).T,__webpack_require__(5));module.exports=get_wan},124:function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){function isCellularInterface(data){if(data.Interface){var data=funcs.fetchBranch(config,data.Interface);if(data)return/Device.Network.Interface.Cellular./.test(data.LowerLayer)||/Device.USB.Modem./.test(data.LowerLayer)}return!1}var config=funcs.deepClone(initConfig),types=profile&&"IPv4"==profile.KeepDefaultConns?[]:["DHCP"];types=types.concat(["USB","Static","PPPoE","DHCPv6"]);var connections=[],backupConnetions=profile&&profile.BackupConnections?profile.BackupConnections:[];return _.each(_.pick(initConfig.Device.Network.Connection,types),function(items,type){_.each(funcs.newConfig.normalize(items),function(data,inx){_.contains(backupConnetions,data.Name)||isCellularInterface(data)||connections.push("Device.Network.Connection."+type+"."+inx+".")})}),initConfig.Device.USB&&!profile.ModemAutoConnection&&_.each(initConfig.Device.USB.Connection,function(_,key){connections.push("Device.USB.Connection."+key+".")}),_.each(initConfig.Device.Network.Group[1].WAN,function(obj,key){_.contains(connections,obj.Link)&&delete config.Device.Network.Group[1].WAN[key]}),_.each(initConfig.Device.Network.Group[1].WANv6,function(obj,key){_.contains(connections,obj.Link)&&delete config.Device.Network.Group[1].WANv6[key]}),_.each(initConfig.Device.Network.Group[1].VPN,function(obj,key){_.contains(connections,obj.Link)&&delete config.Device.Network.Group[1].VPN[key]}),_.each(initConfig.Device.Firewall.IPv4.Masquerade,function(obj,key){obj.Dest&&_.contains(connections,obj.Dest.Interface)&&delete config.Device.Firewall.IPv4.Masquerade[key]}),_.each(initConfig.Device.Firewall.IPv4.Zones,function(z,zk){_.each(z.Interfaces,function(i,k){_.contains(connections,i.Path)&&delete config.Device.Firewall.IPv4.Zones[zk].Interfaces[k]})}),_.each(funcs.newConfig.normalize(initConfig.Device.Firewall.IPv4.Rules),function(obj,key){_.contains(connections,obj.Origin)&&delete config.Device.Firewall.IPv4.Rules[key]}),_.each(initConfig.Device.Firewall.IPv6.Zones,function(z,zk){_.each(z.Interfaces,function(i,k){_.contains(connections,i.Path)&&delete config.Device.Firewall.IPv6.Zones[zk].Interfaces[k]})}),_.each(funcs.newConfig.normalize(initConfig.Device.Firewall.IPv6.Rules),function(obj,key){_.contains(connections,obj.Origin)&&delete config.Device.Firewall.IPv6.Rules[key]}),_.has(initConfig.Device.Services,"IGMPX")&&_.each(initConfig.Device.Services.IGMPX.Upstreams,function(obj,key){_.contains(connections,obj.Interface)&&delete config.Device.Services.IGMPX.Upstreams[key]}),config}var _=__webpack_require__(4),funcs=(__webpack_require__(122).T,__webpack_require__(5));module.exports=diff},125:function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){function isCellularInterface(data){if(data.Interface){var data=funcs.fetchBranch(config,data.Interface);if(data)return/Device.Network.Interface.Cellular./.test(data.LowerLayer)||/Device.USB.Modem./.test(data.LowerLayer)}return!1}var backupConnetions=profile&&profile.BackupConnections?profile.BackupConnections:[],connections=[],config=funcs.deepClone(initConfig),pppClientRe=/^Device\.Network\.Settings\.PPPClient\.([0-9]+)\./,pppClientList=[],types=profile.KeepDefaultConns&&"IPv4"==profile.KeepDefaultConns?[]:["DHCP"];return types=types.concat(["USB","Static","PPPoE","DHCPv6"]),_.each(_.pick(initConfig.Device.Network.Connection,types),function(items,type){_.each(funcs.newConfig.normalize(items),function(data,inx){if(!_.contains(backupConnetions,data.Name)&&!isCellularInterface(data)&&(delete config.Device.Network.Connection[type][inx],connections.push("Device.Network.Connection."+type+"."+inx+"."),pppClientRe.test(data.PPPConfiguration)&&pppClientList.push(pppClientRe.exec(data.PPPConfiguration)[1]),"PPPoE"==type)){var dhcpKey=_.findKey(initConfig.Device.Network.Connection.DHCPv6,{Interface:"Device.Network.Connection."+type+"."+inx+"."});dhcpKey&&(delete config.Device.Network.Connection.DHCPv6[dhcpKey],connections.push("Device.Network.Connection.DHCPv6."+dhcpKey+"."))}})}),initConfig.Device.USB&&!profile.ModemAutoConnection&&_.each(initConfig.Device.USB.Connection,function(_,key){delete config.Device.USB.Connection[key]}),_.each(funcs.newConfig.normalize(initConfig.Device.Network.IP),function(obj,inst){function isDHCP(link){return/Device.Network.Connection.DHCP./.test(link)}var ipv4List=funcs.newConfig.normalize(initConfig.Device.Network.IP[inst].IPv4Address),isIPv4Address=_.some(ipv4List,function(ipv4){return _.contains(connections,ipv4.Origin)&&!isDHCP(ipv4.Origin)}),isLowerLayer=_.contains(connections,obj.LowerLayer)&&!isDHCP(obj.LowerLayer),isEtherWAN=!!obj.LowerLayer&&funcs.fetchBranch(profile,"Config.EtherWAN.Port")&&funcs.fetchBranch(config,obj.LowerLayer+"Upstream");(isIPv4Address||isLowerLayer||isEtherWAN)&&delete config.Device.Network.IP[inst]}),_.each(funcs.newConfig.normalize(initConfig.Device.Network.Settings.PPPClient),function(obj,key){_.contains(pppClientList,key)&&delete config.Device.Network.Settings.PPPClient[key]}),_.has(initConfig.Device,"xDSL")&&(config.Device.xDSL[1].ATM.PVC={}),_.has(initConfig.Device.Network.Interface,"ATM")&&(config.Device.Network.Interface.ATM={}),_.has(initConfig.Device.Network.Interface,"PTM")&&(config.Device.Network.Interface.PTM={}),config}var _=__webpack_require__(4),funcs=(__webpack_require__(122).T,__webpack_require__(5));module.exports=diff},126:function(module,exports,__webpack_require__){"use strict";function diff(config,profile,options){function getPortService(groups,name){var group=_.find(groups,function(o){return o.name==name});return group?group.service:""}function findPortInst(portLink,groupID){var group=config.Device.Switch.Switches[1].Vlan[groupID];return group?_.findKey(funcs.newConfig.normalize(group.Ports),function(o){return o.Link==portLink}):void 0}function getVlanPorts(name){var vlan=_.find(funcs.newConfig.normalize(config.Device.Switch.Switches[1].Vlan),function(o){return o.Name==name});return vlan?_.map(funcs.newConfig.normalize(vlan.Ports),function(o){return o.Link}):[]}function isCreateUntagServices(services){return!(!services.iptv||"wanu"!=services.iptv.type)||!(!services.voip||"wanu"!=services.voip.type)||!(!services.iptv_voip||"wanu"!=services.iptv_voip.type)}function getInterface(services){return services.internet&&"want"==services.internet.type?"Device.Switch.Switches.1.Vlan.internet.":void 0}return T({"->":["$switchId","$config","$profile","$withoutDefaultWanU","$backup","$services","$groups","$ports","Device","__interface"],$config:":external",$profile:":external",$removeDefaultWanU:["$profile",function(o){return!!o.Config.VLAN.__withoutDefaultWanU}],$services:["$root",function(r){return r.$profile.Config.VLAN.services}],$backup:["$root",function(r){return r.$profile.Config.VLAN.backup?r.$profile.Config.VLAN.backup:[]}],$backupPorts:["$backup",function(s){return _.flatten(_.map(s,function(o){return getVlanPorts(o)}))}],$groups:{"->":!0,"{$group, $gInst}":["$root",function(r){return funcs.newConfig.normalize(r.$config.Device.Switch.Switches[1].Vlan)}],"{$port, $pInst}":["$group",function(o){return o.Ports}],":":["$port",function(o){return o.Link}],groupInst:["$gInst",function(i){return i}],portInst:["$pInst",function(i){return i}]},$ports:{"->":!0,"{$port, $inst}":["$root",function(r){return funcs.newConfig.normalize(r.$config.Device.Switch.Ports)}],inst:["$inst",function(i){return i}],name:["$port",function(o){return o.Alias}],type:["$port",function(o){return o.Upstream?"WAN":"LAN"}],link:["$root","$inst",function(r,i){return"Device.Switch.Ports."+i+"."}],service:["$root","$port",function(r,o){return getPortService(r.$profile.Config.VLAN.groups.lan,o.Alias)}]},Device:{Switch:{"->":!0,Ports:["$root",function(r){return r.$config.Device.Switch.Ports}],Switches:{"->":!0,":":1,Vlan:{"->":!0,1:{"->":!0,Name:"LAN",Enable:!0,Ports:{"->":!0,"{$port, $i}":["$root",function(r){return r.$ports}],"?":["$port","$root",function(o,r){return"LAN"==o.type&&""==o.service&&!_.contains(r.$backupPorts,o.link)}],":":["$root","$i","$port",function(r,i,o){return findPortInst(o.link,1)?findPortInst(o.link,1):"+new_inst_"+(i+1)}],Link:["$port",function(o){return o.link}],Tag:!1}},2:{"->":["?","Ports"],"?":["$root",function(r){return!r.$removeDefaultWanU||isCreateUntagServices(r.$services)}],Name:"WAN",Enable:!0,CreateIface:["$root",function(r){return!(options.isOnlyOneIface&&r.$services.internet&&"want"==r.$services.internet.type&&isCreateUntagServices(r.$services))}],Ports:{"->":!0,"{$port, $i}":["$root",function(r){return r.$ports}],"?":["$port*","$root",function(o,r){return"WAN"==o.type||"iptv"==o.service&&(r.$services.iptv&&"wanu"==r.$services.iptv.type||r.$services.iptv_voip&&"wanu"==r.$services.iptv_voip.type)||"voip"==o.service&&(r.$services.voip&&"wanu"==r.$services.voip.type||r.$services.iptv_voip&&"wanu"==r.$services.iptv_voip.type)||"iptv_voip"==o.service&&r.$services.iptv_voip&&"wanu"==r.$services.iptv_voip.type}],":":["$root","$i","$port",function(r,i,o){return findPortInst(o.link,2)?findPortInst(o.link,2):"+new_inst_"+(i+1)}],Link:["$port",function(o){return o.link}],Tag:!1}},internet:{"->":["?","VID","Ports"],"?":["$root",function(r){return!!r.$services.internet&&"want"==r.$services.internet.type}],Name:"internet",Enable:!0,CreateIface:!0,VID:["$root",function(r){return r.$services.internet.vid}],Ports:{"->":!0,"{$port, $i}":["$root",function(r){return r.$ports}],"?":["$port",function(o){return"WAN"==o.type}],":":["$i",function(i){return"+new_inst_"+(i+1)}],Link:["$port",function(o){return o.link}],Tag:!0}},iptv:{"->":["?","VID","Ports"],"?":["$root",function(r){return!!r.$services.iptv&&"bridge"==r.$services.iptv.type}],Name:"iptv",Enable:!0,VID:["$root",function(r){return r.$services.iptv.vid}],Ports:{"->":!0,"{$port, $i}":["$root",function(r){return r.$ports}],"?":["$port",function(o){return"WAN"==o.type||"LAN"==o.type&&"iptv"==o.service}],":":["$i",function(i){return"+new_inst_"+(i+1)}],Link:["$port",function(o){return o.link}],Tag:["$port",function(o){return"WAN"==o.type}]}},voip:{"->":["?","VID","Ports"],"?":["$root",function(r){return!!r.$services.voip&&"bridge"==r.$services.voip.type}],Name:"voip",Enable:!0,VID:["$root",function(r){return r.$services.voip.vid}],Ports:{"->":!0,"{$port, $i}":["$root",function(r){return r.$ports}],"?":["$port",function(o){return"WAN"==o.type||"LAN"==o.type&&"voip"==o.service}],":":["$i",function(i){return"+new_inst_"+(i+1)}],Link:["$port",function(o){return o.link}],Tag:["$port",function(o){return"WAN"==o.type}]}},iptv_voip:{"->":["?","VID","Ports"],"?":["$root",function(r){return!!r.$services.iptv_voip&&"bridge"==r.$services.iptv_voip.type}],Name:"iptv_voip",Enable:!0,VID:["$root",function(r){return r.$services.iptv_voip.vid}],Ports:{"->":!0,"{$port, $i}":["$root",function(r){return r.$ports}],"?":["$port",function(o){return"WAN"==o.type||"LAN"==o.type&&("iptv"==o.service||"voip"==o.service||"iptv_voip"==o.service)}],":":["$i",function(i){return"+new_inst_"+(i+1)}],Link:["$port",function(o){return o.link}],Tag:["$port",function(o){return"WAN"==o.type}]}},$extend:["$root",function(r){_.each(funcs.newConfig.normalize(r.$config.Device.Switch.Switches[1].Vlan),function(vlan,key){_.contains(r.$backup,vlan.Name)&&(this[key]=vlan)},this)}]}}}},__interface:["$root",function(r){return getInterface(r.$services)}]}).build({$config:config,$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5);module.exports=diff},127:function(module,exports,__webpack_require__){"use strict";function diff(config,profile,options){function getLanVlans(profile,config){var list={};return _.each(profile.Config.GroupingInterfaces,function(gr){gr.create.lans_vid&&gr.create.lans.length===gr.create.lans_vid.length&&_.each(gr.create.lans_vid,function(l,k){var bridge=_.find(profile.Config.WAN.Bridge.Connection,function(c){return c.Name===l});if(bridge){var keyName=_.findKey(gr.create.lans_vid,function(_l){return _l===l}),name=gr.create.lans[keyName]+"_"+bridge.VLAN.ID;list[gr.create.lans[k]+"_"+bridge.VLAN.ID]={Enable:!0,CreateIface:!0,Name:name,VID:bridge.VLAN.ID,VPR:bridge.VLAN.QoS?bridge.VLAN.QoS:0,Ports:{_lan_port:{Tag:!0,Link:getPortLink(config,gr.create.lans[k])}}}}})}),list}function getBridgeVlans(groups,config,wanPort){var list={};return _.each(groups,function(group){if("Ethernet"==group.MediaType&&group.VID){var name="Bridge_"+group.GroupName;list[name]={Enable:!0,CreateIface:!0,Name:name,VPR:group.QoS?group.QoS:0,VID:group.VID,Ports:{vlan_bridge_port:{Tag:!0,Link:getPortLink(config,wanPort)}}}}}),list}function getEthernetVlans(profile,config,wanPort){function isUseVLAN(conn){return!!conn.VLAN&&conn.VLAN.ID>0}function isSecondDHCP(profile,conn){if(!profile.Config.WAN.IPv4oE)return!1;var list=[];return _.each(profile.Config.WAN.IPv4oE.Connection,function(conn){isUseVLAN(conn)||list.push(conn.Name)}),list.indexOf(conn.Name)>0}var list={};return _.each(_.omit(profile.Config.WAN,"Bridge"),function(type){_.each(type.Connection,function(conn){"Ethernet"===conn.MediaType&&!conn.Service&&(isUseVLAN(conn)||isSecondDHCP(profile,conn)||options.isMultipleUntagIface)&&(list[conn.Name]={Enable:!0,CreateIface:!0,Name:conn.Name,VID:isUseVLAN(conn)?conn.VLAN.ID:-1,VPR:conn.VLAN&&conn.VLAN.QoS?conn.VLAN.QoS:0,Ports:{_port:{Tag:!!(conn.VLAN&&conn.VLAN.ID>0),Link:getPortLink(config,wanPort)}}})})}),list}function getBridgeList(groups,config,wanPort){var list={};return _.each(groups,function(group){var members=_.map(group.LAN,function(alias){return group.LANSVid?"Device.Switch.Switches.1.Vlan."+alias+"_"+group.VID+".":getIfaceLink(config,alias)});"Ethernet"==group.MediaType?(members.push(group.VID?"Device.Switch.Switches.1.Vlan.Bridge_"+group.GroupName+".":getIfaceLink(config,wanPort)),list[group.GroupName]={Enable:!0,Members:_.object(_.map(members,function(link,index){return[group.GroupName+"_bridge_member_"+index,{Link:link,Name:group.BridgeName}]}))}):"DSL.PTM"==group.MediaType?(members.push("Device.Network.Interface.PTM."+group.GroupName+"."),list[group.GroupName]={Enable:!0,Members:_.object(_.map(members,function(link,index){return[group.GroupName+"_bridge_member_"+index,{Link:link,Name:group.BridgeName}]}))}):"DSL.ATM"==group.MediaType?(members.push("Device.Network.Interface.ATM."+group.GroupName+"."),list[group.GroupName]={Enable:!0,Members:_.object(_.map(members,function(link,index){return[group.GroupName+"_bridge_member_"+index,{Link:link,Name:group.BridgeName}]}))}):"WiFi"==group.MediaType&&(members.push(options["interface"]),list[group.GroupName]={Enable:!0,Members:_.object(_.map(members,function(link,index){return[group.GroupName+"_bridge_member_"+index,{Link:link,Name:group.BridgeName}]}))})}),list}function getLocalList(groupIfs,config){var list={};return _.each(groupIfs,function(i){var members=_.map(i.create.lans,function(alias){return getIfaceLink(config,alias)});list[i.create.name]={Enable:!0,Members:_.object(_.map(members,function(link,index){return[i.create.name+"_bridge_member_"+index,{Link:link}]}))}}),list}function getPTMList(groups,config){var list={};_.each(groups,function(group){"DSL.PTM"==group.MediaType&&(list[group.GroupName]={Enable:!0,Name:group.GroupName,VID:group.VID})});var old=funcs.newConfig.normalize(funcs.fetchBranch(config,"Device.Network.Interface.PTM."));return _.extend(list,old),list}function getATMList(groups,config){var list={};_.each(groups,function(group){"DSL.ATM"==group.MediaType&&(list[group.GroupName]={Enable:!0,Name:group.GroupName,LinkType:"BRIDGE"})});var old=funcs.newConfig.normalize(funcs.fetchBranch(config,"Device.Network.Interface.ATM."));return _.extend(list,old),list}function getPVCList(groups,config){var list={};_.each(groups,function(group){"DSL.ATM"==group.MediaType&&(list[group.GroupName]={Enable:!0,VPI:group.VPI,VCI:group.VCI,Interface:"Device.Network.Interface.ATM."+group.GroupName+"."})});var old=funcs.newConfig.normalize(funcs.fetchBranch(config,"Device.xDSL.1.ATM.PVC."));return _.extend(list,old),list}function getInterface(profile,config,port,tag){return/WiFi/.test(options["interface"])?void 0:getEthLink(config,port,tag)}function getEthLink(config,port,tag){return tag?"Device.Switch.Switches.1.Vlan.internet.":getIfaceLink(config,port)}function isBridged(config,groups,wanPort,groupIfs,member){function isServiceBridge(groups,alias){return _.some(groups,function(o){return o.LANSVid?_.contains(o.LANSVid,alias):_.contains(o.LAN,alias)})}function isLocalBridge(ifs,alias){return!!_.find(ifs.Config.GroupingInterfaces,function(i){return i.create.lans_vid?_.contains(i.create.lans_vid):_.contains(i.create.lans,alias)})}if(/^Device.Network.Interface.Ethernet./.test(member.Link)){var iface=funcs.fetchBranch(config,member.Link);if(/^Device.Switch.Switches.1.Vlan./.test(iface.LowerLayer)){var vlan=funcs.fetchBranch(config,iface.LowerLayer);return!_.some(funcs.newConfig.normalize(vlan.Ports),function(port){var info=funcs.fetchBranch(config,port.Link);return info.Alias==wanPort||isServiceBridge(groups,info.Alias)||isLocalBridge(groupIfs,info.Alias)})}}return!0}function getIfaceLink(config,name){var key=_.findKey(funcs.fetchBranch(config,"Device.Network.Interface.Ethernet."),function(iface){if(/^Device.Switch.Switches.1.Vlan./.test(iface.LowerLayer)){var vlan=funcs.fetchBranch(config,iface.LowerLayer);return _.some(funcs.newConfig.normalize(vlan.Ports),function(port){var info=funcs.fetchBranch(config,port.Link);return name==info.Alias||name==info.Name})}});return"Device.Network.Interface.Ethernet."+key+"."}function getPortLink(config,name){var key=_.findKey(funcs.fetchBranch(config,"Device.Switch.Ports."),function(o){return o.Alias==name});return"Device.Switch.Ports."+key+"."}function getLans(groups){var result=[];return _.each(groups,function(group){result=result.concat(group.LAN)}),result}var pattern=T({"->":["$config","$profile","$hasWAN","$wanExists","$wanTag","$groups","$groupsPorts","Device","__interface"],$config:":external",$profile:":external",$wanPort:["$profile",function(o){return o.Config.EtherWAN&&o.Config.EtherWAN.Port?o.Config.EtherWAN.Port:"WAN"}],$hasWAN:["$config",function(o){return _.some(funcs.newConfig.normalize(funcs.fetchBranch(o,"Device.Switch.Ports.")),function(p){return/^WAN/.test(p.Alias)})}],$groups:{"->":["$bridge","?","$isATM","$isEthPTM","$group","LAN"],"{$bridge, $index}":["$root",function(r){return funcs.fetchBranch(r.$profile,"Config.WAN.Bridge.Connection.")||[]}],"?":["$bridge",function(o){return!!o}],$isATM:["$bridge",function(o){return"DSL.ATM"==o.MediaType||void 0}],$isEthPTM:["$bridge",function(o){return"DSL.PTM"==o.MediaType||"Ethernet"==o.MediaType||void 0}],$group:["$root","$bridge",function(r,o){return _.find(r.$profile.Config.GroupingInterfaces,function(br){return _.contains(br.create.wans,o.Name)})}],BridgeName:["$bridge",function(o){return o.Name}],MediaType:["$bridge",function(o){return o.MediaType}],VPI:["$bridge","$isATM*",function(o){return parseInt(o.Media.DSL.ATM.DestinationAddress.split("/")[0])}],VCI:["$bridge","$isATM*",function(o){return parseInt(o.Media.DSL.ATM.DestinationAddress.split("/")[1])}],VID:["$bridge","$isEthPTM*",function(o){return o.VLAN&&o.VLAN.Enable?o.VLAN.ID:void 0}],QoS:["$bridge","$isEthPTM*",function(o){return o.VLAN&&o.VLAN.Enable?o.VLAN.QoS:void 0}],LAN:["$group",function(o){return o.create.lans}],LANSVid:["$group",function(o){return o.create.lans_vid}],GroupName:["$group",function(o){return o.create.name}]},$groupsPorts:["$groups",function(o){return getLans(o)}],$groupsLocal:["$profile",function(p){return _.filter(p.Config.GroupingInterfaces,function(i){return!i.create.wans})}],Device:{Switch:{Ports:{"->":!0,"{$port, $inst}":["$root",function(r){return funcs.newConfig.normalize(funcs.fetchBranch(r.$config,"Device.Switch.Ports."))}],":":["$inst",function(o){return o}],Alias:["$port",function(o){return o.Alias}],Upstream:["$root","$port",function(r,p){return r.$wanPort==p.Alias}]},Switches:{"->":!0,1:{"->":!0,Vlan:{"->":!0,$extend:["$root",function(root){_.extend(this,_.omit(funcs.newConfig.normalize(funcs.fetchBranch(root.$config,"Device.Switch.Switches.1.Vlan.")),function(v){return!!_.find(v.Ports,function(p){return p.Tag})})),_.extend(this,getBridgeVlans(root.$groups,root.$config,root.$wanPort)),_.extend(this,getEthernetVlans(root.$profile,root.$config,root.$wanPort)),_.extend(this,getLanVlans(root.$profile,root.$config))}]}}}},Network:{Interface:{"->":!0,Bridge:{"->":!0,1:{Members:{"->":["$members","$extend"],$members:["$root",function(r){return funcs.newConfig.normalize(funcs.fetchBranch(r.$config,"Device.Network.Interface.Bridge.1.Members."))}],vlan_bridge_1_member:{"->":!0,"?":["$root",function(r){return r.$hasWAN&&"WAN"!=r.$wanPort&&!_.contains(r.$groupsPorts,"WAN")}],Link:["$root",function(r){return getIfaceLink(r.$config,"WAN")}]},$extend:["$root","$members",function(root,members){_.extend(this,_.pick(members,function(o){return isBridged(root.$config,root.$groups,root.$wanPort,root.$profile,o)}))}]}},_bridge:{"->":!0,"?":["$root",function(r){return!!r.$profile.Config.GroupingInterfaces}],Enable:!0},$extend:["$root",function(root){_.extend(this,getBridgeList(root.$groups,root.$config,root.$wanPort,root.$wanTag)),_.extend(this,getLocalList(root.$groupsLocal,root.$config))}]},PTM:["$root",function(r){return getPTMList(r.$groups,r.$config)}],ATM:["$root",function(r){return getATMList(r.$groups,r.$config)}]}},xDSL:{"->":!0,":":1,ATM:{"->":!0,PVC:["$root",function(r){return getPVCList(r.$groups,r.$config)}]}}},__interface:["$root",function(r){return getInterface(r.$profile,r.$config,r.$wanPort,r.$wanTag)}]}),result=pattern.build({$config:config,$profile:profile});if(profile.Config.GroupingInterfaces){funcs.setValue("Device.Firewall.IPv4.Zones",funcs.newConfig.normalize(funcs.deepClone(funcs.fetchBranch(config,"Device.Firewall.IPv4.Zones."))),result),funcs.setValue("Device.Firewall.IPv6.Zones",funcs.newConfig.normalize(funcs.deepClone(funcs.fetchBranch(config,"Device.Firewall.IPv6.Zones."))),result);var bridgeZone=_.find(config.Device.Firewall.IPv4.Zones,function(z){return"bridge"===z.Name});_.each(profile.Config.GroupingInterfaces,function(i,k){profile.Config.WAN.Bridge&&_.find(i.create.wans,function(w){return!!_.find(profile.Config.WAN.Bridge.Connection,function(c){return c.Name===w})})?(bridgeZone||(bridgeZone={Access:!1,Name:"bridge",Interfaces:{}},result.Device.Firewall.IPv4.Zones.new_inst=bridgeZone,result.Device.Firewall.IPv4.Policy=funcs.newConfig.normalize(funcs.deepClone(funcs.fetchBranch(config,"Device.Firewall.IPv4.Policy."))),result.Device.Firewall.IPv4.Policy.new_inst_out={Source:"Device.Firewall.IPv4.Zones.new_inst.",Dest:"Device.Firewall.IPv4.Zones.2.",Policy:"ACCEPT"},result.Device.Firewall.IPv6.Zones.new_inst=bridgeZone,result.Device.Firewall.IPv6.Policy=funcs.newConfig.normalize(funcs.deepClone(funcs.fetchBranch(config,"Device.Firewall.IPv6.Policy."))),result.Device.Firewall.IPv6.Policy.new_inst_out={Source:"Device.Firewall.IPv6.Zones.new_inst.",Dest:"Device.Firewall.IPv6.Zones.2.",Policy:"ACCEPT"}),bridgeZone.Interfaces["new_inst_"+k]={Path:"Device.Network.Interface.Bridge."+i.create.name+"."}):(i.create.fw_rule_wan2lan&&(result.Device.Firewall.IPv4.Zones[3].Access=!0,result.Device.Firewall.IPv6.Zones[3].Access=!0),funcs.setValue("Device.Firewall.IPv4.Zones.3.Interfaces.new_inst"+k,{Path:"Device.Network.Interface.Bridge."+i.create.name+"."},result),funcs.setValue("Device.Firewall.IPv6.Zones.3.Interfaces.new_inst"+k,{Path:"Device.Network.Interface.Bridge."+i.create.name+"."},result))})}return result}var _=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5);module.exports=diff},128:function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function diff(config,profile,options){function isCreateGuest(obj){return obj.Config.WiFi&&(obj.Config.WiFi.Radio[1]&&_.size(obj.Config.WiFi.Radio[1].AccessPoint)>1||obj.Config.WiFi.Radio[2]&&_.size(obj.Config.WiFi.Radio[2].AccessPoint)>1)}function getGuest(obj){if(!obj.Config.WiFi)return null;var result=[],bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.each(obj.Config.WiFi.Radio,function(radio,inst){_.each(radio.AccessPoint,function(ap,key){if(1!=key){var band=_.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==radio.OperatingFrequencyBand});result.push("Device.WiFi.Radio."+band+".AccessPoint."+key+".")}})}),result}function getModem(data){var splitModem=data.Modem?data.Modem.split(" "):void 0;return splitModem?splitModem[0]:""}function getAdditionalGroups(groupIfs,conns,profile){var list={};return _.each(groupIfs,function(i){list[i.create.name]={Name:i.create.name+"#nat",LAN:"Device.Network.Interface.Bridge."+i.create.name+"."},i.create.wans?profile.Config.WAN.Bridge&&_.find(i.create.wans,function(w){return!!_.find(profile.Config.WAN.Bridge.Connection,function(c){return c.Name===w})})&&(list[i.create.name].Name=i.create.name+"#bridge"):(list[i.create.name].WAN=helper.getGroups(conns,!1,profile),list[i.create.name].WANv6=helper.getGroups(conns,!0,profile),list[i.create.name].Name=i.create.name+"#local")}),list}function getPingRules(pingRules,v6){var list={};return _.each(pingRules,function(rule,k){v6?list["+new_ipv6_rule_"+k]=rule:list["+new_ipv4_rule_"+k]=rule}),list}function getFwRuleWan2Lan(profile){function getAddress(addr,mask){return-1===mask.indexOf(".")?addr+"/"+mask:addr+"/"+funcs.ipv4.mask["short"](mask)}var list={};if(profile.Config.GroupingInterfaces){var g=_.find(profile.Config.GroupingInterfaces,function(g){return g.create.fw_rule_wan2lan});if(g){var st=profile.Config.LAN[1].IPv4.StaticIP[1];list[g.create.name]={CTState:{new_inst_1:{Value:"NEW"},new_inst_2:{Value:"ESTABLISHED"},new_inst_3:{Value:"RELATED"}},Dest:{Address:{new_inst:{IPEnd:"",IPStart:getAddress(st.Address,st.SubnetMask)}},Zone:"Device.Firewall.IPv4.Zones.3."},Ports:{Dest:{new_inst:{PortStart:-1,PortEnd:-1}},Source:{new_inst:{PortStart:-1,PortEnd:-1}}},Source:{Address:{new_inst:{IPEnd:"",IPStart:""}},Zone:"Device.Firewall.IPv4.Zones.2."},Action:"ACCEPT",Enable:!0,Name:g.create.name,Proto:{new_inst:{Value:"",Type:{}}}}}}return list}function getIPv6ConnectionLink(conn){return"DHCPv6"==conn.type||"PPPoEv6"==conn.type||"PPPoEDual"==conn.type?"Device.Network.Connection.DHCPv6."+conn.key+".":conn.link}var pattern=T({"->":["$profile","$config","$isCreateGuest","$isChangeMode","Device"],$profile:":external",$config:":external",$isCreateGuest:["$profile",function(o){return!!isCreateGuest(o)}],$isChangeMode:["$profile","$config",function(p,c){return!p.Config.DeviceMode||!p.Config.DeviceMode.Mode||p.Config.DeviceMode.Mode.toLowerCase()!=c.Device.DeviceInfo.DeviceMode.toLowerCase()}],Device:{"->":["$connections","Network","xDSL","Firewall","Routing","Services","Voip","USB"],$connections:{"->":["?"],"{$list, $type}":["$root",function(r){return _.omit(r.$profile.Config.WAN,"Bridge")}],"{$conn, $inst, $n}":["$list",function(l){return l.Connection}],"?":["$root",function(r){return!_.isEmpty(_.omit(r.$profile.Config.WAN,"Bridge"))}],type:["$type","$conn",function(s,o){return helper.getActualType(s,o)}],media:["$conn",function(o){return o.MediaType}],data:["$conn",function(o){return o}],key:["$n",function(n){return"+connection_"+n}],link:["key","type",function(k,t){return helper.getActualLink(k,t)}],nativeLink:["$inst","$type",function(i,t){return"Config.WAN."+t+".Connection."+i}],ipv6:["type",function(o){return _.contains(["DHCPv6","Staticv6","PPPoEv6","PPPoEDual"],o)}],ipv4:["ipv6","type",function(o,t){return!o||"PPPoEDual"==t}]},xDSL:{"->":["$atm","?","ATM"],$atm:["$parent",function(p){return _.filter(p.$connections,function(o){return"DSL.ATM"==o.media})}],"?":["$atm",function(o){return o.length>0}],":":"1",ATM:{PVC:{"->":!0,"{$atm}":["$parent",function(p){return p.$parent.$atm}],$media:["$atm*",function(o){return funcs.fetchBranch(o.data.Media,o.data.MediaType+".")}],":":["$atm",function(o){return o.key+"_ATM_PVC"}],Enable:!0,VCI:["$media*",function(o){return parseInt(o.DestinationAddress.split("/")[1])}],VPI:["$media*",function(o){return parseInt(o.DestinationAddress.split("/")[0])}],Interface:["$atm*",function(o){return"Device.Network.Interface.ATM."+o.key+"_ATM_interface."}]}}},Services:{"->":["$connections","IGMPX","TR069"],$connections:["$parent",function(p){return p.$connections}],IGMPX:{"->":["$ipoe","?","Upstreams","Enable"],"?":["$ipoe",function(o){return!!o}],$ipoe:["$parent",function(p){return _.find(p.$connections,function(o){return o.data.Flags.IGMP})}],Enable:["$ipoe",function(o){return!!o}],Upstreams:{"->":!0,":":"+new_igmp_connection",Interface:["$parent",function(p){return p.$ipoe.link}]}},TR069:{"->":!0,"?":["$ipoe",function(i){return!!i}],$ipoe:["$parent",function(p){return _.find(p.$connections,function(o){return"TR069"===o.data.Name;

})}],Iface:["$ipoe*",function(i){return i.link}]}},Voip:{"->":!0,"?":["$ipoe",function(i){return!!i}],$ipoe:["$parent",function(p){return _.find(p.$connections,function(o){return"VoIP"===o.data.Name})}],XDLinkNetworkConnection:["$ipoe*",function(i){return i.link}]},Routing:{"->":["$IPv4RIP","$IPv6RIP","?","RIP","RIPng"],$IPv4RIP:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv4&&o.data.Flags.RIP})}],$IPv6RIP:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv6&&o.data.Flags.RIP})}],"?":["$IPv4RIP","$IPv6RIP",function(r4,r6){return!!r4.length||!!r6.length}],RIP:{"->":!0,"?":["$parent",function(p){return!!p.$IPv4RIP.length}],Enable:!0,Networks:{"->":!0,"{$rule, $keym, $i}":["$parent",function(p){return p.$parent.$IPv4RIP}],":":["$i",function(i){return"+new_RIP_rule_"+i}],Link:["$rule*",function(o){return o.link}]}},RIPng:{"->":!0,"?":["$parent",function(p){return!!p.$IPv6RIP.length}],Enable:!0,Networks:{"->":!0,"{$rule, $keym, $i}":["$parent",function(p){return p.$parent.$IPv6RIP}],":":["$i",function(i){return"+new_RIPng_rule_"+i}],Link:["$rule*",function(o){return o.link}]}}},Network:{"->":["$connections","Connection","Settings","Group","Interface","Server","IP"],$connections:["$parent",function(p){return p.$connections}],Connection:{"->":["?","$DHCP","$DHCPv6","$Static","$Staticv6","$PPPoE","$PPPoEv6","$PPTP","$L2TP","$USB"],"?":["$parent",function(p){return _.size(p.$connections)}],$DHCP:{"->":["$conn","$data","?","Kabinet"],"?":["$conn",function(o){return o&&"DHCP"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options["interface"],options.isRealtekModem,options.isMultipleUntagIface)}],Name:["$data",function(o){return o.Name}],VendorID:["$data",function(o){return o.VendorID||void 0}],Kabinet:{"->":["?"],"?":["$parent",function(p){return!!p.$data&&!!p.$data.Kabinet}],Enable:["$parent",function(p){return p.$data.Kabinet.Enable}],Password:["$parent",function(p){return p.$data.Kabinet.Password}]}},$DHCPv6:{"->":["$conn","?"],"?":["$conn",function(o){return o&&("DHCPv6"==o.type||"PPPoEv6"==o.type||"PPPoEDual"==o.type)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return"PPPoEv6"==o.type||"PPPoEDual"==o.type?"Device.Network.Connection.PPPoE.+connection_0.":helper.getInterface(r.$profile,o,options["interface"],options.isRealtekModem,options.isMultipleUntagIface)}],Name:["$data",function(o){return o.Name}],VendorID:["$data",function(o){return o.VendorID||void 0}],DHCPv6EnablePD:!0,IPv6Mode:["$conn",function(o){return helper.getIPv6Mode(o)}]},$Static:{"->":["$conn","?","DNS"],"?":["$conn",function(o){return o&&"Static"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options["interface"],options.isRealtekModem,options.isMultipleUntagIface)}],Name:["$data",function(o){return o.Name}],Gateway:["$data",function(o){return o.GatewayIPAddress}],IPAddress:["$data",function(o){return helper.getIPAddress(o)}],DNS:{"->":!0,":":"+1",IPAddress:["$parent",function(p){return p.$data.DNSServer1}]}},$Staticv6:{"->":["$conn","?","DNS"],"?":["$conn",function(o){return o&&"Staticv6"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],Interface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options["interface"],options.isRealtekModem,options.isMultipleUntagIface)}],Name:["$data",function(o){return o.Name}],Gateway:["$data",function(o){return o.GatewayIPAddress}],IPAddress:["$data",function(o){return helper.getIPAddress(o)}],DNS:{"->":!0,":":"+1",IPAddress:["$parent",function(p){return p.$data.DNSServer1}]}},$PPPoE:{"->":["$conn","?"],"?":["$conn",function(o){return o&&helper.isPPPoE(o)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],BaseInterface:["$root","$conn",function(r,o){return helper.getInterface(r.$profile,o,options["interface"],options.isRealtekModem,options.isMultipleUntagIface)}],PPPConfiguration:["$conn",function(o){return"Device.Network.Settings.PPPClient."+o.key+"_pppClient."}],Name:["$data",function(o){return o.Name}],ServiceName:["$data",function(o){return o.ServiceName}],UnnumberedIP:["$conn",function(o){return o.data.UnnumberedIP?helper.getUnnumberedIPLink(o):void 0}]},$PPTP:{"->":["$conn","?"],"?":["$conn",function(o){return o&&"PPTP"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],BaseInterface:["$parent","$data",function(p,c){return helper.getXXTPInterface(p.$parent.$connections,c)}],PPPConfiguration:["$conn",function(o){return"Device.Network.Settings.PPPClient."+o.key+"_pppClient."}],Name:["$data",function(o){return o.Name}],ServerAddress:["$data",function(o){return o.ServiceName}]},$L2TP:{"->":["$conn","?"],"?":["$conn",function(o){return o&&"L2TP"==o.type}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn",function(c){return c.key}],$data:["$conn",function(c){return c.data}],Enable:["$root",function(r){return r.$isChangeMode}],BaseInterface:["$parent","$data",function(p,c){return helper.getXXTPInterface(p.$parent.$connections,c)}],PPPConfiguration:["$conn",function(o){return"Device.Network.Settings.PPPClient."+o.key+"_pppClient."}],Name:["$data",function(o){return o.Name}],LNS:["$data",function(o){return o.ServiceName}]},DHCP:["$DHCP",function(o){return _.size(o)?o:void 0}],DHCPv6:["$DHCPv6",function(o){return _.size(o)?o:void 0}],Static:["$Static",function(o){return _.size(o)?o:void 0}],Staticv6:["$Staticv6",function(o){return _.size(o)?o:void 0}],PPPoE:["$PPPoE",function(o){return _.size(o)?o:void 0}],PPTP:["$PPTP",function(o){return _.size(o)?o:void 0}],L2TP:["$L2TP",function(o){return _.size(o)?o:void 0}]},Settings:{"->":["PPPClient","?"],"?":["PPPClient",function(o){return _.size(o)}],PPPClient:{"->":!0,"?":["$conn",function(o){return o&&helper.isPPP(o)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn*",function(o){return o.key+"_pppClient"}],$data:["$conn*",function(c){return c.data}],Username:["$data*",function(o){return o.Username}],Password:["$data*",function(o){return o.WithoutAuth?"":o.Password}],IPv6:["$conn*",function(o){return _.contains(["PPPoEv6","PPPoEDual"],o.type)}],IPv6Only:["$conn*",function(o){return _.contains(["PPPoEv6"],o.type)}],MTU:["$data*",function(o){return o.MaxMRUSize||1492}],KeepAlive:{Enable:!0,Fails:3,Interval:30},Ondemand:["$data*",function(o){return o.Ondemand}],OndemandTimeout:["$data*",function(o){return o.IdleDisconnectTime}]}},Group:{"->":!0,1:{"->":["$connections","WAN","WANv6"],$connections:["$parent",function(p){return p.$parent.$connections}],$profile:["$root",function(r){return r.$profile}],WAN:["$connections",function(o){return helper.getGroups(o,!1,profile,config)}],WANv6:["$connections",function(o){return helper.getGroups(o,!0,profile,config)}],Name:"Default#nat"},_bridge:{"->":!0,"?":["$root",function(r){return!!r.$profile.Config.GroupingInterfaces}],Name:"_tech#bridge",LAN:"Device.Network.Interface.Bridge._bridge."},$extend:["$root","$parent",function(root,parent){_.extend(this,getAdditionalGroups(root.$profile.Config.GroupingInterfaces,parent.$connections,root.$profile))}]},Interface:{"->":!0,Bridge:{"->":["?","Members"],"?":["$root",function(r){return r.$isCreateGuest}],":":1,Members:{"->":!0,"{$links, $index}":["$root",function(r){return getGuest(r.$profile)}],":":["$index*",function(i){return"+"+i}],Link:["$links*",function(l){return l}]}},ATM:["$parent",function(p){return helper.getATMInterfaces(p.$connections)}],PTM:["$parent",function(p){return helper.getPTMInterfaces(p.$connections)}]},IP:{"->":["$ip","?","IPv4Address"],"{$ip}":["$root","$parent",function(r,p){return helper.getIPInstances(p.$parent.$connections,_.filter(r.$profile.Config.GroupingInterfaces,function(i){return!i.create.wans}),r.$profile.Config.LAN)}],"?":["$ip",function(o){return!!o}],":":["$ip*",function(o){return o.Key}],Enable:!0,LowerLayer:["$ip",function(o){return o.LowerLayer}],IPv4Address:{"->":["$ipv4","?"],"{$ipv4}":["$parent",function(p){return p.$ip.IPv4Address}],"?":["$ipv4",function(o){return!!o}],":":["$ipv4*",function(o){return o.Key}],Enable:!0,IPAddress:["$ipv4",function(o){return o.IPAddress}]}}},Firewall:{"->":["$connections","IPv4","IPv6"],$connections:["$parent",function(p){return p.$connections}],IPv4:{"->":["$list","?","$pingRules","Masquerade","Zones","Rules"],$list:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv4})}],"?":["$list",function(o){return _.size(o)>0}],$pingRules:{"->":["$conn","?","Source"],"{$conn, $key, $i}":["$parent",function(p){return p.$parent.$connections}],"?":["$conn*",function(o){return o.ipv4&&o.data.Flags.Ping}],Action:"ACCEPT",Enable:!0,Dest:{Zone:"Device.Firewall.IPv4.Zones.1."},Pattern:"ICMP",Source:{"->":!0,$conn:["$parent",function(p){return p.$conn}],Iface:["$conn*",function(o){return o.link}],Zone:"Device.Firewall.IPv4.Zones.2."},Proto:{"+new_rule_proto":{Value:"icmp"}}},Masquerade:{"->":["$conn","Dest","Source"],"{$add_for}":["$root",function(r){return["clients"]}],"{$conn, $key, $index}":["$parent",function(p){return _.filter(p.$list,function(e){return e.data.Flags.NAT})}],"?":["$conn",function(c){return!!c}],":":["$index*",function(i){return"+new_v4_masquerade_"+i}],Enable:!0,Dest:{"->":!0,Interface:["$parent",function(p){return p.$conn.link}]},Source:{"->":!0,Interface:["$parent",function(p){return"clients"==p.$add_for?"Device.Network.Interface.Bridge.1.":"Device.Network.Interface.Bridge.+new_guest_bridge."}]}},Rules:{"->":!0,$extend:["$root","$parent",function(root,parent){_.extend(this,getPingRules(parent.$pingRules,!1)),_.extend(this,getFwRuleWan2Lan(root.$profile))}]},Zones:{2:{"->":!0,Interfaces:{"->":!0,"{$conn, $key, $index}":["$parent",function(p){return helper.getFirewallConnections(p.$parent.$parent.$list,!1)}],":":["$index",function(i){return"+new_v4_zones_"+i}],Path:["$conn*",function(o){return o.link}]}}}},IPv6:{"->":["$list","?","$pingRules","Zones","Rules"],$list:["$parent",function(p){return _.filter(p.$connections,function(o){return o.ipv6})}],"?":["$list",function(o){return _.size(o)>0}],$pingRules:{"->":["$conn","?","Source"],"{$conn, $key, $i}":["$parent",function(p){return p.$parent.$connections}],"?":["$conn*",function(o){return o.ipv6&&o.data.Flags.Ping}],Action:"ACCEPT",Enable:!0,Dest:{Zone:"Device.Firewall.IPv6.Zones.1."},Pattern:"ICMP",Source:{"->":!0,$conn:["$parent",function(p){return p.$conn}],Iface:["$conn*",function(o){return getIPv6ConnectionLink(o)}],Zone:"Device.Firewall.IPv6.Zones.2."},Proto:{"+new_v6_rule_proto":{Value:"ipv6-icmp",Type:{"+new_v6_rule_proto_128":{Value:128},"+new_v6_rule_proto_129":{Value:129}}}}},Rules:{"->":!0,$extend:["$root","$parent",function(root,parent){_.extend(this,getPingRules(parent.$pingRules,!0))}]},Zones:{2:{"->":["$list","Interfaces"],$list:["$parent",function(p){return helper.getFirewallConnections(p.$parent.$list,!0)}],Interfaces:{"->":!0,"{$conn, $key, $index}":["$parent",function(p){return _.filter(p.$list,function(o){return"PPPoE"!=o.type})}],":":["$index",function(i){return"+new_v6_zones_"+i}],Path:["$conn",function(o){return o.link}]}}}}},USB:{"->":["?","AutoConnect","Connection"],"?":["$root",function(r){return"object"==_typeof3["default"](r.$config.Device.USB)&&"object"==_typeof3["default"](r.$config.Device.USB.AutoConnect)}],AutoConnect:{"->":!0,"?":["$root",function(r){return"boolean"==typeof r.$profile.ModemAutoConnection}],Enable:["$root",function(r){return r.$profile.ModemAutoConnection}]},Connection:{"->":["$conn","?","Binding"],"?":["$conn",function(o){return o&&helper.isUSB(o)}],"{$conn}":["$parent",function(p){return p.$parent.$connections}],":":["$conn*",function(c){return c.key}],$data:["$conn*",function(c){return c.data}],$is3G:["$data*",function(o){return"3G"==o.Media[o.MediaType].Type||void 0}],Enable:!0,Name:["$data*",function(o){return o.Name}],APN:["$data*",function(o){return o.APN}],DialNumber:["$data*",function(o){return o.DialNumber}],Username:["$data*",function(o){return o.Username}],Password:["$data*",function(o){return o.Password}],NoAuth:["$data*",function(o){return!o.Username&&!o.Password}],Binding:{"->":!0,$data:["$parent",function(p){return p.$data}],Modem:["$data*",function(d){return getModem(d)}]}}}}}),result=pattern.build({$profile:profile,$config:config});return result}var _typeof2=__webpack_require__(82),_typeof3=_interopRequireDefault(_typeof2),_=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5),helper=__webpack_require__(129);module.exports=diff},129:function(module,exports,__webpack_require__){"use strict";function getBridgeInterfaces(profile,isCreateGuest){var result={};if(isCreateGuest){var links=getGuestAPLink(profile);if(links.length){var instances={};_.each(links,function(link,index){instances[index]={Link:link}}),result["+new_guest_bridge"]={Enable:!0,Name:"GUEST",Members:instances}}}return _.size(result)?result:void 0}function getATMInterfaces(connections){var result={},conn=_.filter(connections,function(o){return"DSL.ATM"==o.media});return _.each(conn,function(obj,index){var media=funcs.fetchBranch(obj.data.Media,obj.data.MediaType+".");result[obj.key+"_ATM_interface"]={Enable:!0,LinkType:getLinkType(media.LinkType)}}),_.size(result)?result:void 0}function getLinkType(lt){switch(lt){case"EoA":return"IPOE_PPPOE";case"IPoA":return"IPOA";case"PPPoA":return"PPPOA";case"BRIDGE":return"BRIDGE"}}function getPTMInterfaces(connections){function getVID(data){return data.VLAN&&data.VLAN.Enable?data.VLAN.ID:0}var result={},conn=_.filter(connections,function(o){return"DSL.PTM"==o.media});return _.each(conn,function(obj,index){var media=funcs.fetchBranch(obj.data.Media,obj.data.MediaType+".");result[obj.key+"_PTM_interface"]={Enable:!0,VID:getVID(obj.data),MACAddress:media.MACAddress}}),_.size(result)?result:void 0}function getGuestAPLink(obj){if(!obj.Config.WiFi)return[];var result=[];return _.each(obj.Config.WiFi.Radio,function(radio,inst){_.each(radio.AccessPoint,function(ap,key){1!=key&&result.push("Device.WiFi.Radio."+inst+".AccessPoint."+key+".")})}),result}function getIPv6Mode(obj){switch(obj.data.Origin){case"AutoConfiguredBySlaac":return"Autoconf";case"AutoConfiguredByDHCPv6":return"DHCP";case"AutoConfigured":return"Auto";default:return}}function isPPP(obj){return _.contains(["PPPoEv6","PPPoEDual","PPPoE","PPTP","L2TP"],obj.type)}function isPPPoE(obj){return _.contains(["PPPoEv6","PPPoEDual","PPPoE"],obj.type)}function isUSB(obj){return _.contains(["USB"],obj.type)}function getActualType(type,obj){switch(type){case"IPv4oE":return obj.AddressingType;case"IPv6oE":return obj.AddressingType+"v6";case"PPTP":return obj.ActualType;case"3G":case"LTE":return"USB"}return type}function getActualLink(key,type){switch(type){case"PPPoEDual":case"PPPoEv6":return"Device.Network.Connection.PPPoE."+key+".";case"USB":return"Device.USB.Connection."+key+"."}return"Device.Network.Connection."+type+"."+key+"."}function getGroupConnections(list,ipv6){function getIPv4Links(obj){return obj.ipv4?obj:null}function getIPv6Links(obj){var list=[];switch(obj.type){case"PPPoEv6":case"PPPoEDual":list.push({ipv6:!0,key:"+DHCPv6",link:"Device.Network.Connection.DHCPv6.+connection_0."});break;case"DHCPv6":case"Staticv6":list.push(obj)}return list}return _.compact(_.reduce(list,function(list,obj){return list.concat(ipv6?getIPv6Links(obj):getIPv4Links(obj))},[]))}function getFirewallConnections(list,ipv6){return _.reduce(list,function(list,obj){return"PPPoEDual"!=obj.type||ipv6?obj.ipv6!=ipv6?list:"PPPoEv6"==obj.type||"PPPoEDual"==obj.type?list.concat({ipv6:!0,key:"+DHCPv6",link:"Device.Network.Connection.DHCPv6.+connection_0."}):(list.push(obj),list):list.concat(obj)},[])}function getInterface(profile,conn,iface,isRealtekModem,isMultipleUntagIface){function getWiredIface(){return isRealtekModem&&(isUseVLAN(conn.data)||isSecondDHCP(profile,conn.data)||isMultipleUntagIface)&&"Ethernet"===conn.data.MediaType?"Device.Switch.Switches.1.Vlan."+conn.data.Name+".":"DSL.ATM"==conn.data.MediaType?"Device.Network.Interface.ATM."+conn.key+"_ATM_interface.":"DSL.PTM"==conn.data.MediaType?"Device.Network.Interface.PTM."+conn.key+"_PTM_interface.":iface}function isUseVLAN(conn){return!!conn.VLAN&&conn.VLAN.ID>0}function isSecondDHCP(profile,conn){if(!profile.Config.WAN.IPv4oE)return!1;var list=[];return _.each(profile.Config.WAN.IPv4oE.Connection,function(conn){isUseVLAN(conn)||list.push(conn.Name)}),list.indexOf(conn.Name)>0}return funcs.fetchBranch(conn.data.Media,conn.data.MediaType+"."),"WiFi"==conn.data.MediaType?iface:getWiredIface()}function getXXTPInterface(connections,obj){return _.find(connections,function(o){return"DHCP"==o.type||"Static"==o.type}).link}function getIPAddress(input){return input.Prefix?input.StaticIPAddress0+"/"+input.Prefix:input.StaticIPAddress0+"/"+funcs.ipv4.mask["short"](input.StaticIPSubnetMask0)}function getIPInstances(connections,groupIfs,lans){var result=[];_.each(connections,function(conn){"PPPoE"==conn.type&&conn.data.UnnumberedIP&&result.push({Key:conn.key+"_"+conn.type+"_unnumbered_ip",LowerLayer:"Device.Network.Interface.Loopback.1.",Name:conn.type+" Unnumbered IP",IPv4Address:[{Key:conn.key+"_"+conn.type+"_unnumbered_ip_v4_0",IPAddress:conn.data.UnnumberedIP.Address+"/"+funcs.ipv4.mask["short"](conn.data.UnnumberedIP.SubnetMask)}]})});var staticip=lans&&lans[1].IPv4.StaticIP[1];return groupIfs&&staticip&&_.each(groupIfs,function(i){result.push({Key:i.create.name,LowerLayer:"Device.Network.Interface.Bridge."+i.create.name+".",Name:i.create.name,IPv4Address:[{Key:"1",IPAddress:staticip.Address+"/"+(-1!==_.indexOf(staticip.SubnetMask,".")?funcs.ipv4.mask["short"](staticip.SubnetMask):staticip.SubnetMask)}]})}),result}function getUnnumberedIPLink(conn){return"Device.Network.IP."+conn.key+"_"+conn.type+"_unnumbered_ip.IPv4Address.+connection_0_PPPoE_unnumbered_ip_v4_0."}function getGroups(connections,v6,profile,config){var list=getGroupConnections(connections,v6),result={};if(!_.isEmpty(list)){if(_.each(list,function(value){result[value.key+"_"+(v6?"ipv6":"ipv4")+"_group"]={Link:value.link}}),profile&&_.has(profile,"KeepDefaultConns")){"IPv4"!=profile.KeepDefaultConns||v6||(result.order=_.keys(result)),"IPv6"==profile.KeepDefaultConns&&v6&&(result.order=_.keys(result));var instPath="Device.Network.Group.1."+("IPv4"==profile.KeepDefaultConns?"WAN":"WANv6")+".max_instance",inst=funcs.fetchBranch(config,instPath);_.each(result.order,function(elem,key){-1!=elem.indexOf("+")&&(result.order[key]=(++inst).toString())})}return result}}function getUSBModem(data){function getID(link){var linkID=link?link.match(/\.\d+\.$/g,""):void 0;return linkID?Number(linkID[0].replace(/\./g,"")):""}if(isUSB(data)){var input=data.data;if(0==input.ActiveSIM||!input.Modem||""==input.Modem)return;var splitModem=input.Modem.split(" "),currentActiveSIM=parseInt(splitModem[1]);if(currentActiveSIM==input.ActiveSIM)return;var result={Modem:{}};return result.Modem[getID(splitModem[0])]={ActiveSIM:currentActiveSIM},result}}var _=__webpack_require__(4),funcs=__webpack_require__(5);module.exports={isPPP:isPPP,isPPPoE:isPPPoE,isUSB:isUSB,getActualType:getActualType,getActualLink:getActualLink,getInterface:getInterface,getIPv6Mode:getIPv6Mode,getXXTPInterface:getXXTPInterface,getIPAddress:getIPAddress,getGroupConnections:getGroupConnections,getGroups:getGroups,getFirewallConnections:getFirewallConnections,getIPInstances:getIPInstances,getUnnumberedIPLink:getUnnumberedIPLink,getUSBModem:getUSBModem,getGuestAPLink:getGuestAPLink,getBridgeInterfaces:getBridgeInterfaces,getATMInterfaces:getATMInterfaces,getPTMInterfaces:getPTMInterfaces}},130:function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){function getConnection(profile){return profile.Config.WAN["3G"]?profile.Config.WAN["3G"].Connection[1]:profile.Config.WAN.LTE?profile.Config.WAN.LTE.Connection[1]:void 0}function getModem(data){var splitModem=data.Modem?data.Modem.split(" "):void 0;return splitModem?splitModem[0]:""}return T({"->":["$profile","$connection","Device"],$profile:":external",$connection:["$profile",function(o){return getConnection(o)}],Device:{"->":["?","Network"],"?":["$parent",function(p){return!!p.$connection}],Network:{Connection:{USB:{"->":["$data","Binding"],":":1,$data:["$root",function(o){return o.$connection}],Enable:!0,Name:["$data",function(o){return o.Name}],APN:["$data",function(o){return o.APN}],DialNumber:["$data",function(o){return o.DialNumber}],Username:["$data",function(o){return o.Username}],Password:["$data",function(o){return o.Password}],NoAuth:["$data",function(o){return!o.Username&&!o.Password}],Binding:{"->":!0,$data:["$parent",function(p){return p.$data}],Modem:["$data",function(d){return getModem(d)}]}}}}}}).build({$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(122).T);__webpack_require__(5),__webpack_require__(129),module.exports=diff},131:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getIfaceType(media){return"DSL.PTM"==media?"PTM":media}return T({"->":["$profile","$media","__interfaces"],$profile:":external",$media:{"->":!0,"{$type}":["$root",function(r){return r.$profile.Config.WAN}],"{$conn}":["$type",function(o){return funcs.newConfig.normalize(o.Connection)}],"?":["$conn",function(o){return!_.contains(["DSL.ATM"],o.MediaType)}],Key:["$conn",function(o){return"WiFi"==o.MediaType?funcs.fetchBranch(o.Media,o.MediaType+".").Name:getIfaceType(o.MediaType)}],MACAddress:["$conn",function(o){return funcs.fetchBranch(o.Media,o.MediaType+".").MACAddress}]},__interfaces:{"->":["$iface"],"{$obj}":["$root",function(r){return r.$media}],":":["$obj*",function(o){return o.Key}],"?":["$obj*",function(o){return!!o.MACAddress}],MACAddress:["$obj*",function(o){return o.MACAddress}]}}).build({$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5);module.exports=diff},132:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getAddress(addr,mask){return addr+"/"+funcs.ipv4.mask["short"](mask)}function getMode(mode){switch(mode){case"Disable":return"None"}}function getLocalDHCP(groupIfs,dhcp){if(groupIfs&&dhcp){var list={};return _.each(groupIfs,function(i){list[i.create.name]={Enable:!0,Interface:"Device.Network.Interface.Bridge."+i.create.name+".",IPv6Mode:"Autoconf",Leasev6:300,StartIP:dhcp.Server.MinAddress,EndIP:dhcp.Server.MaxAddress}}),list}}function getLocalDNS(groupIfs,dhcp){if(groupIfs&&dhcp){var list={};return _.each(groupIfs,function(i){list[i.create.name]={Enable:!0,Interface:"Device.Network.Interface.Bridge."+i.create.name+".",DNSServers:_.filter([dhcp.Server.DNSPrim,dhcp.Server.DNSSec],function(e){return e}).join(",")}}),list}}var pattern=T({"->":["$profile","$config","$static","$dhcp","$ipv4","Device"],$profile:":external",$config:":external",$ipv4:["$profile",function(o){return o.Config.LAN[1].IPv4}],$static:["$profile",function(o){return o.Config.LAN[1].IPv4.StaticIP[1]}],$dhcp:["$profile",function(o){return o.Config.LAN[1].IPv4.DHCP}],Device:{Network:{"->":!0,Group:{"->":["?"],"?":["$root",function(r){return r.$profile.Config.DeviceMode&&"ap"==r.$profile.Config.DeviceMode.Mode&&_.has(r.$static,"AddnHostname")&&r.$static.AddnHostname}],":":1,DomainName:["$root",function(r){return r.$static.AddnHostname?r.$static.AddnHostname.toLowerCase():r.$static.AddnHostname}]},Connection:{"->":["?"],$mode:["$root",function(r){return r.$profile.Config.DeviceMode?r.$profile.Config.DeviceMode.Mode:void 0}],"?":["$mode",function(mode){return"ap"==mode}],Static:{"->":!0,":":1,Gateway:["$root",function(r){return r.$static.GatewayAddress}],IPAddress:["$root",function(r){return r.$static.Address&&r.$static.SubnetMask?getAddress(r.$static.Address,r.$static.SubnetMask):void 0}]},DHCP:{"->":!0,"?":["$root",function(r){return!!r.$config.Device.Network.Connection.DHCP[1]}],":":["$root",function(r){return r.$config.Device.Network.Connection.DHCP[1]?1:void 0}],Enable:["$root",function(r){return r.$dhcp&&"Disable"!=r.$dhcp.Mode}]}},Server:{"->":["?","DHCP"],"?":["$root",function(r){return!!r.$dhcp}],DHCP:{"->":!0,1:{"->":!0,Enable:["$root",function(r){return"Dynamic"==r.$ipv4.AddressingMode}],IPv4Mode:["$root",function(r){return getMode(r.$dhcp.Mode)}]},$extend:["$root",function(root){_.extend(this,getLocalDHCP(_.filter(root.$profile.Config.GroupingInterfaces,function(i){return!i.create.wans}),root.$dhcp))}]},DNS:{"->":["?"],"?":["$root",function(r){return!!r.$config.Device.Network.Server&&!!r.$config.Device.Network.Server.DNS&&!!r.$config.Device.Network.Server.DNS[1]}],1:["$root",function(r){return funcs.newConfig.normalize(funcs.deepClone(funcs.fetchBranch(r.$config,"Device.Network.Server.DNS.1.")))}],$extend:["$root",function(root){_.extend(this,getLocalDNS(_.filter(root.$profile.Config.GroupingInterfaces,function(i){return!i.create.wans}),root.$dhcp))}]}},DNS:{"->":["?"],$mode:["$root",function(r){return r.$profile.Config.DeviceMode?r.$profile.Config.DeviceMode.Mode:void 0}],"?":["$root","$mode",function(r,m){return"Dynamic"!=r.$ipv4.AddressingMode&&"ap"==m}],After:{"->":!0,":":1,IPAddress:["$root",function(r){return r.$static.DNS}]}}}}}),result=pattern.build({$profile:profile,$config:config});return result}var _=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5);__webpack_require__(129),module.exports=diff},133:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getRadioInstance(band){var bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==band})}function getMode(security){if(security.OpenWEP)return"OPEN";var modes={None:"OPEN","WPA-Personal":"WPAPSK","WPA2-Personal":"WPA2PSK","WPA-WPA2-Personal":"WPAPSKWPA2PSK","WPA-Enterprise":"WPA","WPA2-Enterprise":"WPA2","WPA-WPA2-Enterprise":"WPA1WPA2",WPA3:"WPA3SAE","WPA2-WPA3":"WPA2PSKWPA3SAE",WEP:"SHARED"};return modes[security.ModeEnabled]}function getEncryptionType(security){if(security.OpenWEP)return"WEP";var types={"":"NONE",NONE:"NONE",TKIP:"TKIP",AES:"AES","TKIP+AES":"TKIPAES",WEP:"WEP"};return types[security.EncryptionType]}function getOperatingStandards(points,radio){var ep=_.find(points,function(o){return o.isEP&&o.Band==radio.OperatingFrequencyBand});return ep&&(ep.Security.OpenWEP||"TKIP"==ep.Security.EncryptionType||"WEP"==ep.Security.EncryptionType||"WEP"==ep.Security.ModeEnabled)?"2.4GHz"==radio.OperatingFrequencyBand?"b/g":"a":void 0}function getInterface(points){var point=_.find(points,function(o){return o.isEP});if(point){var inst=getRadioInstance(point.Band);return"Device.WiFi.Radio."+inst+".EndPoint."+point.Key+"_point."}}return T({"->":["$config","$profile","$isAP","$points","Device","__interface"],$config:":external",$profile:":external",$isAP:["$profile",function(o){return o.Config.DeviceMode&&"ap"==o.Config.DeviceMode.Mode}],$points:{"->":!0,"{$radio}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],"{$list, $type}":["$radio",function(o){return _.pick(o,"AccessPoint","EndPoint")}],"{$data, $inst, $index}":["$list",function(o){return funcs.newConfig.normalize(o)}],"?":["$data",function(o){return!!_.size(o)}],isAP:["$type",function(s){return"AccessPoint"==s}],isEP:["$type",function(s){return"EndPoint"==s}],isRoot:["$inst",function(i){return"1"==i}],Band:["$radio",function(o){return o.OperatingFrequencyBand}],Enable:["$radio",function(o){return o.Enable}],Broadcast:["$data",function(o){return o.Broadcast}],SSID:["$data",function(o){return o.SSID}],BSSID:["$data",function(o){return o.BSSID}],Security:["$data",function(o){return o.Security}],MaxAssociatedDevices:["$data",function(o){return o.MaxAssociatedDevices}],BandwidthRestrict:["$data",function(o){return o.BandwidthRestricted}],Index:["$index",function(i){return i}],GuestAccess:["$data",function(d){return d.GuestAccess}],Key:["$data","$index","isRoot","isAP","Band",function(o,i,isRoot,isAP,band){return isRoot&&isAP?getRadioInstance(band):"+new_profile_"+(i+1)}]},Device:{WiFi:{APProfile:{"->":["$point","Security"],"{$point}":["$root",function(r){return r.$points}],":":["$point",function(o){return o.Key}],"?":["$point",function(o){return o.isAP}],SSID:["$point",function(o){return o.SSID}],MaxAssociatedDevices:["$point",function(o){return o.MaxAssociatedDevices}],BandwidthRestrict:["$point",function(o){return o.BandwidthRestrict}],GuestAccess:["$point",function(o){return o.GuestAccess}],Security:{"->":!0,$security:["$parent",function(p){return p.$point.Security}],ModeEnabled:["$security*",function(o){return getMode(o)}],KeyPassphrase:["$security*",function(o){return o.PreSharedKey?o.PreSharedKey:void 0}],EncryptionType:["$security*",function(o){return getEncryptionType(o)}]}},StationProfile:{"->":["$point","Security"],"{$point}":["$root",function(r){return r.$points}],":":["$point",function(o){return o.Key}],"?":["$point",function(o){return o.isEP}],SSID:["$point",function(o){return o.SSID}],BSSID:["$point",function(o){return o.BSSID}],Security:{"->":["$security","WEPKeySelected","WEPKey"],$security:["$parent",function(p){return p.$point.Security}],ModeEnabled:["$security*",function(o){return getMode(o)}],KeyPassphrase:["$security*",function(o){return o.PreSharedKey?o.PreSharedKey:void 0}],WEPKeySelected:["$security*",function(o){return parseInt(o.DefaultKeyID)||1}],EncryptionType:["$security*",function(o){return getEncryptionType(o)}],WEPKey:{"->":!0,"{$name, $key, $index}":["WEPKey1","WEPKey2","WEPKey3","WEPKey4"],":":["$index",function(i){return i+1}],Str:["$parent","$name",function(p,s){return p.$security[s]||""}],Type:["$parent","$name",function(p,s){return p.$security.WEPasHEX?"HEX":"ASCII"}]}}},Radio:{"->":["$radio","AccessPoint","EndPoint","OperatingStandards"],"{$radio, $key}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],":":["$radio",function(o){return getRadioInstance(o.OperatingFrequencyBand)}],Enable:["$radio",function(o){return o.Enable}],AutoChannelEnable:["$radio",function(o){return o.AutoChannelEnable}],Channel:["$radio",function(o){return parseInt(o.Channel)>0?o.Channel:void 0}],OperatingStandards:["$root","$radio",function(r,o){return getOperatingStandards(r.$points,o)}],AccessPoint:{"->":!0,"{$point}":["$root",function(r){return r.$points}],"?":["$point","$parent",function(o,p){return o.isAP&&o.Band==p.$radio.OperatingFrequencyBand}],":":["$point",function(o){return o.isRoot?"1":o.Key+"_point"}],Enable:["$point",function(o){return!!_.isUndefined(o.Broadcast)||o.Broadcast}],Profile:["$point",function(o){return"Device.WiFi.APProfile."+o.Key+"."}]},EndPoint:{"->":!0,"{$point}":["$root",function(r){return r.$points}],"?":["$point","$parent",function(o,p){return o.isEP&&o.Band==p.$radio.OperatingFrequencyBand}],":":["$point",function(o){return o.Key+"_point"}],Enable:["$point",function(o){return o.Enable}],Profile:["$point",function(o){return"Device.WiFi.StationProfile."+o.Key+".";

}]}}},Network:{"->":["?","Interface"],"?":["$root",function(r){return!!r.$isAP&&_.some(r.$points,function(o){return o.isEP})}],Interface:{Bridge:{"->":!0,":":1,Members:{"->":!0,"{$ep, $index}":["$root",function(r){return _.filter(r.$points,function(o){return o.isEP})}],":":["$index",function(o){return"+new_ep_bridge_member_"+o}],Link:["$ep",function(o){return"Device.WiFi.Radio."+getRadioInstance(o.Band)+".EndPoint."+o.Key+"_point."}]}}}}},__interface:["$root",function(r){return getInterface(r.$points)}]}).build({$config:config,$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5);module.exports=diff},134:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getRadioInstance(band){var bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==band})}function getBridgeMembers(config,profile,list){var members=funcs.fetchBranch(config,"Device.Network.Interface.Bridge.1.Members."),result={};return _.each(funcs.newConfig.normalize(members),function(obj,key){if(obj.Link){var iface=funcs.fetchBranch(config,obj.Link);iface&&"supermesh"!=iface.Type&&(result[key]={})}}),_.each(list,function(obj){obj.enable&&(result[obj.meshInst+"_bridge"]={Link:"Device.WiFi.Radio."+obj.radioInst+".SuperMeshPoint."+obj.meshInst+"."})}),result}return T({"->":["$config","$profile","$radio","Device"],$config:":external",$profile:":external",$radio:{"->":!0,"{$radio, $key, $index}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],radioInst:["$radio",function(o){return getRadioInstance(o.OperatingFrequencyBand)}],meshInst:["$index",function(o){return"+new_mesh_point_"+o}],enable:["$radio",function(o){return o.SuperMeshEnable}],passphrase:["$radio",function(o){return o.SuperMeshPassphrase}]},Device:{Network:{Interface:{Bridge:{"->":!0,":":1,Members:["$root",function(r){return getBridgeMembers(r.$config,r.$profile,r.$radio)}]}}},WiFi:{SuperMeshProfile:{"+supermesh_profile":{"->":["?","$isAP","Security"],"?":["$root",function(r){return _.some(r.$radio,function(o){return o.enable})}],$isAP:["$root",function(r){return"ap"==funcs.fetchBranch(r.$profile,"Config.DeviceMode.Mode")}],IPv6:!0,IsGateway:["$isAP",function(o){return!o}],PreferMaster:["$isAP",function(o){return!o}],SSID:["$isAP",function(o){return o?"__SM-AP":"__SM-MASTER"}],Security:{"->":!0,KeyPassphrase:["$root",function(r){return _.first(r.$radio).passphrase}]}}},Radio:{"->":["$data","SuperMeshPoint"],"{$data}":["$root",function(r){return r.$radio}],":":["$data",function(o){return o.radioInst}],$isAP:["$root",function(r){return"ap"==funcs.fetchBranch(r.$profile,"Config.DeviceMode.Mode")}],AutoChannelEnable:["$data","$isAP",function(d,ap){return(!d.enable||!ap)&&void 0}],SuperMeshPoint:{"->":["$points"],"{$point}":["$parent",function(p){return p.$data.enable?[p.$data]:[]}],":":["$point*",function(o){return o.meshInst}],Enable:!0,Profile:"Device.WiFi.SuperMeshProfile.+supermesh_profile."}}}}}).build({$config:config,$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(122).T,funcs=__webpack_require__(5);module.exports=diff},135:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){var configData=funcs.newConfig.normalize(config.Device.Users.User),profileData=profile.Config.SystemPassword,user=_.find(configData,function(obj){return obj.Username==profileData.Login});return user&&(user.Password=profileData.Password),config}var _=__webpack_require__(4),funcs=(__webpack_require__(122).T,__webpack_require__(5));module.exports=diff},136:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){var lang=profile.Config.SystemLanguage.Language;return config.Device.DeviceInfo.Language=lang,config}__webpack_require__(4),__webpack_require__(122).T,__webpack_require__(5),module.exports=diff},137:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getMode(value){return"ap"==value?"AccessPoint":"Router"}var mode=profile.Config.DeviceMode.Mode;return config.Device.DeviceInfo.DeviceMode=getMode(mode),config}__webpack_require__(4),__webpack_require__(122).T,__webpack_require__(5),module.exports=diff},138:function(module,exports,__webpack_require__){"use strict";function diff(initConfig,profile){return T({"->":["$profile","Device"],$profile:":external",Device:{"->":!0,$connections:{"->":!0,"{$list, $type}":["$root",function(r){return r.$profile.Config.WAN}],"{$conn, $inst, $n}":["$list",function(l){return l.Connection}],type:["$type","$conn",function(s,o){return helper.getActualType(s,o)}],data:["$conn",function(o){return o}],key:["$n",function(n){return"+connection_"+n}],link:["key","type",function(k,t){return helper.getActualLink(k,t)}],nativeLink:["$inst","$type",function(i,t){return"Config.WAN."+t+".Connection."+i}],ipv6:["type",function(o){return _.contains(["DHCPv6","Staticv6","PPPoEv6","PPPoEDual"],o)}],ipv4:["ipv6","type",function(o,t){return!o||"PPPoEDual"==t}]},USB:["$connections",function(c){return helper.getUSBModem(c[0])}]}}).build({$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(122).T,helper=(__webpack_require__(5),__webpack_require__(129));module.exports=diff},139:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$config","$line","Device"],$profile:":external",$config:":external",$sip:["$profile",function(o){return o.Config.VoIP.SIP}],$line:["$profile",function(o){return o.Config.VoIP.Line}],$dhcpopt15:["$profile",function(o){return o.Config.VoIP.XDLinkDHCPOption15}],Device:{Voip:{"->":!0,Enable:!0,VoiceProfile:{"->":!0,":":1,Enable:"Enabled",Line:{"->":["$line","Enable","SIP"],"{$line, $key}":["$root",function(r){return r.$line}],":":["$key",function(o){return o}],Enable:["$line",function(o){return o.SIP.X_DLINK_Registration?"Enabled":"Disabled"}],DirectoryNumber:["$line",function(o){return o.SIP.X_DLINK_LoginID}],PhyReferenceList:["$line",function(o){return o.PortInstance}],SIP:{"->":!0,AuthUserName:["$parent",function(p){return p.$line.SIP.AuthUserName}],AuthPassword:["$parent",function(p){return p.$line.SIP.AuthPassword}]}},SIP:{"->":["?","ProxyServer","XDLinkUserAgentDomainInDigestEnable","UserAgentDomain"],"?":["$root",function(r){return!!r.$sip}],ProxyServer:["$root",function(r){return r.$sip.ProxyServer}],XDLinkUserAgentDomainInDigestEnable:["$root",function(r){return r.$sip.X_DLINK_UseDomain}],XDLinkUseUserAgentDomainInsteadProxy:["$root",function(r){return r.$sip.XDLinkUseUserAgentDomainInsteadProxy}],UserAgentDomain:["$root",function(r){return r.$sip.UserAgentDomain}]}},XDLinkDHCPOption15:{"->":!0,EnableForAuthUserName:["$root",function(r){return r.$dhcpopt15.EnableForAuthUserName}],EnableForUserAgentDomain:["$root",function(r){return r.$dhcpopt15.EnableForUserAgentDomain}]}}}}).build({$profile:profile,$config:config})}var T=(__webpack_require__(4),__webpack_require__(122).T);__webpack_require__(5),module.exports=diff},140:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$upnp","Device"],$profile:":external",$upnp:["$profile",function(o){return o.Config.UPnP}],Device:{Services:{DynamicPortMapping:{"->":!0,":":1,Enable:["$root",function(r){return r.$upnp.enable}]}}}}).build({$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(122).T);__webpack_require__(5),module.exports=diff},141:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$config","$xdsl","Device"],$profile:":external",$config:":external",$xdsl:["$profile",function(o){return o.Config.xDSL}],Device:{xDSL:{"->":!0,":":1,ATM:{"->":!0,EnableADSL:["$root",function(r){return r.$xdsl.EnableADSL}]},PTM:{"->":!0,EnableVDSL:["$root",function(r){return r.$xdsl.EnableVDSL}]}}}}).build({$profile:profile,$config:config})}var T=(__webpack_require__(4),__webpack_require__(122).T);__webpack_require__(5),module.exports=diff},142:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){function getPattern(protocol){if(protocol){var protocol=protocol;return"SMB"==protocol&&(protocol="Samba"),"TELNET"==protocol&&(protocol="Telnet"),"domoticz_nav"==protocol&&(protocol="Smart"),"(RA)"+protocol}}function getOrigin(protocol){return"TELNET"==protocol?"Device.Services.Telnet.":""}return T({"->":["$profile","$config","$rules","Device"],$profile:":external",$rules:["$profile",function(o){return o.Config.RemoteAccess}],Device:{Firewall:{IPv4:{Rules:{"->":["$rule","Ports","NATPort","Origin","Pattern"],"{$rule, $key}":["$root",function(r){return _.omit(r.$rules,function(o){return o.IsIPv6})}],":":["$key",function(k){return"new_ipv4_raccess_rule_"+k}],Action:"DNAT",CTState:{1:{Value:"NEW"},2:{Value:"ESTABLISHED"},3:{Value:"RELATED"}},Dest:{IPLinks:{1:{Link:"Device.Network.Interface.Bridge.1."}},Zone:"Device.Firewall.IPv4.Zones.1."},Proto:{1:{Value:"tcp"}},Ports:{Dest:{"->":!0,":":"1",PortStart:["$parent",function(p){return parseInt(p.$parent.$rule.SrcPort)}]}},Enable:!0,NATPort:{"->":!0,PortStart:["$parent",function(p){return parseInt(p.$rule.DstPort)}]},Source:{Address:{},Iface:"",Zone:"Device.Firewall.IPv4.Zones.2."},Name:["$rule",function(o){return o.Name}],Origin:["$rule",function(o){return getOrigin(o.Protocol)}],Pattern:["$rule",function(o){return getPattern(o.Protocol)}]}},IPv6:{Rules:{"->":["$rule","Ports","NATPort","Origin","Pattern"],"{$rule, $key}":["$root",function(r){return _.pick(r.$rules,function(o){return o.IsIPv6})}],":":["$key",function(k){return"new_ipv6_raccess_rule_"+k}],Action:"ACCEPT",CTState:{1:{Value:"NEW"},2:{Value:"ESTABLISHED"},3:{Value:"RELATED"}},Dest:{Zone:"Device.Firewall.IPv6.Zones.1."},Proto:{1:{Value:"tcp"}},Ports:{Dest:{"->":!0,":":"1",PortStart:["$parent",function(p){return parseInt(p.$parent.$rule.SrcPort)}]}},Enable:!0,Source:{Address:{},Iface:"",Zone:"Device.Firewall.IPv6.Zones.2."},Name:["$rule",function(o){return o.Name}],Origin:["$rule",function(o){return getOrigin(o.Protocol)}],Pattern:["$rule",function(o){return getPattern(o.Protocol)}]}}}}}).build({$profile:profile})}var _=__webpack_require__(4),T=__webpack_require__(122).T;__webpack_require__(5),module.exports=diff},143:function(module,exports,__webpack_require__){"use strict";function diff(config,profile){return T({"->":["$profile","$time","Device"],$profile:":external",$time:["$profile",function(o){return o.Config.SystemTime}],Device:{Services:{NTP:{"->":!0,$zone:["$root",function(r){return r.$time.TimeZone}],TimeZoneHourOffset:["$zone*",function(o){return parseInt(o.split(":")[0])}],TimeZoneMinuteOffset:["$zone*",function(o){return parseInt(o.split(":")[1])}]}}}}).build({$profile:profile})}var T=(__webpack_require__(4),__webpack_require__(122).T);__webpack_require__(5),module.exports=diff},144:function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function diff(config,profile){function getRadioInstance(band){var bands=funcs.newConfig.normalize(config.Device.WiFi.Radio);return _.find(_.keys(bands),function(o){return bands[o].OperatingFrequencyBand==band})}function getBridge(config,profile){var hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,bridge=funcs.fetchBranch(config,"Device.Network.Interface.Bridge."),result=[],wifiIfaces=[];for(var i in funcs.newConfig.normalize(bridge)){var obj={key:i,members:[]};for(var j in funcs.newConfig.normalize(bridge[i].Members)){var elem=bridge[i].Members[j];-1!=elem.Link.indexOf("WiFi")&&hasHotSpot?wifiIfaces.push({key:"new_wifi_"+wifiIfaces.length,link:elem.Link}):obj.members.push({key:j,link:elem.Link})}result.push(obj)}return hasHotSpot&&result.push({key:"hot_spot_bridge",members:wifiIfaces}),result}function getGroups(config,profile){function getConnLink(settings,type,conns,usbConns,ipType){function getRealType(settings,type,ipType){switch(type){case"USB":case"3G":case"LTE":return"USB";case"IPv4oE":return settings.AddressingType;case"PPPoE":case"PPPoEDual":case"PPPoEv6":return"v4"==ipType?"PPPoE":"DHCPv6";case"PPTP":return settings.ActualType;case"IPv6oE":return settings.AddressingType+"v6"}}var realType=getRealType(settings,type,ipType);if("USB"==realType){var inst=usbConns.max_instance+1;return"Device.USB.Connection."+inst+"."}var inst=conns[realType].max_instance+1;return"Device.Network.Connection."+realType+"."+inst+"."}var groups=funcs.fetchBranch(config,"Device.Network.Group."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in funcs.newConfig.normalize(groups)){var group=groups[i],obj={key:i,LAN:group.LAN,Name:group.Name,WAN:[]};for(var j in funcs.newConfig.normalize(group.WAN))obj.WAN.push({key:j,link:group.WAN[j].Link});if(group.WANv6){obj.WANv6=[];for(j in funcs.newConfig.normalize(group.WANv6))obj.WANv6.push({key:j,link:group.WANv6[j].Link})}result.push(obj)}if(hasHotSpot){var conns=funcs.fetchBranch(config,"Device.Network.Connection."),usbConns=funcs.fetchBranch(config,"Device.USB.Connection."),obj={key:"new_group",LAN:"Device.Network.Interface.Bridge.hot_spot_bridge.",Name:"HotSpot#local",WAN:[]};groups[1].WANv6&&(obj.WANv6=[]);for(var i in profile.Config.WAN)if(/IPv4oE|PPPoE|PPTP|USB|3G|LTE/.test(i))for(j in profile.Config.WAN[i].Connection)obj.WAN.push({key:"new_key_"+obj.WAN.length,link:getConnLink(profile.Config.WAN[i].Connection[j],i,conns,usbConns,"v4")}),"PPPoEDual"!=i&&"PPPoEv6"!=i||obj.WANv6.push({key:"new_key_"+obj.WANv6.length,link:getConnLink(profile.Config.WAN[i].Connection[j],i,conns,usbConns,"v6")});else for(j in profile.Config.WAN[i].Connection)obj.WANv6.push({key:"new_key_"+obj.WANv6.length,link:getConnLink(profile.Config.WAN[i].Connection[j],i,conns,usbConns,"v6")});result.push(obj)}return result}function getFW(config,profile){var fw=funcs.fetchBranch(config,"Device.Firewall."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in fw){var elem=fw[i];if("IPv4"==i||"IPv6"==i){var obj={type:i,zones:[]};for(var j in funcs.newConfig.normalize(elem.Zones)){var ifaces=[];for(var k in funcs.newConfig.normalize(elem.Zones[j].Interfaces))ifaces.push({key:k,link:elem.Zones[j].Interfaces[k].Path}),"lan"==elem.Zones[j].Name&&hasHotSpot&&ifaces.push({key:"new_key",link:"Device.Network.Interface.Bridge.hot_spot_bridge."});obj.zones.push({key:j,ifaces:ifaces})}result.push(obj)}}return result}function getDNS(config,profile){var dns=funcs.fetchBranch(config,"Device.Network.Server.DNS."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in funcs.newConfig.normalize(dns)){var elem=dns[i];result.push({key:i,iface:elem.Interface})}return hasHotSpot&&result.push({key:"new_dns",iface:"Device.Network.Interface.Bridge.hot_spot_bridge."}),result}function getDHCP(config,profile){var dhcps=funcs.fetchBranch(config,"Device.Network.Server.DHCP."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in funcs.newConfig.normalize(dhcps)){var elem=dhcps[i];result.push({key:i,iface:elem.Interface,startIP:elem.StartIP,endIP:elem.EndIP,startIPv6:elem.StartIPv6,endIPv6:elem.EndIPv6})}if(hasHotSpot){var ip=getNewIPNet(config),obj={key:"new_dhcp",iface:"Device.Network.Interface.Bridge.hot_spot_bridge.",startIPv6:__autoconf.BR2_PACKAGE_ANWEB_IPV6?"::2":void 0,endIPv6:__autoconf.BR2_PACKAGE_ANWEB_IPV6?"::64":void 0,startIP:ip.replace(/\.0$/,".100"),endIP:ip.replace(/\.0$/,".199")};result.push(obj)}return result}function getNewIPNet(config){function getBridgeNets(ips){var result=[];for(var i in ips)if(/Bridge/.test(ips[i].LowerLayer))for(var j in funcs.newConfig.normalize(ips[i].IPv4Address)){var elem=ips[i].IPv4Address[j],splitAddrs=elem.IPAddress.split("/");result.push(funcs.ipv4.subnet.getNetworkAddress(splitAddrs[0],funcs.ipv4.mask["long"](splitAddrs[1])))}return result}for(var ips=funcs.fetchBranch(config,"Device.Network.IP."),bridgeNets=getBridgeNets(ips),k=0,net="",is_find_net=!1;!is_find_net;)net="192.168."+k++ +".0",_.contains(bridgeNets,net)||(is_find_net=!0);return net}function getIPAddress(config,profile){var ips=funcs.fetchBranch(config,"Device.Network.IP."),hasHotSpot=profile.Config.HotSpot&&profile.Config.HotSpot.Enable,result=[];for(var i in funcs.newConfig.normalize(ips)){var obj={key:i,enbale:ips[i].Enable,link:ips[i].LowerLayer,Addrsv4:[],Addrsv6:[]};for(var j in funcs.newConfig.normalize(ips[i].IPv4Address)){var elem=ips[i].IPv4Address[j],addr_obj={key:j,enable:elem.Enable,addr:elem.IPAddress,origin:elem.Origin};obj.Addrsv4.push(addr_obj)}if(__autoconf.BR2_PACKAGE_ANWEB_IPV6)for(var j in funcs.newConfig.normalize(ips[i].IPv6Address)){var elem=ips[i].IPv6Address[j],addr_obj={key:j,enable:elem.Enable,addr:elem.IPAddress,origin:elem.Origin};obj.Addrsv6.push(addr_obj)}result.push(obj)}if(hasHotSpot){var ipNet=getNewIPNet(config),obj={key:"new_ip",enable:!0,link:"Device.Network.Interface.Bridge.hot_spot_bridge.",Addrsv4:[{key:"new_inst",enable:!0,origin:"",addr:ipNet.replace(/\.0$/,".1")+"/24"}]};__autoconf.BR2_PACKAGE_ANWEB_IPV6&&(obj.Addrsv6=[]),result.push(obj)}return result}return T({"->":["$config","$profile","$points","Device"],$config:":external",$profile:":external",$points:{"->":!0,"{$radio}":["$root",function(r){return funcs.newConfig.normalize(r.$profile.Config.WiFi.Radio)}],"{$list}":["$radio",function(o){return funcs.newConfig.normalize(o.AccessPoint)}],"{$data, $inst, $index}":["$list",function(l){return funcs.newConfig.normalize(l)}],"?":["$data",function(o){return _keys2["default"](o).length>0}],Band:["$radio",function(o){return o.OperatingFrequencyBand}],Index:["$index",function(i){return i}],Key:["Band",function(b){return getRadioInstance(b)}]},Device:{"->":!0,Firewall:{"->":["$fw","Zones"],"{$fw}":["$root",function(r){return getFW(r.$config,r.$profile)}],":":["$fw",function(fw){return fw.type}],Zones:{"->":["$zones","Interfaces"],"{$zones}":["$parent",function(p){return p.$fw.zones}],":":["$zones*",function(z){return z.key}],Interfaces:{"->":!0,"{$ifaces}":["$parent",function(p){return p.$zones.ifaces}],":":["$ifaces*",function(i){return i.key}],Path:["$ifaces*",function(i){return i.link}]}}},Network:{"->":!0,Interface:{Bridge:{"->":["$bridge","Members"],"{$bridge}":["$root",function(r){return getBridge(r.$config,r.$profile)}],":":["$bridge",function(br){return br.key}],Enable:!0,Members:{"->":!0,"{$members}":["$parent",function(p){return p.$bridge.members}],":":["$members*",function(m){return m.key}],Link:["$members*",function(m){return m.link}]}}},Group:{"->":["$group","WAN","WANv6"],"{$group}":["$root",function(r){return getGroups(r.$config,r.$profile)}],":":["$group",function(g){return g.key}],WAN:{"->":!0,"{$wans}":["$parent",function(p){return p.$group.WAN}],":":["$wans*",function(w){return w.key}],Link:["$wans*",function(w){return w.link}]},WANv6:{"->":!0,"{$wans}":["$parent",function(p){return p.$group.WANv6}],":":["$wans*",function(w){return w.key}],Link:["$wans*",function(w){return w.link}]},LAN:["$group",function(g){return g.LAN}],Name:["$group",function(g){return g.Name}]},Server:{"->":!0,Chilli:{"->":["$hotSpot","RADIUS","UAM"],$hotSpot:["$root",function(r){return r.$profile.Config.HotSpot}],"?":["$hotSpot",function(h){return!!h&&h.Enable}],":":"new_chilli",Enable:["$hotSpot",function(h){return h.Enable}],NetworkPrefix:["$hotSpot",function(h){return h.IPAddr}],Interface:"Device.Network.Interface.Bridge.hot_spot_bridge.",RADIUS:{"->":!0,$hotSpot:["$parent",function(p){return p.$hotSpot}],PrimaryServer:["$hotSpot",function(h){return h.PrimaryServer}],SecondaryServer:["$hotSpot",function(h){return h.SecondaryServer}],Secret:["$hotSpot",function(h){return h.Secret}]},UAM:{"->":!0,$hotSpot:["$parent",function(p){return p.$hotSpot}],Server:["$hotSpot",function(h){return h.UAMServer}],WalledGarden:["$hotSpot",function(h){return h.WalledGarden}]}},DNS:{"->":!0,"?":["$dns",function(o){return!!o}],"{$dns}":["$root",function(r){return getDNS(r.$config,r.$profile)}],":":["$dns*",function(d){return d.key}],Enable:!0,Interface:["$dns*",function(d){return d.iface}]},DHCP:{"->":!0,"{$dhcp}":["$root",function(r){return getDHCP(r.$config,r.$profile)}],":":["$dhcp",function(d){return d.key}],Interface:["$dhcp",function(d){return d.iface}],Enable:!0,StartIP:["$dhcp",function(d){return d.startIP}],StartIPv6:["$dhcp",function(d){return d.startIPv6}],EndIP:["$dhcp",function(d){return d.endIP}],EndIPv6:["$dhcp",function(d){return d.endIPv6}]}},IP:{"->":["$ip","IPv4Address","IPv6Address"],"{$ip}":["$root",function(r){return getIPAddress(r.$config,r.$profile)}],":":["$ip",function(ip){return ip.key}],Enable:["$ip",function(ip){return ip.enable}],LowerLayer:["$ip",function(ip){return ip.link}],IPv4Address:{"->":!0,"{$addrs}":["$parent",function(p){return p.$ip.Addrsv4}],":":["$addrs*",function(a){return a.key}],Enable:["$addrs*",function(a){return a.enable}],IPAddress:["$addrs*",function(a){return a.addr}],Origin:["$addrs*",function(a){return a.origin}]},IPv6Address:{"->":!0,"?":["$parent",function(p){return!!p.$ip.Addrsv6}],"{$addrs}":["$parent",function(p){return p.$ip.Addrsv6}],":":["$addrs*",function(a){return a.key}],Enable:["$addrs*",function(a){return a.enable}],IPAddress:["$addrs*",function(a){return a.addr}],Origin:["$addrs*",function(a){return a.origin}]}}},WiFi:{"->":!0,$hotSpot:["$root",function(r){return r.$profile.Config.HotSpot}],"?":["$hotSpot",function(hs){return!!hs&&hs.Enable}],APProfile:{"->":!0,$hotSpot:["$root",function(r){return r.$profile.Config.HotSpot}],"{$points}":["$root",function(r){return r.$points}],":":["$points",function(p){return p.Key}],SSID:["$points","$hotSpot",function(p,h){return-1!=p.Band.indexOf("2.4")?h.SSID24:h.SSID5}]}}}}).build({$config:config,$profile:profile})}var _keys=__webpack_require__(78),_keys2=_interopRequireDefault(_keys),_require=__webpack_require__(129),T=(_require.getGroups,_require.getFirewallConnections,_require.getIPAddress,__webpack_require__(122).T),funcs=__webpack_require__(5),_=__webpack_require__(4),__autoconf="undefined"!=typeof autoconf?autoconf:{};module.exports=diff},145:function(module,exports){module.exports=function(){}}});