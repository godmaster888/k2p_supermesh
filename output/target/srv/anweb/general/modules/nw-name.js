"use strict";!function(){var nw=angular.module(regdep("nw-name"),[]);nw.directive("nwName",function(){return{restrict:"A",require:"ngModel",link:function($scope,$element,$attrs,$model){function validator(value){var isValid,maxLength,exclude,alphanum,symbols,regex,wrong,alphaSymbols,patt;if($attrs.ngMaxlength||$attrs.disabled||_.isUndefined(value)||!value.toString().length)$model.$setValidity("msg_invalid_name",!0),$model.$setValidity("msg_invalid_name_length",!0);else{if(isValid=!0,maxLength=$attrs.nwName||33,exclude=$attrs.nwNameExclude||"",alphanum=$attrs.nwNameAlphanum||"",symbols=_.isEmpty(exclude)?null:exclude.split(""),$attrs.hasOwnProperty("nwNameAscii")){var regex=new RegExp("^[\x00-]+$");isValid=regex.test(value)}!_.isNull(symbols)&&isValid&&(wrong=_.find(symbols,function(elem){return value.includes(elem)}),wrong&&(isValid=!1)),!_.isEmpty(alphanum)&&isValid&&(alphaSymbols="",_.each(alphanum,function(sym){return alphaSymbols+="\\"+sym}),patt="^[a-zA-Z0-9"+alphaSymbols+"]+$",regex=new RegExp(patt),isValid=regex.test(value)),$model.$setValidity("msg_invalid_name",isValid),$model.$setValidity("msg_invalid_name_length",value.length<maxLength)}return value}$model.$parsers.unshift(validator),$model.$formatters.unshift(validator)}}})}();