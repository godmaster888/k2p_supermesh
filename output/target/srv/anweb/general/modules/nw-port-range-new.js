"use strict";!function(){var nw=angular.module(regdep("nw-port-range-new"),[]);nw.directive("nwPortRangeNew",[function(){var rangeTypes=[{value:"range",name:"vservers_port_range"},{value:"list",name:"vservers_port_list"}];return{restrict:"A",replace:!0,scope:{nwPortRangeNew:"=",nwPortEndDisabled:"=",nwPortEndLabel:"@",nwPortEndModel:"=",nwPortListDisabled:"=",nwPortListLabel:"@",nwPortListRequired:"=",nwPortListModel:"=",nwPortRuleTemplate:"=",nwPortStartDisabled:"=",nwPortStartLabel:"@",nwPortStartRequired:"=",nwPortStartModel:"=",nwPortUsePorts:"=",nwPortListCompare:"=",nwDisabled:"=",nwPortRuleType:"=",nwPortRuleTypeValidation:"&",nwPortListType:"@",nwPortListMinValue:"=",nwPortListMaxValue:"="},controller:function($scope){$scope.portRange={},$scope.$watch("nwPortRuleTemplate",function(type){"sftp"==type||"pcanywhere"==type?($scope.portRange.rangeTypes=_.filter(rangeTypes,function(e){return"list"==e.value}),$scope.nwPortRangeNew.PortType="list"):$scope.portRange.rangeTypes=rangeTypes})},plain:!0,template:'<div>   <div ng-if="nwPortRangeNew.PortType == \'range\'">       <div nw-field           nw-label="{{nwPortStartLabel}}"           nw-disabled="nwPortStartDisabled"           nw-required="nwPortStartRequired"       >           <input type="text"                   ng-model="nwPortRangeNew.Start"                   nw-port-range-new-validation="startPort"                   nw-port-range-new-validation-start-port="nwPortRangeNew.Start"                   nw-port-range-new-validation-end-port="nwPortRangeNew.End"                   nw-port-range-new-validation-use-ports="nwPortUsePorts"           />       </div>       <div nw-field           nw-label="{{nwPortEndLabel}}"           nw-disabled="nwPortEndDisabled"           nw-required="nwPortEndRequired"       >           <input type="text"                   ng-model="nwPortRangeNew.End"                   nw-port-range-new-validation="endPort"                   nw-port-range-new-validation-start-port="nwPortRangeNew.Start"                   nw-port-range-new-validation-end-port="nwPortRangeNew.End"                   nw-port-range-new-validation-use-ports="nwPortUsePorts"           />       </div>   </div>   <div ng-if="nwPortRangeNew.PortType == \'list\'">       <div nw-field           nw-label="{{nwPortListLabel}}"           nw-disabled="nwPortListDisabled"           nw-required="nwPortListRequired"       >           <input type="text"                   ng-model="nwPortRangeNew.Start"                   nw-port-range-new-validation="listPort"                   nw-port-range-new-validation-list-port="nwPortRangeNew.Start"                   nw-port-range-new-validation-use-ports="nwPortUsePorts"                   nw-port-range-new-validation-compare-port="nwPortListCompare"                   nw-port-range-new-validation-type="nwPortListType"                   nw-port-range-new-validation-min-value="nwPortListMinValue"                   nw-port-range-new-validation-max-value="nwPortListMaxValue"           />       </div>       <div class="note" ng-bind="\'ipflt_port_note\' | translate" ng-if="nwPortListType == \'Port\'"></div>       <div class="note" ng-bind="\'qos_hw_dscp_note\' | translate" ng-if="nwPortListType == \'DSCP\'"></div>       <div class="note" ng-bind="\'qos_hw_vlan_priroty_note\' | translate" ng-if="nwPortListType == \'VlanPriority\'"></div>   </div></div>',link:function($scope,$element,$attrs){$scope.typesValidation=function(){return $attrs.nwPortRuleTypeValidation&&_.isFunction($scope.nwPortRuleTypeValidation)?$scope.nwPortRuleTypeValidation():null}}}}]),nw.directive("nwPortRangeNewValidation",["nwPortRangeNewCheckValidation",function(validation){return{restrict:"A",require:"ngModel",scope:{param:"@nwPortRangeNewValidation",startPort:"=nwPortRangeNewValidationStartPort",endPort:"=nwPortRangeNewValidationEndPort",usePorts:"=nwPortRangeNewValidationUsePorts",listPort:"=nwPortRangeNewValidationListPort",comparePort:"=nwPortRangeNewValidationComparePort",type:"=nwPortRangeNewValidationType",minValue:"=nwPortRangeNewValidationMinValue",maxValue:"=nwPortRangeNewValidationMaxValue"},link:function($scope,$element,$attrs,$ctrl){function change(value){return checkValidation(value),value}function checkValidation(value){var param=$scope.param,data={startPort:"startPort"==param?value:$scope.startPort,endPort:"endPort"==param?value:$scope.endPort,listPort:"listPort"==param?value:$scope.listPort,comparePort:"listPort"==param?$scope.comparePort:void 0,usePorts:$scope.usePorts||[],type:$scope.type,minValue:$scope.minValue,maxValue:$scope.maxValue},error=validation(data,param)[param][0];(error||currentError)&&error!=currentError&&($ctrl.$setValidity(currentError,!0),currentError=error),error&&$ctrl.$setValidity(error,!1)}var currentError="";"startPort"==$scope.param&&$scope.$watch("endPort",function(){checkValidation($ctrl.$viewValue)}),"endPort"==$scope.param&&$scope.$watch("startPort",function(){checkValidation($ctrl.$viewValue)}),"listPort"==$scope.param&&$scope.$watch("listPort",function(){checkValidation($ctrl.$viewValue)}),"listPort"==$scope.param&&$scope.$watch("comparePort",function(){checkValidation($ctrl.$viewValue)}),$scope.$watch("usePorts",function(){checkValidation($ctrl.$viewValue)},!0),$ctrl.$parsers.unshift(change),$ctrl.$formatters.unshift(change)}}}]),nw.service("nwPortRangeNewCheckValidation",["funcs",function(funcs){var is=funcs.is;return function(data){function isInvalidPort(port,minValue,maxValue){return port&&!is.port(port,minValue,maxValue)}function getPortRanges(port){return port=port.replace(/\s+/g,""),port.split(",")}function isInvalidListPort(port,data){if(!port)return!1;var portRanges=getPortRanges(port);return _.some(portRanges,function(elem){var startPort=elem.split(":")[0],endPort=elem.split(":")[1];return startPort||endPort?isInvalidPort(startPort,data.minValue,data.maxValue)?!0:isInvalidPort(endPort,data.minValue,data.maxValue)?!0:!1:!0})}function isInvalidListPortRange(port){if(!port)return!1;var portRanges=getPortRanges(port);return _.some(portRanges,function(elem){var startPort=elem.split(":")[0],endPort=elem.split(":")[1];return _.isUndefined(startPort)||_.isUndefined(endPort)||""!=startPort&&""!=endPort?startPort&&endPort&&parseInt(startPort)>=parseInt(endPort)?!0:!1:!0})}function isOverlapPortRanges(port,usePorts){function belongRange(range,port){var rangeStartPort=range.split(":")[0],rangeEndPort=range.split(":")[1];return port&&(rangeStartPort||rangeEndPort)&&(rangeStartPort||port==rangeEndPort)&&(rangeEndPort||port==rangeStartPort)?port>=rangeStartPort&&rangeEndPort>=port:!1}if(!port)return!1;var portRanges=getPortRanges(port);return _.some(portRanges,function(range){var startPort=range.split(":")[0],endPort=range.split(":")[1];return _.some(_.without(portRanges,range),function(elem){return belongRange(elem,startPort)?!0:belongRange(elem,endPort)?!0:isOverlapRange(startPort,endPort,usePorts)?!0:!1})})}function comparePorts(startPort,endPort){return startPort&&endPort?parseInt(startPort)>parseInt(endPort)?1:parseInt(startPort)==parseInt(endPort)?0:-1:-1}function isUsePorts(port,usePorts){return port?_.some(usePorts,function(elem){var startPort=_.isEmpty(elem.startPort)?null:parseInt(elem.startPort),endPort=_.isEmpty(elem.endPort)?null:parseInt(elem.endPort),curPort=parseInt(port);return elem.startPort&&elem.endPort?curPort>=startPort&&endPort>=curPort:elem.startPort?startPort==curPort:elem.endPort?endPort==curPort:!1}):!1}function isUseListPorts(port,usePorts){if(!port)return!1;var portRanges=getPortRanges(port);return _.some(portRanges,function(range){var result,startPort=range.split(":")[0],endPort=range.split(":")[1];if(startPort&&endPort){result=!1;for(var i=startPort;endPort>=i;++i)result=result||isUsePorts(i,usePorts);return result}return isUsePorts(startPort,usePorts)||isUsePorts(endPort,usePorts)})}function isOverlapRange(startPort,endPort,usePorts){return startPort&&endPort?_.some(usePorts,function(elem){var elemStartPort=elem.startPort?parseInt(elem.startPort):null,elemEndPort=elem.endPort?parseInt(elem.endPort):null,curStartPort=parseInt(startPort),curEndPort=parseInt(endPort);return elemStartPort&&elemStartPort>curStartPort&&curEndPort>elemStartPort||elemEndPort&&elemEndPort>curStartPort&&curEndPort>elemEndPort}):!1}function isWrongFormat(port,comparePort){if(""==port||""==comparePort)return!1;var arrPort=getPortRanges(port),arrComparePort=getPortRanges(comparePort);return arrPort.length!=arrComparePort.length?!0:_.some(arrPort,function(elem,index){return arrPort[index].split(":").length!=arrComparePort[index].split(":").length})}function isWrongNumber(port,comparePort){function getPortRangeNumber(range){if(!range)return void 0;var startPort=range.split(":")[0],endPort=range.split(":")[1];return startPort&&endPort?parseInt(endPort)-parseInt(startPort):1}if(""==port||""==comparePort)return!1;var arrPort=getPortRanges(port),arrComparePort=getPortRanges(comparePort);return _.some(arrPort,function(elem,index){var portNumber=getPortRangeNumber(elem),comparePortNumber=getPortRangeNumber(arrComparePort[index]);return portNumber!=comparePortNumber})}var msg,compare,errors={startPort:[],endPort:[],listPort:[]};if(isInvalidPort(data.startPort)&&errors.startPort.push("msg_invalid_port_value"),isInvalidPort(data.endPort)&&errors.endPort.push("msg_invalid_port_value"),isInvalidListPort(data.listPort,data)){var msg="Port"==data.type?"msg_invalid_port_value":"qos_incorrect_value";errors.listPort.push(msg)}if(function(ports){if(!ports)return!1;var portRanges=getPortRanges(ports),allPorts=[];return _.each(portRanges,function(elem){var curPorts;-1!=elem.indexOf(":")?(curPorts=elem.split(":"),allPorts=allPorts.concat(curPorts)):allPorts.push(elem)}),_.some(allPorts,function(elem){var elemPorts=_.filter(allPorts,function(e){return e==elem});return elemPorts.length>1})}(data.listPort)&&errors.listPort.push("msg_error_value_is_not_uniq"),!data.comparePort||isInvalidListPort(data.listPort,data)||isInvalidListPort(data.comparePort,data)||(isWrongFormat(data.listPort,data.comparePort)&&errors.listPort.push("ipflt_wrong_port_format"),isWrongNumber(data.listPort,data.comparePort)&&errors.listPort.push("ipflt_wrong_port_number")),errors.listPort.length||isInvalidListPortRange(data.listPort)&&(msg="Port"==data.type?"shorewall_error_ports_range_invalid_format":"qos_hw_incorrect_range_value",errors.listPort.push(msg)),!errors.startPort.length&&!errors.endPort.length&&!errors.listPort.length){switch(compare=comparePorts(data.startPort,data.endPort)){case 1:errors.startPort.push("msg_error_start_port_more_end_port"),errors.endPort.push("msg_error_start_port_less_end_port");break;case 0:errors.startPort.push("msg_error_start_port_equal_end_port"),errors.endPort.push("msg_error_start_port_equal_end_port")}isUsePorts(data.startPort,data.usePorts)&&errors.startPort.push("msg_error_port_is_busy"),isUsePorts(data.endPort,data.usePorts)&&errors.endPort.push("msg_error_port_is_busy"),isUseListPorts(data.listPort,data.usePorts)&&errors.listPort.push("msg_error_port_is_busy")}return errors.startPort.length||errors.endPort.length||errors.listPort.length||(isOverlapRange(data.startPort,data.endPort,data.usePorts)&&(errors.startPort.push("msg_error_port_range_is_overlap"),errors.endPort.push("msg_error_port_range_is_overlap")),isOverlapPortRanges(data.listPort,data.usePorts)&&errors.listPort.push("msg_error_port_range_is_overlap")),errors}}])}();