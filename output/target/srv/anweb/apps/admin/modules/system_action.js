"use strict";!function(){angular.module(regdep("system-action"),[]).service("systemActionService",["$rootScope","$http","$q","$timeout","$window","cpe","devinfo","translate","snackbars","ngDialog","unloadHandler","systemActionConstants",function($rs,$http,$q,$timeout,$window,cpe,devinfo,translate,snackbars,ngDialog,unloadHandler,constants){function fwRemoteUpgradeBegin(){function check(){devinfo.skipAuth.once("notice").then(function(result){_.isUndefined(result.fwupdateStatus)||0==result.fwupdateStatus?fwUpgradeEndOk(result):recheck(5e3)},recheck)}function recheck(time){fwupdateTimer.recheck=$timeout(check,time)}devinfo.suspendAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=0,progress.start(fwupdateTimeout,"wizard_update_in_progress"),fwupdateTimer.end=$timeout(fwUpgradeEnd,fwupdateTimeout-fwupdateTimeStartCheck),recheck(fwupdateTimeStartCheck)}function fwUpgradeEnd(){devinfo.resumeAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=3,fwupdateTimer.end&&$timeout.cancel(fwupdateTimer.end),fwupdateTimer.recheck&&$timeout.cancel(fwupdateTimer.recheck),progress.stop()}function fwUpgradeEndOk(result){_.isString(result)?(unloadHandler.before.clean(),location.href=$location.protocol()+"://"+$location.host()+":"+$location.port()):$window.location.reload(!0)}var progress=$rs.overlay.progress,circular=$rs.overlay.circular,fwupdateTimeStartCheck=6e4,fwupdateTimeout=3e5,fwupdateTimer={recheck:null,end:null};return{reboot:function(title){function checkReboot(){function __check(deferred){devinfo.skipAuth.once("notice").then(function(result){result&&0==result.rebootStatus?checkCount>=constants.CHECK_COUNT?__end(!0,deferred):__recheck(deferred,!1):__recheck(deferred,!0)},function(){return __recheck(deferred,!0)})}function __recheck(deferred,fail){fail?checkCount=0:checkCount++,timerRecheck=$timeout(function(){return __check(deferred)},2e3)}function __end(success,deferred){devinfo.resumeAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=3,timerEnd&&$timeout.cancel(timerEnd),timerRecheck&&$timeout.cancel(timerRecheck),progress.stop(),success?deferred.resolve():deferred.reject()}var deferred=$q.defer(),timerRecheck=null,timerEnd=$timeout(__end.bind(null,!1,deferred),rebootTimeout-requestTimeout),checkCount=0;return __check(deferred),deferred.promise}var requestTimeout=5e3,rebootTimeout=12e4;return function(){var deferred=$q.defer();return devinfo.suspendAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=0,title?progress.start(rebootTimeout,title):progress.start(rebootTimeout),deferred.resolve(),deferred.promise}().then(function(){var deferred=$q.defer();return $http.post("/system_reboot",{},{timeout:requestTimeout})["finally"](deferred.resolve),deferred.promise},checkReboot).then(checkReboot)},remoteUpdate:function(url,md5){function download(url,md5,transactionID){return cpe.Download("Firmware",url,md5,transactionID).then(function(res){var path;return res.result&&res.result.TransactionID?(path=url,res.result.SavedFirmware&&(path="file://"+res.result.SavedFirmware),download(path,md5,res.result.TransactionID)):Promise.resolve()})}var overlayId=circular.start();return download(url,md5).then(function(){return circular.stop(overlayId),fwRemoteUpgradeBegin(),Promise.resolve()},function(){circular.stop(overlayId),alert(translate("firmware_file_invalid"))})},changeDefaultParams:function(params){return ngDialog.open({template:"dialogs/change_pass/dialog.tpl.html",className:"change_pass_dialog",closeByDocument:!1,closeByEscape:!1,controller:ChangePassDialogCtrl,showClose:!1,data:params}).closePromise}}}])}();