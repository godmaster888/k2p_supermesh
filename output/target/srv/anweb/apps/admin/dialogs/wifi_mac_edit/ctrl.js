"use strict";function WifiMacEditDialogCtrl($scope,snackbars,translate){function isClientEdit(mac){return mac.toUpperCase()==client.mac.toUpperCase()}function isMacChanged(mac){return oldMac.toUpperCase()==client.mac.toUpperCase()&&mac.toUpperCase()!=oldMac.toUpperCase()}function saveChange(){var save=wifiMacFilter.set.bind(null,inx);wifiMacFilter.cut(inx),save(rule),$scope.update($scope.closeThisDialog.bind(null,"saved"))}function saveChangeConfirm(){var save;confirm(translate("wifi_mac_warning_access_loss"))&&(isNew?(save=wifiMacFilter.add,save(rule),$scope.update($scope.closeThisDialog.bind(null,"saved"))):saveChange())}var ngDialogData=angular.copy($scope.ngDialogData),inx=ngDialogData.inx,isNew=$scope.isNew=ngDialogData.isNew,rule=$scope.rule=ngDialogData.rule,rules=angular.copy($scope.rules),wifiMacFilter=$scope.device.wifiMacFilter,oldMac=rule.MAC,client=ngDialogData.client,backupRule=angular.copy(rule);$scope.rule.MAC=$scope.rule.MAC.toUpperCase(),$scope.header="wifi_mac_"+(isNew?"add":"edit"),rule&&($scope.useSchedule=rule.useSchedule?rule.useSchedule:!1),$scope.save=function(){var network,save=isNew?wifiMacFilter.add:wifiMacFilter.set.bind(null,inx);if($scope.wifi_mac_form.$valid)if(isNew)client&&!_.isUndefined(client.mac)?(network=angular.copy($scope.networks[rule.Band].List[rule.Network]),isClientEdit(rule.MAC)&&rule.Enable&&network&&network.Enable&&"deny"==network.AccessPolicy?saveChangeConfirm():(save(rule),$scope.update($scope.closeThisDialog.bind(null,"saved")))):(save(rule),$scope.update($scope.closeThisDialog.bind(null,"saved")));else if(client&&!_.isUndefined(client.mac)){var network=angular.copy($scope.networks[rule.Band].List[rule.Network]);isClientEdit(rule.MAC)&&rule.Enable&&network&&network.Enable&&"deny"==network.AccessPolicy?saveChangeConfirm():isClientEdit(rule.MAC)&&!rule.Enable&&network&&network.Enable&&"allow"==network.AccessPolicy?saveChangeConfirm():isMacChanged(rule.MAC)&&rule.Enable&&network&&network.Enable&&"allow"==network.AccessPolicy?saveChangeConfirm():saveChange()}else saveChange()},$scope.uniqueMacValidator=function(mac){var curNetworkRules=funo.filter(rules,function(checkingRule){return!0&&rule.Network===checkingRule.Network&&rule.Band===checkingRule.Band}),otherRules=funo.filter(curNetworkRules,function(_,checkingInx){return inx!==checkingInx}),usedMacs=_.map(otherRules,_.property("MAC"));_.each(usedMacs,function(elem,inx){usedMacs[inx]=elem.toUpperCase()});var isMacUsed=~usedMacs.indexOf(mac.toUpperCase());return isMacUsed?"wifi_mac_used":null},$scope.uniqueHostValidator=function(host){if(!host)return null;var curNetworkRules=_.filter(rules,function(checkingRule){return!0&&rule.Network===checkingRule.Network&&rule.Band===checkingRule.Band}),otherRules=_.filter(curNetworkRules,function(_){return _.Inx!=rule.Inx}),usedHosts=_.map(otherRules,_.property("Hostname"));_.each(usedHosts,function(elem,inx){usedHosts[inx]=elem.toUpperCase()});var isHostUsed=~usedHosts.indexOf(host.toUpperCase());return isHostUsed?"msg_error_value_is_not_uniq":null},$scope.changeBand=function(){$scope.networks[rule.Band].List[rule.Network]||(rule.Network=_.keys($scope.networks[rule.Band].List)[0]),rule.BandInx=$scope.networks[rule.Band].BandInx},$scope.wasModified=function(){return isNew?!1:(backupRule.MAC=backupRule.MAC.toUpperCase(),_.isEqual(backupRule,$scope.rule))}}