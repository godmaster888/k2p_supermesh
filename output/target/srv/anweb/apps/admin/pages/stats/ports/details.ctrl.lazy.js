"use strict";!function(){"use stict";angular.module("app").controllerProvider.register("portDetailsStatsCtrl",["$scope","statsPortsUtil","$stateParams","translate",function($scope,util,$stateParams,translate){function mapFields(currentPort){var arrCurrentPort=_.keys(currentPort),currentBasicCounterFields=_.filter(basicCounterFields,function(e){return _.contains(arrCurrentPort,e.name)}),currentFlowControlFields=_.filter(flowControlFields,function(e){return _.contains(arrCurrentPort,e.name)}),currentAdditionalCounterFields=_.filter(additionalCounterFields,function(e){return _.contains(arrCurrentPort,e.name)});_.filter(utilizationCounterFields,function(e){return _.contains(arrCurrentPort,e.name)});var mapField=function(field){return _.extend({},field,{value:currentPort[field.name],label:_.isFunction(field.label)?_.result(field,"label"):field.params?translate("stats_ports_"+field.lang,field.params):translate("stats_ports_"+field.lang),note:_.isEmpty(field.note)?null:translate(field.note),isTime:field.time})};$scope.fieldGroups=[{label:translate("stats_ports_basic_counters"),fields:_.map(currentBasicCounterFields,mapField)},{label:translate("stats_ports_flow_control"),fields:_.map(currentFlowControlFields,mapField)},{label:translate("stats_ports_additional_counters"),fields:_.map(currentAdditionalCounterFields,mapField)}],$scope.fieldGroups=_.filter($scope.fieldGroups,function(e){return e.fields.length>0})}var basicCounterFields=[{name:"BytesSent",lang:"bytes_sent"},{name:"BytesReceived",lang:"bytes_received"},{name:"PacketsSent",lang:"packets_sent"},{name:"PacketsReceived",lang:"packets_received"},{name:"UnicastPacketsSent",lang:"unicast_packets_sent"},{name:"UnicastPacketsReceived",lang:"unicast_packets_received"},{name:"MulticastPacketsSent",lang:"multicast_packets_sent"},{name:"MulticastPacketsReceived",lang:"multicast_packets_received"},{name:"BroadcastPacketsSent",lang:"broadcast_packets_sent"},{name:"BroadcastPacketsReceived",lang:"broadcast_packets_received"},{name:"DiscardPacketsSent",lang:"discard_packets_sent"},{name:"DiscardPacketsReceived",lang:"discard_packets_received"},{name:"ErrorsSent",lang:"errors_sent"},{name:"ErrorsReceived",lang:"errors_received"},{name:"UnknownProtoPacketsReceived",lang:"unknown_proto"}],flowControlFields=[{name:"PauseFramesSent",lang:"pause_frames_sent"},{name:"PauseFramesReceived",lang:"pause_frames_received"}],additionalCounterFields=[{name:"UndersizePackets",lang:"undersize_packets"},{name:"Packets64Bytes",lang:"packets_64_bytes"},{name:"Packets65to127Bytes",lang:"packets_of_bytes",params:{begin:"65",end:"127"}},{name:"Packets128to255Bytes",lang:"packets_of_bytes",params:{begin:"128",end:"255"}},{name:"Packets256to511Bytes",lang:"packets_of_bytes",params:{begin:"256",end:"511"}},{name:"Packets512to1023Bytes",lang:"packets_of_bytes",params:{begin:"512",end:"1023"}},{name:"Packets1024to1518Bytes",lang:"packets_of_bytes",params:{begin:"1024",end:"1518"}},{name:"OversizePackets",lang:"oversize_packets"},{name:"Fragments",lang:"fragments",note:"stats_ports_fragment_note"},{name:"CRCErroredPackets",lang:"crc_errored_packets",note:"stats_ports_crc_errored_packets_note"},{name:"Jabbers",lang:"jabbers",note:"stats_ports_jabbers_note"},{name:"DropEvents",lang:"drop_events",note:"stats_ports_drop_events_note"}],utilizationCounterFields=[{name:"InPortUtilization",lang:"in_bound_port_utilization"},{name:"OutPortUtilization",lang:"out_bound_port_utilization"},{name:"BidirectPortUtilization",lang:"bidirect_port_utilization"},{name:"LinkPortUptime",lang:"link_port_uptime",time:!0},{name:"CurrentRxSpeed",lang:"current_rx_speed"},{name:"CurrentTxSpeed",lang:"current_tx_speed"}];util.subscribeInfo(function(data){$scope.portsStats=data?data.ports:null,$scope.currentPort=_.findWhere($scope.portsStats,{alias:$scope.portAlias}),mapFields($scope.currentPort),$scope.$emit("pageload")},$scope),$scope.portAlias=$stateParams.portAlias,"WANLAN"==$scope.portAlias&&($scope.portAlias="WAN/LAN")}])}();