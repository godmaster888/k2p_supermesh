"use strict";!function(){function WizardPortsController($scope,translate,device,devinfo,ngDialog,funcs,snackbars,navFilter){function getSourcesList(){var list=_.map($scope.sources,function(value,inx){return{label:value.name,value:inx}});return list.unshift({label:translate("ports_wizard_port_free"),value:null}),list}function activate(){portAllocation.pull({SHOW_PORT_SSID:$scope.customRules.ShowVlanPortSSID}).then(function(){updateViewModel(),devinfo.onceAndSubscribe("client|ports",function(data){data&&(updatePortInfo(data),showNotification(data),$scope.$emit("pageload"))},$scope)})}function updatePortInfo(data){var managementPort=data?_.findWhere(data.availPorts,{management:!0}):null;$scope.managementPort=managementPort?managementPort.alias?managementPort.alias:managementPort.name:null;var internetPort=data?_.findWhere(data.availPorts,{name:"internet"})||_.findWhere(data.availPorts,{name:"port5"}):null;internetPort&&($scope.internetType=internetPort.mediaType)}function showNotification(data){var client=data.client,hasManagamentPort=data?_.findWhere(data.availPorts,{management:!0}):null;!_.isEmpty(client)&&"LAN"==client.name&&_.isUndefined(hasManagamentPort)?$scope.needShowNotification=!0:_.isEmpty(client)&&_.isUndefined(hasManagamentPort)&&($scope.needShowNotification=!0)}function updateViewModel(){$scope.deviceClass=portAllocation.getDeviceClass(),$scope.sources=portAllocation.sources(),$scope.ports=portAllocation.ports(),$scope.sourcesList=getSourcesList()}function editSource(sourceId,source){var model=_.extend({},source),dialog=ngDialog.open({template:"dialogs/wizards/ports/dialog.tpl.html",controller:"PortsWizardSourceDialogController",resolve:funcs.getLazyResolve("dialogs/wizards/ports/ctrl.lazy.js","PortsWizardSourceDialogController"),data:{source:model,sources:portAllocation.sources(),connections:portAllocation.connections(),deviceClass:portAllocation.getDeviceClass(),availIfaces:getAvailIfaces(),busyPVC:portAllocation.getBusyPVC(),reservedNames:portAllocation.getReservedNames(),reservedVlans:portAllocation.getReservedVlans(),isEditable:portAllocation.sourceIsEditable(source),vlanIdRequired:portAllocation.hasDefaultWanSource()}});dialog.closePromise.then(function(result){if(result&&result.value&&!_.isString(result.value)){var mapped=mapSource(result.value);result.value.isDeleted?portAllocation.removeSource(sourceId,source.l3Key):result.value.isNew&&null==sourceId?portAllocation.addSource(mapped,!0):portAllocation.updateSource(sourceId,mapped,!0),updateViewModel()}})}function getAvailIfaces(){return _.without(portAllocation.availIfaces(),"ATM")}function mapSource(data){var changeData={name:data.name,l2Key:data.l2Key,enabled:!!data.enabled,vid:data.vid,type:getType(data),vpi:data.vpi,vci:data.vci,qos:data.qos,encap:data.encap,port:data.port};return _.extend(data,changeData)}function getType(data){switch(data.port){case"ATM":return"atm";case"PTM":return"ethernet"}return"ethernet"}function canTogglePortSimple(port){return!getPortDisabledMessage(port)}function getPortDisabledMessage(port){return portIsManagement(port)?"summary_on_this_port":portAllocation.portInBridge(port)?"ports_wizard_in_bridge":portAllocation.hasDefaultWanSource()?null:"ports_wizard_no_default_wan"}function portIsManagement(port){return port.alias==$scope.managementPort}function showSimpleMode(){return!$scope.forceExtendedMode&&canShowSimpleMode()}function canShowSimpleMode(){return"DSL"!=$scope.deviceClass?!0:!1}var portAllocation=device.portAllocation,navRules=navFilter.rules();$scope.needShowNotification=!1,_.extend($scope,{internetType:null,isSimpleModeOnly:function(){return autoconf.BR2_PACKAGE_ANWEB_CUSTOM_KOREA_21883||autoconf.BR2_PACKAGE_ANWEB_CUSTOM_BELTELECOM_36527},isShowPort:function(port){return port.isWifi&&navRules.HideWiFiAccessPointBySSID?!_.contains(navRules.HideWiFiAccessPointBySSID,port.alias):!0},getSourcesList:getSourcesList,getPortTitle:function(port){var naIndex,protName,postfix;return port.isWifi?(naIndex=port.name.indexOf("-na"),protName=naIndex>-1?port.name.substring(0,naIndex):port.name,postfix=naIndex>-1?" ("+translate("ports_wizard_wifi_not_active")+")":"",port.alias||protName+postfix):port.alias},editSource:editSource,createSource:function(){"DSL"==$scope.deviceClass?editSource(null,{isNew:!0,enabled:!0,port:"ATM",type:"atm",qos:"ubr",encap:"llc",vid:null}):editSource(null,{isNew:!0,enabled:!0,type:"wan_tag"})},getPortIconClass:function(item){return item.isWifi?"wifi":"ethernet"},getSourceIconClass:function(){return"fiber"==$scope.internetType?"fiber":"pon"==$scope.internetType?"pon":"ethernet"},portIsSelected:function(port){return"DSL"==$scope.deviceClass?!!port.bridge&&port.isEditable:showSimpleMode()?!!port.bridge&&port.bridge==portAllocation.getDefaultSourceId():!!port.bridge},portIsBusy:function(port){return"DSL"==$scope.deviceClass&&port.isBusy?!0:!1},portIsNotEditable:function(port){return"DSL"==$scope.deviceClass?port.isEditable?!1:!0:!1},togglePortSimple:function(port){var defaultSource;if(showSimpleMode()&&canTogglePortSimple(port)&&!portIsManagement(port))return port.bridge&&port.bridge==portAllocation.getDefaultSourceId()?void(port.bridge=null):void("DSL"==$scope.deviceClass?(defaultSource=portAllocation.getDefaultSource(),port.bridge=defaultSource?defaultSource.name:null):port.bridge=portAllocation.getDefaultSourceId())},saveEnabled:function(){return portAllocation.isChanged()},save:function(){function sourceHasPorts(sourceId){return _.some($scope.ports,function(port){return port.bridge==sourceId})}if("DIR"==$scope.deviceClass&&(invalidBridges=_.filter($scope.sources,function(source,inx){return"bridge"==source.type&&!sourceHasPorts(inx)}),invalidBridges.length))return message=translate("ports_wizard_need_select_ports")+" "+_.map(invalidBridges,function(b){return'"'+b.name+'"'}).join(","),void alert(message);var invalidBridges,message,overlay=$scope.overlay.circular,overlayId=overlay.start();portAllocation.push(function(status){snackbars.add(status?"msg_rpc_write_error":"msg_rpc_write_success")}).then(activate)["finally"](overlay.stop.bind(overlay,overlayId))},showSimpleMode:showSimpleMode,canShowSimpleMode:canShowSimpleMode,canTogglePortSimple:canTogglePortSimple,getPortDisabledMessage:getPortDisabledMessage,toggleMode:function(){$scope.forceExtendedMode=!$scope.forceExtendedMode},portIsManagement:portIsManagement,isUnactiveWifi:function(item){var regexp=/^\w+-na$/;return item&&item.isWifi&&regexp.test(item.name)}}),activate()}angular.module("app").controllerProvider.register("WizardPortsController",WizardPortsController),WizardPortsController.$inject=["$scope","translate","device","devinfo","ngDialog","funcs","snackbars","navigationFilter"]}();