"use strict";!function(){angular.module("app").service("vpnServerUtil",["device","funcs","cpe",function(device,funcs,cpe){function apply(settings){function getInitConfig(settings){var newInitConfig={};return input.Device.Network.Server&&_.has(input.Device.Network.Server.VPN,settings.Type)&&funcs.setValue(paths.server+settings.Type,funcs.fetchBranch(__initConfig,paths.server+settings.Type+"."),newInitConfig),input.Device.Network.Settings&&(settings.PPP.__id?funcs.setValue(paths.pppSettings+settings.PPP.__id,funcs.fetchBranch(__initConfig,paths.pppSettings+settings.PPP.__id+"."),newInitConfig):funcs.setValue(paths.pppSettings.slice(0,-1),{},newInitConfig)),input.Device.Network.Group&&(settings.GroupId?funcs.setValue(paths.groups+"1.VPN."+settings.GroupId,funcs.fetchBranch(__initConfig,paths.groups+"1.VPN."+settings.GroupId+"."),newInitConfig):funcs.setValue(paths.groups+"1.VPN",{},newInitConfig)),input.Device.Firewall&&(input.Device.Firewall.IPv4.Masquerade&&(funcs.setValue(paths.fw+"Masquerade",{},newInitConfig),settings.Firewall.MasqWANId&&funcs.setValue(paths.fw+"Masquerade."+settings.Firewall.MasqWANId,funcs.fetchBranch(__initConfig,paths.fw+"Masquerade."+settings.Firewall.MasqWANId+"."),newInitConfig),settings.Firewall.MasqLANId&&funcs.setValue(paths.fw+"Masquerade."+settings.Firewall.MasqLANId,funcs.fetchBranch(__initConfig,paths.fw+"Masquerade."+settings.Firewall.MasqLANId+"."),newInitConfig)),input.Device.Firewall.IPv4.Zones&&(settings.Firewall.ZonesId?funcs.setValue(paths.fw+"Zones."+settings.Firewall.ZonesId,funcs.fetchBranch(__initConfig,paths.fw+"Zones."+settings.Firewall.ZonesId+"."),newInitConfig):funcs.setValue(paths.fw+"Zones",{},newInitConfig)),input.Device.Firewall.IPv4.Policy&&(funcs.setValue(paths.fw+"Policy",{},newInitConfig),_.each(settings.Firewall.PolicyIds,function(elem){""!=elem&&funcs.setValue(paths.fw+"Policy."+elem,funcs.fetchBranch(__initConfig,paths.fw+"Policy."+elem+"."),newInitConfig)}))),newInitConfig}settings.Mode=config.Mode;var input=converter.nativeToDsysinit(settings),newInitConfig=getInitConfig(settings),diff=funcs.newConfig.makeDiff(newInitConfig,input,attrs);return _.isEmpty(diff)?Promise.resolve():cpe.ApplyDifference(diff)}function getConfig(){return config?config.Servers:{}}function getUsersList(){return config?config.UsersList:[]}function getConnList(){return config?config.ConnList:[]}var paths={server:"Device.Network.Server.VPN.",pppSettings:"Device.Network.Settings.PPP.",group:"Device.Network.Group.",conns:"Device.Network.Connection.",groups:"Device.Network.Group.",devMode:"Device.DeviceInfo.DeviceMode",users:"Device.Network.Accounts.",fw:"Device.Firewall.IPv4.",dnsCurrent:"Device.Network.DNS.Current."},config=null,attrs=null,__initConfig=null,converter=device.vpnServer.converter;return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),__initConfig=funcs.deepClone(data),config=converter.dsysinitToNative(data,attrs),Promise.resolve()}return Promise.all([cpe.GetParameterValues([paths.server,paths.pppSettings,paths.conns,paths.groups,paths.devMode,paths.users,paths.fw,paths.group,paths.dnsCurrent]),cpe.GetParameterAttributes([paths.server,paths.pppSettings,paths.groups,paths.fw,paths.dnsCurrent])]).then(success,function(){return Promise.reject()})},apply:apply,getConfig:getConfig,getConnList:getConnList,validationRange:function(value,type,data){var compareAddress,minAddress="MinAddress"==type?value:data.MinAddress,maxAddress="MaxAddress"==type?value:data.MaxAddress;if("MinAddress"==type&&minAddress&&!funcs.is.ipv4(minAddress))return"msg_invalid_ipv4";if("MaxAddress"==type&&maxAddress&&!funcs.is.ipv4(maxAddress))return"msg_invalid_ipv4";if(minAddress&&funcs.is.ipv4(minAddress)&&maxAddress&&funcs.is.ipv4(maxAddress)){switch(compareAddress=funcs.ipv4.address.compare(minAddress,maxAddress)){case 1:return"MinAddress"==type?"lan_error_dhcp_start_ip_more_stop_ip":"lan_error_dhcp_stop_ip_less_start_ip";case 0:return"lan_error_dhcp_start_ip_equal_stop_ip"}return null}return null},validationClientRange:function(value,range){if(""==range.MinAddress||""==range.MaxAddress||""==value)return null;if(!funcs.is.ipv4(range.MinAddress)||!funcs.is.ipv4(range.MaxAddress)||!funcs.is.ipv4(value))return null;var rangeIP={start:range.MinAddress,end:range.MaxAddress};return funcs.ipv4.subnet.belongNetworkRange(rangeIP,value)?null:"msg_not_allowed_addr"},getUsersList:getUsersList}}])}();