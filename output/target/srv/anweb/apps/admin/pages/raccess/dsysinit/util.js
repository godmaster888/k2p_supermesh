"use strict";!function(){angular.module("app").service("raccessUtil",["cpe","device","funcs","navigationFilter",function(cpe,device,funcs,navigationFilter){function getConfig(){return config?config:{}}function getAttrs(){return attrs?attrs:{}}function removeRules(items){var newConfig=funcs.deepClone(__initDsysinitConfig);_.each(items,function(item){var rulePath=paths.firewall+(item.IsInitIPv6?"IPv6":"IPv4")+".Rules."+item.__id;funcs.cutBranch(newConfig,rulePath)});var diff=funcs.newConfig.makeDiff(__initDsysinitConfig,newConfig,rulesAttrs);return cpe.ApplyDifference(diff)}function applyRule(rule){function prepareRule(rule){switch(rule.Protocol){case"FTP":rule.Origin=paths.ftp;break;case"domoticz_nav":rule.Origin=paths.domoticz;break;case"Transmission":rule.Origin=paths.transmission;break;case"SSH":rule.Origin=paths.ssh;break;case"TELNET":rule.Origin=paths.telnet;break;case"TR":rule.Origin=paths.tr069;break;default:rule.Origin=""}var protocol=_.findWhere(attrs.Protocols,{Name:rule.Protocol});return protocol&&protocol.Link&&(rule.Ports.Dest=protocol.Link,rule.Ports.Source==protocol.Value&&(rule.Ports.Source=protocol.Link)),rule}var initType,reverseType,type=rule.IsIPv6?"IPv6":"IPv4";rule=prepareRule(rule);var data=converter.nativeToDsysinit(rule,constants),type=rule.IsIPv6?"IPv6":"IPv4",rulePath=paths.firewall+type+".Rules",initRule={};_.has(rule,"IsInitIPv6")&&rule.IsIPv6!=rule.IsInitIPv6?(initType=rule.IsInitIPv6?"IPv6":"IPv4",reverseType="IPv6"==initType?"IPv4":"IPv6",funcs.setValue(paths.firewall+initType+".Rules."+rule.__id,{},initRule),funcs.setValue(paths.firewall+reverseType+".Rules",{},initRule),funcs.setValue(paths.firewall+initType+".Rules",{},data)):(initRule=funcs.fetchBranch(__initDsysinitConfig,rulePath+"."+rule.__id+"."),initRule=initRule?funcs.setValue(rulePath+"."+rule.__id,initRule,{}):funcs.setValue(rulePath,{},{}));var diff=funcs.newConfig.makeDiff(initRule,data,rulesAttrs);return cpe.ApplyDifference(diff)}var config=null,attrs=null,rulesAttrs=null,__initDsysinitConfig=null,customRules=navigationFilter.rules(),constants={SUPPORT_KOREA:autoconf.BR2_PACKAGE_ANWEB_CUSTOM_KOREA_21883,SUPPORT_DOMOTICZ:autoconf.BR2_PACKAGE_ANWEB_DOMOTICZ,SUPPORT_ERTELECOM:autoconf.BR2_PACKAGE_ANWEB_CUSTOM_ERTELECOM_23157,SUPPORT_TELNET:autoconf.BR2_PACKAGE_ANWEB_TELNET&&!customRules.HideRaccessProtocolTelnet,SUPPORT_SSH:autoconf.BR2_PACKAGE_ANWEB_SSH&&!customRules.HideRaccessProtocolSSH,SUPPORT_HTTP:!autoconf.BR2_PACKAGE_ANWEB_HTTPS_ONLY,SUPPORT_HTTPS:autoconf.BR2_PACKAGE_ANWEB_HTTPS,SUPPORT_FTP:autoconf.BR2_PACKAGE_ANWEB_FTP,SUPPORT_SAMBA:autoconf.BR2_PACKAGE_ANWEB_SAMBA,SUPPORT_BCM:autoconf.BR2_PACKAGE_ANWEB_BCM_MODEM,SUPPORT_RLX:autoconf.BR2_PACKAGE_ANWEB_REALTEK,SUPPORT_MODEMS:autoconf.BR2_PACKAGE_ANWEB_REALTEK_MODEM,SUPPORT_CUSTOM_GOODLINE:autoconf.BR2_PACKAGE_ANWEB_CUSTOM_GOODLINE_21218||autoconf.BR2_PACKAGE_ANWEB_CUSTOM_GOODLINE_39341,CUSTOM_PARTNER_23078:autoconf.BR2_PACKAGE_ANWEB_CUSTOM_PARTNER_23078,CUSTOM_PARTNER_39065:autoconf.BR2_PACKAGE_ANWEB_CUSTOM_PARTNER_39065,CUSTOM_ROSTELECOM_42512:autoconf.BR2_PACKAGE_ANWEB_CUSTOM_ROSTELECOM_42512,SUPPORT_REMOTE_ACCESS_WAN_IFACES:autoconf.BR2_PACKAGE_ANWEB_REMOTE_ACCESS_WAN,SUPPORT_MULTI_IP:autoconf.BR2_PACKAGE_ANWEB_SUPPORT_MULTI_IP},converter=device.raccess.converter,paths={network:"Device.Network.",transmission:"Device.Services.Transmission.",firewall:"Device.Firewall.",ftp:"Device.Services.FTP.",telnet:"Device.Services.Telnet.",domoticz:"Device.Services.Domoticz.",ssh:"Device.Services.SSH.",usbmodem:"Device.USB.Modem.","switch":"Device.Switch.",tr069:"Device.Services.TR069.",anweb:"Device.Services.Anweb."},configPath=[paths.network,paths.firewall,paths["switch"],paths.anweb];customRules.HideRaccessProtocolSSH||configPath.push(paths.ssh),configPath.push(paths.usbmodem),configPath.push(paths.tr069);var checkPaths=[paths.ftp,paths.telnet];return{pull:function(){return function(paths){return funcs.sequencePromises(paths,function(path){return cpe.GetParameterNames(path).then(function(){return configPath.push(path),Promise.resolve()},function(){return Promise.resolve()})})}(checkPaths).then(function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);rulesAttrs=funcs.buildTreeAttributes(response[1].result.ParameterList);var constAttrs=funcs.deepClone(constants);if(config=converter.dsysinitToNative(data,constAttrs),_.find(config.Rules,{Origin:paths.transmission})&&(constAttrs.hasTorrentRule=!0),funcs.fetchBranch(data,paths.ftp+"Port")){var ftpPortPath=paths.ftp+"Port";constAttrs.ftpPortLink=ftpPortPath+".",constAttrs.ftpPort=funcs.fetchBranch(data,ftpPortPath).toString()}if(!customRules.HideRaccessProtocolTelnet&&funcs.fetchBranch(data,paths.telnet+"Port")){var telnetPortPath=paths.telnet+"Port";constAttrs.telnetPortLink=telnetPortPath+".",constAttrs.telnetPort=funcs.fetchBranch(data,telnetPortPath).toString()}if(funcs.fetchBranch(data,paths.domoticz+"SSLPort")){var domoticzPortPath=paths.domoticz+"SSLPort";constAttrs.domoticzPortLink=domoticzPortPath+".",constAttrs.domoticzPort=funcs.fetchBranch(data,domoticzPortPath).toString()}if(_.find(config.Rules,{Origin:paths.domoticz})&&(constAttrs.hasDomoticzRule=!0),!customRules.HideRaccessProtocolSSH&&funcs.fetchBranch(data,paths.ssh+"Port")){var sshPortPath=paths.ssh+"Port";constAttrs.sshPortLink=sshPortPath+".",constAttrs.sshPort=funcs.fetchBranch(data,sshPortPath).toString()}if(funcs.fetchBranch(data,paths.tr069+"ConnectionRequestPort")){var trPortPath=paths.tr069+"ConnectionRequestPort";constAttrs.trPortLink=trPortPath+".",constAttrs.trPort=funcs.fetchBranch(data,trPortPath).toString()}if(funcs.fetchBranch(data,paths.anweb+"Port")){var httpPortPath=paths.anweb+"Port";constAttrs.httpPortLink=httpPortPath+".",constAttrs.httpPort=funcs.fetchBranch(data,httpPortPath).toString()}if(funcs.fetchBranch(data,paths.anweb+"HTTPSPort")){var httpsPortPath=paths.anweb+"HTTPSPort";constAttrs.httpsPortLink=httpsPortPath+".",constAttrs.httpsPort=funcs.fetchBranch(data,httpsPortPath).toString()}return attrs=converter.attrsToNative(constAttrs),__initDsysinitConfig=funcs.deepClone(data),funcs.deepClone(config),Promise.resolve()}return Promise.all([cpe.GetParameterValues(configPath),cpe.GetParameterAttributes([paths.firewall])]).then(success,function(){return Promise.reject()})})},getConfig:getConfig,getAttrs:getAttrs,removeRules:removeRules,applyRule:applyRule}}])}();