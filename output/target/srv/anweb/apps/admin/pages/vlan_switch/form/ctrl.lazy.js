"use strict";!function(){angular.module("app").controllerProvider.register("VlanSwitchFormCtrl",["$scope","$state","devinfo","VlanUtil","funcs","translate","snackbars","$location","navigationFilter",function($scope,$state,devinfo,util,funcs,translate,snackbars,$location,navFilter){function apply(){function applyVlan(){var rule=helper.dsysinitRule(vlan.rule),diffRule=helper.getVlanDiff(rule,vlan.id);return!_.size(diffRule)||$scope.isPortExcluded?Promise.resolve({}):util.applyDiff(diffRule)}function applyIface(applyVlanRes){function applyIfaceHandler(){helper=util.makeHelper();var rule,diffRule,result=[],vlanIndexes=getVlanIndexes(vlan.id,applyVlanRes);vlan.id=vlanIndexes[0];var diffIface=helper.getIfaceDiff(vlan.rule,vlanIndexes,vlan.rule.Ports,__backupRulePorts);return _.size(diffIface)?(result.push(diffIface),$scope.isPortExcluded&&(rule=helper.dsysinitRule(vlan.rule),diffRule=helper.getVlanDiff(rule,vlan.id),result.push(diffRule)),util.applyDiff(result)):Promise.resolve({})}function getVlanIndexes(vlanInx,applyVlanRes){var i,result=[];vlanInx&&vlanInx.inst&&result.push(vlanInx);var insts=funcs.fetchBranch(applyVlanRes,"result.InstanceNumberList."),keys=_.keys(insts);for(i=0;i<keys.length;i+=2)result.push({"switch":vlanInx["switch"],inst:vlan.rule.Iface.CreateIface?insts[keys[i]]:""});return result}var __backupRulePorts=funcs.deepClone(__backupRule.Ports);return util.pull().then(applyIfaceHandler)}function success(){snackbars.add("msg_apply_success"),overlay.stop(overlayId),$state.go("^.list")}function error(error){error?(console.log("error vlan",error),$state.go("error",{code:"msg_push_error",message:"msg_error_desc"}),overlay.stop(overlayId)):success()}if(!$scope.vlan_form.$invalid){if(!allowAllExcluded(vlan)&&!helper.checkPorts(vlan.rule.Ports))return void(vlan.errorPorts=!0);vlan.errorPorts=!1;var checkWanPorts=helper.checkWanPorts(vlan.id,vlan.rule.Ports,__backupRule.Ports,vlan.rule.Iface);if(!checkWanPorts.check)return void alert(translate("vlan_not_exlude_port",{port:checkWanPorts.wanPort.join(", "),abr:"port"})+". "+translate("vlan_need_remove_conns")+": "+checkWanPorts.errNames.join(", "));"Firewall"!=vlan.rule.Mode&&(vlan.rule.Iface.Name=vlan.rule.Vlan.Name?vlan.rule.Vlan.Name:vlan.rule.Vlan.VID.toString(),vlan.rule.Iface.CreateIface=vlan.rule.Iface.CreateIface);var overlayId=overlay.start();return Promise.resolve().then(applyVlan).then(applyIface).then(function(){function applyDL(data){!function(data){vlan.lans=_.map(data.lan,function(elem){return funcs.ipv4.subnet.getNetworkRange(elem.ip,elem.mask)})}(data[1]),helper=util.makeHelper();var connections,diff=helper.getDualLANDiff(vlan.dualLAN,vlan.id,vlan.lans);return diff.errDelete&&diff.errDelete.length?(connections=helper.checkConnections(diff.errDelete),alert(translate("vlan_need_remove_conns")+": "+connections.join(", ")),Promise.resolve()):_.size(diff)?util.applyDiff(diff):Promise.resolve()}return supportDualLAN()?Promise.all([util.pull(),devinfo.once("net")]).then(applyDL):Promise.resolve()}).then(success)["catch"](error)}}function checkUnique(value,section,prop){var result,instId,instId,switchId;return"Vlan"==section&&"Name"==prop&&value.length>16?"msg_invalid_name_length":("Vlan"==section&&(instId=vlan.id?vlan.id.inst:null,switchId=vlan.id?vlan.id["switch"]:"1"),"Iface"==section&&(instId=vlan.rule.Iface.__id),result=helper.checkUnique(value,section,prop,switchId,instId),result?null:"msg_error_value_is_not_uniq")}function isRequiredVID(){return _.some(vlan.rule.Ports,function(elem){var tag=elem.Vlan.Tag;return"tagged"==tag})}function wasModified(){var rule=angular.copy(vlan.rule);return __backupRule&&!funcs.deepEqual(rule,__backupRule)}function needShowQos(){return helper.support("VPR")&&isRequiredVID()}function allowAllExcluded(vlan){return"2"==vlan.id}function supportDualLAN(){return(autoconf.BR2_PACKAGE_ANWEB_CUSTOM_TIMDS_34475||autoconf.BR2_PACKAGE_ANWEB_CUSTOM_MTS_29548)&&"1"!==vlan.id.inst}function setCreateIfaceValue(portType){function isContainsConn(elem){_.union(elem.Ports.Tagged.split(","),elem.Ports.Untagged.split(","));var isConn,obj,diff,isConn=!1;return vlan.rule.Iface.Use&&(obj={__ifaceInst:vlan.rule.Iface.__id,__bridgeInst:vlan.rule.Iface.__bridgeId,__switchId:vlan.id["switch"],__inst:vlan.id.inst},diff=helper.getRemoveDiff([obj]),diff.errDelete.conns&&diff.errDelete.conns.length&&(isConn=!0)),isConn}var port,isAlreadyChecked,wanOrLanPort;/wifi|eogre|eoip|usb|l2tpv3/.test(portType)&&(port=_.find(vlan.rule.Ports,function(elem){return elem.Type==portType&&"excluded"!=elem.Vlan.Tag}),isAlreadyChecked=_.find(vlan.rule.Ports,function(elem){return/wifi|eogre|eoip|usb|l2tpv3/.test(elem.Type)&&"excluded"!=elem.Vlan.Tag}),wanOrLanPort=_.find(vlan.list,function(elem){return 1==elem.__ifaceInst&&elem.__ifaceInst==vlan.rule.Iface.__id||isContainsConn(elem)}),vlan.isNew()?port||isAlreadyChecked?(vlan.rule.Iface.CreateIface=!0,vlan.rule.Iface.Use=!0):(vlan.rule.Iface.CreateIface=!1,vlan.rule.Iface.Use=!1):wanOrLanPort||(port&&isAlreadyChecked||!port&&isAlreadyChecked?(vlan.rule.Iface.CreateIface=!0,vlan.rule.Iface.Use=!0):($scope.isPortExcluded=!0,vlan.rule.Iface.Use=!1)))}$scope.vlan={id:null,rule:null,list:null,managementPortLink:null,portTypeList:null,errorPorts:!1,isActivate:!1,isRangeVID:!1,apply:apply,checkUnique:checkUnique,checkName:function(value,section,prop){return value&&!/^[0-9a-zA-Z-\_\.]+$/.test(value)?"msg_invalid_name":checkUnique(value,section,prop)},checkVIDEnd:function(){return vlan.rule.Vlan.VIDEnd&&vlan.rule.Vlan.VID?vlan.rule.Vlan.VIDEnd==vlan.rule.Vlan.VID?"vlan_vid_start_equal_vid_end":vlan.rule.Vlan.VIDEnd<=vlan.rule.Vlan.VID?"vlan_vid_start_more_vid_end":null:null},isVIDasRange:function(){return!1},isManagementPort:function(port){return vlan.managementPortLink==port.Link},isRequiredVID:isRequiredVID,wasModified:wasModified,portsTypes:function(){function checkPortType(type){return _.some(vlan.rule.Ports,function(port){return port.Type==type})}var types=["ports"];return checkPortType("wifi")&&types.push("wireless_iface"),checkPortType("eogre")&&types.push("eogre_iface"),checkPortType("eoip")&&types.push("eoip_iface"),checkPortType("usb")&&types.push("USB"),checkPortType("l2tpv3")&&types.push("L2TPv3"),types},getPorts:function(ports,type){var portType="";switch(type){case"ports":portType="port";break;case"wireless_iface":portType="wifi";break;case"eogre_iface":portType="eogre";break;case"eoip_iface":portType="eoip";break;case"USB":portType="usb";break;case"L2TPv3":portType="l2tpv3"}return _.sortBy(_.filter(ports,function(e){return e.Type==portType}),"Band")},needShowQos:needShowQos,supportDualLAN:supportDualLAN,disabledDualLAN:function(){var curIface="Device.Network.Interface.Ethernet."+vlan.rule.Iface.__id+".";return vlan.dualLAN.Enable&&(vlan.dualLAN.vlanIface&&curIface!=vlan.dualLAN.vlanIface||vlan.dualLAN.vlanIface&&curIface==vlan.dualLAN.vlanIface&&""!=vlan.dualLAN.conn)||function(){return _.some(vlan.rule.Ports,function(port){return port.IsWan&&"excluded"!=port.Vlan.Tag})}()},changeDualLAN:function(value){vlan.dualLAN.Enable=value},notIncludedPort:function(port){return port.IsWan&&vlan.dualLAN.Enable?!0:!1},changedTag:function(inx,type){setCreateIfaceValue(type)},getIfaceIcon:function(type,port){switch(type){case"ports":return port&&"WAN"==port.Name&&autoconf.BR2_PACKAGE_ANWEB_FIBER?"fiber":"ethernet";case"wireless_iface":return"wifi";case"eogre_iface":return"eogre";case"eoip_iface":return"eoip";case"USB":return"usb";case"l2tpv3":return"l2tpv3";default:return"ethernet"}},isAnotherSwitch:function(port){var portSwitchId=port.__switchId,vlanSwitchId=vlan.rule.Vlan.__switchId;return!_.isNull(portSwitchId)&&!_.isNull(vlanSwitchId)&&portSwitchId!==vlanSwitchId},getEogreNote:function(){var href=$scope.pageDetails.eogreInfo[0].url;return translate("vlan_eogre_tag_note",{link:"<a href='"+href+"'>EoGRE</a>",trustAsHtml:!0})},getEoipNote:function(){var href=$scope.pageDetails.eoipInfo[0].url;return translate("vlan_eoip_tag_note",{link:"<a href='"+href+"'>EoIP</a>",trustAsHtml:!0})},getIfaceNote:function(){return vlan.conns?translate("vlan_iface_disabled_note",{list:vlan.conns.join(", "),abr:"list"}):null},isNew:function(){return!$state.params.inxInst},conns:null};var vlan=$scope.vlan,overlay=$scope.overlay.circular;$scope.navRules=navFilter.rules()||{},$scope.isPortExcluded=!1;var helper,__backupRule=null;!function(){function success(){var obj,diff;helper=util.makeHelper(),vlan.id={"switch":$state.params.inxSwitch||"1",inst:$state.params.inxInst},vlan.rule=helper.nativeRule(vlan.id),vlan.constraints=helper.constraints(),vlan.dualLAN=helper.dualLAN(),vlan.portTypeList=makePortTypeList(vlan.rule.Ports,vlan.id,vlan.rule.Iface.__bridgeId),vlan.list=_.sortBy(_.omit(helper.list(),function(e){return _.contains($scope.navRules.BanWanVlansList,e.VID)}),function(e){return e.VID}),vlan.rule.Iface.Use&&(obj={__ifaceInst:vlan.rule.Iface.__id,__bridgeInst:vlan.rule.Iface.__bridgeId,__switchId:vlan.id["switch"],__inst:vlan.id.inst},diff=helper.getRemoveDiff([obj]),diff.errDelete.conns&&diff.errDelete.conns.length&&(vlan.conns=helper.checkConnections(diff.errDelete.conns))),vlan.isRangeVID=vlan.rule.Vlan.VIDEnd>0,__backupRule=angular.copy(vlan.rule),vlan.isActivate=!0}function makePortTypeList(ports,id,bridgeId){var result={},vlanId=id&&id.inst?id.inst:null,busyUntaggedPorts=helper.getBusyUntaggedPorts(vlanId,bridgeId),allList=[{label:"vlan_port_type_e",value:"excluded"},{label:"vlan_port_type_u",value:"untagged"},{label:"vlan_port_type_t",value:"tagged"},{label:"ipsec_status_enabled",value:"included"}];return _.each(ports,function(port){result[port.Type+port.Inst]=_.filter(allList,function(elem){return"untagged"==elem.value?!_.contains(busyUntaggedPorts,port.Link)&&"eogre"!=port.Type&&"eoip"!=port.Type:"tagged"==elem.value&&("Router"==vlan.rule.Mode&&"1"==vlan.id.inst||/wifi|eogre|eoip|usb|l2tpv3/.test(port.Type))?!1:"included"==elem.value?("eogre"==port.Type||"eoip"==port.Type)&&!_.contains(busyUntaggedPorts,port.Link):!0})}),result}util.pull().then(function(){return devinfo.onceAndSubscribe("ports|Device.Statistics.Neighbours.|Device.WiFi.Radio.*.AccessPoint.*.Interface",function(input){if(input&&input.availPorts){var neighbours,wifiInfo,host,info,managementPort=_.find(input.availPorts,function(port){return port.management});vlan.managementPortLink=managementPort?managementPort.link:null,!vlan.managementPortLink&&input["Device.Statistics.Neighbours."]&&input["Device.WiFi.Radio.*.AccessPoint.*.Interface"]&&(neighbours=funcs.fetchBranch(input["Device.Statistics.Neighbours."],"Device.Statistics.Neighbours."),wifiInfo=input["Device.WiFi.Radio.*.AccessPoint.*.Interface"],host=input.remoteAddress,vlan.host=host,info=_.find(neighbours,{IPAddress:host}),info&&""!=info.Port&&(vlan.managementPortLink=funcs.fetchBranch(wifiInfo,info.Port).Interface))}},$scope)}).then(success)["catch"](function(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})})["finally"](function(){$scope.$emit("pageload")})}()}])}();