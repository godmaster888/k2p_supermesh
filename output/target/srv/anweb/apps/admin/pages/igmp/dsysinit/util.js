"use strict";!function(){angular.module("app").service("igmpUtil",["cpe","cpex","funcs","device",function(cpe,cpex,funcs,device){function apply(settings){var data=converter.nativeToDsysinit(settings),initData=funcs.deepClone(__initData);_.has(initData.passThrough,"pptpId")||delete initData.passThrough.pptp,_.has(initData.passThrough,"l2tpId")||delete initData.passThrough.l2tp,_.has(initData.passThrough,"ipsecId")||delete initData.passThrough.ipsec;var __initConfig=converter.nativeToDsysinit(initData),diff=funcs.newConfig.makeDiff(__initConfig,data,attrs);return cpe.ApplyDifference(diff)}function getConfig(){return config?config:""}var config=null,attrs=null,__initData=null,converter=device.misc.converter,wasCheckSupported=!1,constants={rules:"Device.Firewall.IPv4.Rules.",settings:"Device.Network.Settings.",igmp:"Device.Services.IGMPX.",udpxy:"Device.Services.Udpxy.",deviceMode:"Device.DeviceInfo.DeviceMode",mld:"Device.Services.MLDProxy."},configPaths=[constants.rules,constants.settings,constants.igmp,constants.deviceMode],_supported={IGMP:!0,MLD:!1};return{pull:function(){function fetchData(){return Promise.all([cpe.GetParameterValues(configPaths),cpe.GetParameterAttributes(configPaths)])}function checkSupported(){return wasCheckSupported?Promise.resolve():cpex.checkSupported([constants.udpxy,constants.mld]).then(function(supported){return wasCheckSupported=!0,configPaths=configPaths.concat(supported),Promise.resolve()})}function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),config=converter.dsysinitToNative(data),__initData=funcs.deepClone(config),_supported.MLD=!!funcs.fetchBranch(data,constants.mld),Promise.resolve()}return checkSupported().then(fetchData).then(success)["catch"](function(){return Promise.reject()})},apply:apply,getConfig:getConfig,supported:function(){return _supported}}}])}();