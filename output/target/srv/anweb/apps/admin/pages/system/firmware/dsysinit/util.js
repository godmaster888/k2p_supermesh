"use strict";!function(){angular.module("app").service("sysFirmwareUtil",["$rootScope","$http","$window","$timeout","$q","device","funcs","cpe","cpex","devinfo","translate","systemActionService","unloadHandler",function($rs,$http,$window,$timeout,$q,device,funcs,cpe,cpex,devinfo,translate,systemAction,unloadHandler){function init(){function __init(response){return $rs.fwUpgradeStatus&&(devinfo.suspendAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=0,progress.start(fwupdateTimeout,"wizard_update_in_progress",function(){var upgradeProgress;return response[0]&&response[0]["Device.DeviceInfo.UpgradeProgress"]?(upgradeProgress=response[0]["Device.DeviceInfo.UpgradeProgress"].Device.DeviceInfo.UpgradeProgress,upgradeProgress*fwupdateTimeout/100):0}())),response[0]&&(version=response[0].version),response[1]&&(dsysinit.config=funcs.buildTree(response[1].result.ParameterList),config=converter.dsysinitToNative({config:dsysinit.config}),status=config.Status),response[2]&&(dsysinit.attrs=funcs.buildTreeAttributes(response[2].result.ParameterList)),Promise.resolve()}return function(){var configPaths=[],requests=[devinfo.once("version|Device.DeviceInfo.UpgradeProgress")];return configPaths.push("Device.Services.Autoupdate."),configPaths.length&&(requests.push(cpe.GetParameterValues(configPaths)),requests.push(cpe.GetParameterAttributes(configPaths))),Promise.all(requests)}().then(__init)}function fwUploadEnd(result){function checkVersion(input){var newVersion=input.NewVersion,currentVersion=input.CurrentVersion;if(newVersion==currentVersion)return"";var vNew=newVersion.split("."),vCurrent=currentVersion.split(".");return parseInt(vNew[0])!=parseInt(vCurrent[0])?"need_backup":parseInt(vNew[1])<parseInt(vCurrent[1])?"maybe_backup":""}function checkReset(input){var newVersion=input.NewVersion;return input.CurrentVersion,newVersion?!1:!0}function fwUpgrade(transactionId,needReset){return $http.get("/fwupgrade?action=upgrade&transaction_id="+transactionId+"&need_reset="+needReset)}function fwUpgradeCancel(transactionId,status){var requestPath="/fwupgrade?action=cancel";return transactionId&&(requestPath+="&transaction_id="+transactionId),$http.get(requestPath).then(fwUpgradeEnd(status))}var response,transactionId,action,needReset,status=result&&result.data?result.data.status:0;switch(status){case 0:case-6:fwUpgradeCancel(null,status),alert(translate("firmware_file_invalid"));break;case 1:break;case 2:switch(response=result.data.response,transactionId=response.TransactionID,action=checkVersion(response),needReset=checkReset(response),action){case"need_backup":alert(translate("firmware_force_reset")),backup().then(function(){confirm(translate("firmware_continue_update"))?fwUpgrade(transactionId,needReset):fwUpgradeCancel(transactionId)});break;case"maybe_backup":confirm(translate("firmware_maybe_reset"))?backup().then(function(){confirm(translate("firmware_continue_update"))?fwUpgrade(transactionId,needReset):fwUpgradeCancel(transactionId)}):confirm(translate("firmware_continue_update"))?fwUpgrade(transactionId,needReset):fwUpgradeCancel(transactionId);break;default:fwUpgrade(transactionId)}break;default:fwUpgradeCancel(null,status),alert(translate("firmware_file_invalid"))}}function fwUpgradeEnd(){devinfo.resumeAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=3,fwupdateTimer.end&&$timeout.cancel(fwupdateTimer.end),fwupdateTimer.recheck&&$timeout.cancel(fwupdateTimer.recheck),progress.stop()}function fwUpgradeEndOk(result){_.isString(result)?(unloadHandler.before.clean(),location.href=$location.protocol()+"://"+$location.host()+":"+$location.port()):$window.location.reload(!0)}function backup(){return new Promise(function(resolve){document.location.href="/config_load",$timeout(resolve,3e3)})}function remoteUpdate(){return systemAction.remoteUpdate(config.URL,config.MD5)}function apply(input,check){function checkStatus(attempt){function success(){return"Processing"==status?checkStatus(attempt+1):Promise.resolve()}return attempt>=7?function(){return status="Failure",Promise.resolve()}():Promise.resolve().then(function(){return funcs.promiseDelay(3e3)}).then(init).then(success)}check&&(input.Check=!0);var config=converter.nativeToDsysinit(input),diff=funcs.newConfig.makeDiff(dsysinit.config,config,dsysinit.attrs);return _.isEmpty(diff)?Promise.resolve():cpe.ApplyDifference(diff).then(function(){return check?checkStatus(0):init()})}function getConfig(){return config}function getStatus(){var messages={Available:{text:translate("firmware_new_version")+" ("+(config?config.Version:"")+")",color:"green"},NotSupported:{text:translate("firmware_remote_file_absent"),color:"red"},NotNeeded:{text:translate("firmware_new_version_unavailable"),color:"gray"},Idle:{text:"",color:""},Processing:{text:"",color:""},Failure:{text:translate("firmware_unknown_error"),color:"red"}};return status in messages||(status="Idle"),messages[status]}function getVersion(){return version}function isNeedUpdate(){return"Available"==status}var progress=$rs.overlay.progress;$rs.overlay.circular;var converter=device.firmware.converter,fwupdateTimeStartCheck=6e4,fwupdateTimeout=3e5,fwupdateTimer={recheck:null,end:null},version=null,config=null,status=null,dsysinit={config:null,attrs:null};return{init:init,useFormData:!0,localFwUploadBefore:function(cb){return cpe.GetParameterValues(["Device.Users.CurrentUser."]).then(cb)},localFwUploadBegin:function(){function check(){devinfo.skipAuth.once("notice").then(function(result){_.isUndefined(result.fwupdateStatus)||0==result.fwupdateStatus?fwUpgradeEndOk(result):recheck(5e3)},recheck)}function recheck(time){fwupdateTimer.recheck=$timeout(check,time)}devinfo.suspendAll(),$rs.deviceMonitorConfig.definitelyLostThreshold=0,progress.start(fwupdateTimeout,"wizard_update_in_progress"),fwupdateTimer.end=$timeout(fwUpgradeEnd,fwupdateTimeout-fwupdateTimeStartCheck),recheck(fwupdateTimeStartCheck)},localfwUploadEnd:fwUploadEnd,apply:apply,remoteUpdate:remoteUpdate,getConfig:getConfig,getStatus:getStatus,getVersion:getVersion,isNeedUpdate:isNeedUpdate}}])}();