"use strict";!function(){angular.module("app").service("telnetUtil",["cpe","funcs",function(cpe,funcs){function apply(input){var data=funcs.deepClone(input),config={},ssh=null;_.has(data,"SSH")&&(ssh=funcs.deepClone(data.SSH),delete data.SSH,ssh.Enable||delete ssh.Port),data.Enable||delete data.Port,funcs.setValue(configPath.replace(/\.$/,""),data,config),null!=ssh&&funcs.setValue(sshPath.replace(/\.$/,""),ssh,config);var changes=funcs.getChangesExpanded(__initConfig,config);if(_.isEmpty(changes))return Promise.resolve();var output=funcs.splitTree(changes);return cpe.SetParameterValues(output)}function getData(){var telnet={};return telnet=funcs.fetchBranch(config,configPath),telnet.SSH=funcs.fetchBranch(config,sshPath),telnet}var configPath="Device.Services.Telnet.",sshPath="Device.Services.SSH.",configList=[];configList.push(configPath),configList.push(sshPath);var config=null,__initConfig=null;return{pull:function(){function success(response){return config=funcs.buildTree(response[0].result.ParameterList),__initConfig=angular.copy(config),Promise.resolve()}return Promise.all([cpe.GetParameterValues(configList)]).then(success)},apply:apply,getData:getData,isPortBusy:function(port){return cpe.Execute("Device.Network.CheckPortOccupied.",[{Name:"Port",Value:port}])}}}])}();