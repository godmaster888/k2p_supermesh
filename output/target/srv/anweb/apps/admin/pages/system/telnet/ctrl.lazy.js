"use strict";!function(){angular.module("app").controllerProvider.register("SysTelnetCtrl",["$scope","$state","telnetUtil","snackbars","translate",function($scope,$state,util,snackbars,translate){function init(){util.pull().then(function(){telnet.data=util.getData(),__backup=angular.copy(telnet.data)})["catch"](function(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})})["finally"]($scope.$emit.bind($scope,"pageload"))}function apply(){if(!$scope.telnetSettings.$invalid){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.apply(telnet.data).then(function(){snackbars.add("msg_apply_success"),init()})["catch"](function(){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})})["finally"](overlay.stop.bind(overlay,overlayId))}}function prepareApply(){var tmpPort=null;return telnet.data.Enable&&telnet.data.SSH.Enable&&telnet.data.Port==telnet.data.SSH.Port?void alert(translate("telnet_busy_port_msg")):(telnet.data.Enable&&__backup.Port!=telnet.data.Port?tmpPort=telnet.data.Port:telnet.data.SSH.Enable&&__backup.SSH.Port!=telnet.data.SSH.Port&&(tmpPort=telnet.data.SSH.Port),void(tmpPort?util.isPortBusy(tmpPort).then(function(response){var isBusy=_.find(response.result.ParameterList,{Name:"Occupied"});isBusy.Value?alert(translate("telnet_busy_port_msg")):apply()}):apply()))}function wasModified(){return __backup&&!_.isEqual(__backup,telnet.data)}$scope.telnet={data:null,apply:prepareApply,wasModified:wasModified};var telnet=$scope.telnet,__backup=null;init(),telnet.sshNav="telnet_ssh_nav",telnet.sshDesc="telnet_ssh_desc",telnet.sshClassName="block-left"}])}();