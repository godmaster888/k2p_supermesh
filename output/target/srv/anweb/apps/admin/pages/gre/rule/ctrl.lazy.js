"use strict";!function(){angular.module("app").controllerProvider.register("GreRuleCtrl",["$scope","$state","funcs","devinfo","GreUtil","translate",function($scope,$state,funcs,devinfo,util,translate){function wasModified(){return __initialRule&&!_.isEqual(__initialRule,angular.copy(gre.rule))}var __initialRule=null,index=_.isUndefined($state.params.inx)?void 0:parseInt($state.params.inx),currentState=$state.current.name.split(".");currentState.pop(),currentState=currentState.join("."),$scope.greRule={isActivate:!1,rule:null,lans:null,ConnList:null,apply:function(){function success(){$state.go(currentState+".info")}if(!$scope.form.$invalid){var overlay=$scope.overlay.circular,overlayId=overlay.start(),applyObj=util.applyRule(gre.rule,index);applyObj?util.apply(applyObj).then(success)["catch"](function(){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})})["finally"](overlay.stop.bind(overlay,overlayId)):success()}},wasModified:wasModified,validation:function(value,type){var range;if(""==value)return null;switch(type){case"VPNIP":case"DestIP":if(!funcs.is.ipv4(value))return"msg_invalid_ipv4";if(_.contains(gre.lans,value))return"apps_partner_ip_is_router_ip";if("VPNIP"==type){if(value==gre.rule.VPNPeerIP)return"gre_ip_addr_same_gre_remote_gw";if(""==gre.rule.VPNIPMask)return null;if(funcs.ipv4.subnet.getNetworkAddress(value,gre.rule.VPNIPMask)==value)return"msg_invalid_ipv4"}else{if(""==gre.rule.Route.DestMask)return null;if(funcs.ipv4.subnet.getNetworkAddress(value,gre.rule.Route.DestMask)!=value)return"msg_invalid_ipv4_subnet"}break;case"Gateway":if(!funcs.is.ipv4(value))return"msg_invalid_ipv4";if(""!=gre.rule.VPNIPAddr&&funcs.is.ipv4(gre.rule.VPNIPAddr)&&""!=gre.rule.VPNIPMask&&funcs.is.mask(gre.rule.VPNIPMask)&&(range=funcs.ipv4.subnet.getNetworkRange(gre.rule.VPNIPAddr,gre.rule.VPNIPMask),!funcs.ipv4.subnet.belongNetworkRange(range,value)))return"msg_error_gateway_ip_address_out_of_range";if(value==gre.rule.VPNIPAddr)return"gre_ip_addr_same_gre_remote_gw";break;case"Name":if(!util.checkUnique(value,index,type))return"msg_error_value_is_not_uniq";break;case"Iface":if(!util.checkUnique(gre.rule.IP,index,"Iface")&&-1!=gre.rule.IP.indexOf("Connection"))return"msg_error_value_is_not_uniq";break;case"PeerIP":if(!util.checkUnique(gre.rule.PeerIP,index,"PeerIP"))return"msg_error_value_is_not_uniq"}return null},getRuleLabel:function(){return translate("gre_access_traffic",{source:translate("gre_nav"),dest:translate("lan_nav"),abr:["source","dest"]})},isShow:function(param){return!_.isNull(funcs.fetchBranch($scope.greRule.rule,param))}};var gre=$scope.greRule;!function(){function __activate(){_.isUndefined(index)?(gre.rule=util.getTemplate(),gre.action="add"):(gre.rule=util.getRule(index),gre.action="edit"),devinfo.once("net").then(function(data){gre.lans=_.pluck(data.lan,"ip")}),gre.ConnList=util.getConnList(),__initialRule=angular.copy(gre.rule),gre.isActivate=!0,$scope.$emit("pageload")}function errorPull(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})}util.getActivate()?__activate():util.pull().then(__activate)["catch"](errorPull)}()}])}();