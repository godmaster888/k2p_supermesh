"use strict";!function(){angular.module("app").service("GreUtil",["cpe","device","funcs","devinfo",function(cpe,device,funcs,devinfo){function getData(){return config?config.tunnels:{}}function getRule(index){return config?_.find(config.tunnels,function(elem){return elem.__id==index}):getTemplate()}function getConnList(){return config?config.conns:{}}function getGateway(){return config?config.gateway:{}}function applyRule(rule,index){var id;return _.isUndefined(index)?config.tunnels.push(rule):(id=_.findIndex(config.tunnels,function(elem){return elem.__id==index}),config.tunnels[id]=rule),config}function apply(settings){function splitDiff(diff){var isDelete,fw;return _.has(diff.Device,"Firewall")&&diff.Device.Firewall.IPv4.Rules&&(isDelete=_.some(diff.Device.Firewall.IPv4.Rules,function(elem,key){return-1!=key.indexOf("-")}))?(fw={},funcs.setValue("Device.Firewall",diff.Device.Firewall,fw),funcs.cutBranch(diff,"Device.Firewall."),[fw].concat(diff)):diff}var data=converter.nativeToDsysinit(settings),oldData=converter.nativeToDsysinit(__initNativeData),diff=funcs.newConfig.makeDiff(oldData,data,attrs);return diff=splitDiff(diff),_.size(diff)?cpe.ApplyDifference(diff):Promise.resolve()}function getTemplate(){var template={IP:"",VPNIPAddr:"",VPNIPMask:"",VPNPeerIP:"",PeerIP:"",Enable:!0,Route:{DestIP:"",DestMask:""},MTU:1400,Name:function(){return"GRE".split(" ").join("_")+"_"+Math.round(100*Math.random())}()};return config&&"Firewall"!=config.mode&&(template.FWRule=!0),template}function removeTunnels(keys){return _.each(keys.sort().reverse(),function(key){config.tunnels.splice(key,1)}),apply(config)}function checkUnique(value,index,type){var input=funcs.deepClone(config.tunnels),id=_.findIndex(config.tunnels,function(elem){return elem.__id==index});return-1!=id&&(input=_.omit(input,id)),_.every(input,function(elem){return"Name"==type?elem.Name!=value:"Iface"==type?elem.IP!=value:"PeerIP"==type?elem.PeerIP!=value:void 0})}var config=null,attrs=null,__initNativeData=null,isActivate=!1,converter=device.gre.converter,paths={conns:"Device.Network.Connection.",gre:"Device.Network.Connection.GRE.",fw:"Device.Firewall.IPv4.",group:"Device.Network.Group.",devMode:"Device.DeviceInfo.DeviceMode"};return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return funcs.deepClone(data),config=converter.dsysinitToNative(data),__initNativeData=funcs.deepClone(config),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),isActivate=!0,Promise.resolve()}function error(response){var error=response&&response.error?response.error:{};return Promise.reject(error)}return Promise.all([cpe.GetParameterValues([paths.conns,paths.fw,paths.group,paths.devMode]),cpe.GetParameterAttributes([paths.gre,paths.fw,paths.group])]).then(success,error)},applyRule:applyRule,apply:apply,getData:getData,getRule:getRule,getGateway:getGateway,getActivate:function(){return isActivate},getTemplate:getTemplate,removeTunnels:removeTunnels,subscribeInfo:function(cb,$scope){devinfo.subscribe(paths.fw+"|"+paths.group+"|"+paths.devMode+"|"+paths.conns,function(response){var group,fw,conns,input,data;response&&response[paths.conns]&&(group=funcs.splitTree(response[paths.group]),fw=funcs.splitTree(response[paths.fw]),conns=funcs.splitTree(response[paths.conns]),input=funcs.buildTree(conns.concat(group,fw)),data=converter.dsysinitToNative(input),cb&&cb(data))},$scope)},unsubscribeInfo:function(){devinfo.unsubscribe(paths.conns,paths.fw,paths.group,paths.devMode)},getConnList:getConnList,checkUnique:checkUnique}}])}();