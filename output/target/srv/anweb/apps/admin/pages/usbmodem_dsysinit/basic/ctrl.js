"use strict";!function(){angular.module("app").controller("USBModemSettingsCtrl",["$scope","$state","device","USBModemUtil","ngDialog","translate","snackbars","scheduler","funcs",function($scope,$state,device,util,ngDialog,translate,snackbars){function activate(){function init(){usbmodemSettings.activeModem||(usbmodemSettings.activeModem=inx),usbmodemSettings.Autoconnect||(usbmodemSettings.Autoconnect=util.getAutoconnectInfo()),usbmodemSettings.data=util.getModem(inx),usbmodemSettings.simList=getSimList(),usbmodemSettings.activeSIM=getActiveSIMInfo(),!usbmodemSettings.activeSIM||"PIN"!=usbmodemSettings.activeSIM.PIN.Status&&"PUK"!=usbmodemSettings.activeSIM.PIN.Status||(usbmodemSettings.getPINEntryName=translate("PIN"==usbmodemSettings.activeSIM.PIN.Status?"usb_modem_pin_input":"usb_modem_pin_puk_input"),pinEntry()),util.subscribeInfo(updateCellInfo,$scope),$scope.usbmodemSettings.isActivate=!0,$scope.$emit("pageload")}util.pull(inx).then(init)}function updateCellInfo(data){var id=usbmodemSettings.data.__inx,modemInfo=_.find(data.Modems,{__inx:id});modemInfo&&(usbmodemSettings.data.Cell=modemInfo.Cell,usbmodemSettings.data.Status=modemInfo.Status,usbmodemSettings.data.Power=modemInfo.Power)}function getSimList(){function changeGW(){usbmodemSettings.data.isGW&&ngDialog.open({template:"dialogs/usbmodem_dsysinit/change_sim/dialog.tpl.html",controller:"USBModemChangeSIMCtrl"})}var list=_.map(usbmodemSettings.data.SIM,function(elem){return{label:elem.Name,value:elem.__inx}});return{list:list,value:list.length>1?usbmodemSettings.data.ActiveSIM:"1",update:function(){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.updateActiveSIM(usbmodemSettings.data.__inx,usbmodemSettings.simList.value).then(changeGW).then(activate)["finally"](overlay.stop.bind(overlay,overlayId))}}}function getActiveSIMInfo(){return _.find(usbmodemSettings.data.SIM,{__inx:usbmodemSettings.data.ActiveSIM})}function goToUSSD(){$state.go(currentState+".ussd",{modem:inx})}function getLink(type){return"sms"==type?"usbmodem.sms({modem: "+inx+"})":void 0}function getPINStatus(sim){if(!sim)return"ipsec_status_unknown";switch(sim.PIN.Status){case"Ready":return"usb_modem_pin_unlocked";case"PIN":case"PUK":return"usb_modem_pin_locked";case"Unknown":return"ipsec_status_unknown"}}function changeLocked(){ngDialog.open({template:"/admin/dialogs/usbmodem_dsysinit/request_pin/dialog.tpl.html",controller:"RequestPinCtrl",data:{data:{pin:usbmodemSettings.activeSIM.PIN,modem:inx,sim:usbmodemSettings.activeSIM.__inx}},scope:$scope}).closePromise.then(function(data){data.value&&data.value.change&&activate()})}function pinChange(){ngDialog.open({template:"/admin/dialogs/usbmodem_dsysinit/change_pin/dialog.tpl.html",controller:"ChangePinCtrl",data:{data:{pin:usbmodemSettings.activeSIM.PIN,modem:inx,sim:usbmodemSettings.activeSIM.__inx}},scope:$scope}).closePromise.then(function(data){data.value&&data.value.change&&snackbars.add("usb_modem_pin_change_ok")})}function pinEntry(){ngDialog.open({template:"/admin/dialogs/usbmodem_dsysinit/entry_pin/dialog.tpl.html",controller:"EntryPinCtrl",data:{data:{pin:usbmodemSettings.activeSIM.PIN,modem:inx,sim:usbmodemSettings.activeSIM.__inx}},scope:$scope}).closePromise.then(function(data){var input;data.value&&data.value.success?activate():(input={modem:inx,sim:usbmodemSettings.activeSIM.__inx,param:"PIN"},util.updateSIMInfo(input).then(function(response){usbmodemSettings.activeSIM.PIN=response,usbmodemSettings.getPINEntryName=translate("PIN"==usbmodemSettings.activeSIM.PIN.Status?"usb_modem_pin_input":"usb_modem_pin_puk_input")}))})}function changePowerMode(){ngDialog.open({template:"/admin/dialogs/usbmodem_dsysinit/change_power_mode/dialog.tpl.html",controller:"USBModemChangePowerCtrl",data:{path:"Device.USB.Modem."+usbmodemSettings.data.__inx+".State",power:usbmodemSettings.data.Power},scope:$scope}).closePromise.then(activate)}var inx=$state.params.modem,currentState=$state.current.name.split(".");currentState.pop(),currentState=currentState.join("."),$scope.usbmodemSettings={scheduler:{rules:{},commands:{},restore:{enable:!1,settings:[]},config:{},attrs:{}},data:null,activeModem:null,simList:null,Autoconnect:null,support:function(param){return util.support(param)},has:function(param){return _.has(usbmodemSettings.data,param)||_.has(usbmodemSettings.activeSIM,param)},empty:function(param){if(!usbmodemSettings.data)return!0;var data=usbmodemSettings.data[param]||usbmodemSettings.data.Cell[param];return data?_.isEmpty(data.toString()):!0},getWithUnit:function(param,unit){return param?param+" "+translate(unit):"-"},getModemsList:function(){return util.getModemsList()},pinChange:pinChange,simListLength:function(){return usbmodemSettings.simList&&usbmodemSettings.simList.list.length},hasActiveSIM:function(){return usbmodemSettings&&_.has(usbmodemSettings,"activeSIM")},hasPIN:function(sim){return _.has(sim,"PIN")&&_.size(sim.PIN)},hasSMS:function(){var activeSIM=usbmodemSettings.activeSIM;return _.has(activeSIM,"SMS")&&_.size(activeSIM.SMS)},getPINStatus:getPINStatus,getPINRequest:function(sim){return 1==sim.PIN.Locked?"yes":"no"},changeLocked:changeLocked,changeModem:function(key){inx=key,activate()},getSMSInfo:function(sim){if(!sim)return"-";var smsInfo=-1!=sim.SMS.StorageUsed?sim.SMS.StorageUsed:sim.SMS.Read+sim.SMS.Sent+sim.SMS.Unread;return smsInfo>0?smsInfo:translate("ipsec_status_unknown")},getPINRequestTitle:function(sim){return translate(sim.PIN.Locked?"act_disable":"act_enable")+" "+translate("usb_modem_pin_request")},pinEntry:pinEntry,showDetails:function(item){var needPIN=void 0;needPIN=getPINStatus(item),ngDialog.open({template:"/admin/dialogs/usbmodem_dsysinit/details_sim/dialog.tpl.html",controller:"DetailsSimCtrl",className:"details_sim_dialog nw-static-mobile-collapse",data:{data:{Name:item.Name,IMSI:item.IMSI,PIN:needPIN,SMS:usbmodemSettings.hasSMS()&&autoconf.BR2_PACKAGE_ANWEB_USB_MODEM_SMS?usbmodemSettings.getSMSInfo(item):void 0}},scope:$scope}).closePromise},getLink:getLink,goToUSSD:goToUSSD,powerChange:function(){var action=usbmodemSettings.data.Power?"on":"off",overlay=$scope.overlay.circular,overlayId=overlay.start();usbmodemSettings.data.Scheduler&&util.changeScheduleState(usbmodemSettings.data.Scheduler,usbmodemSettings.data.Power),util.powerChange(action,usbmodemSettings.data.__inx).then(changePowerMode)["catch"](function(){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})})["finally"](overlay.stop.bind(overlay,overlayId))},getPINEntryName:"",setSchedule:function(){var options={command:usbmodemSettings.scheduler.restore.settings,nameCmd:"exec",config:usbmodemSettings.scheduler.config,attrs:usbmodemSettings.scheduler.attrs,modem:usbmodemSettings.data.__inx};ngDialog.open({template:"dialogs/schedule_form/dialog.tpl.html",controller:"ScheduleFormDialogCtrl",scope:$scope,data:options,className:"schedule-dialog-width"})},getLabel:function(type){return"enable"==type?translate("act_enable")+" "+translate("usb_modem_power"):translate("act_disable")+" "+translate("usb_modem_power")},isActivate:!1,changeAutoconnect:function(value){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.applyAutoconnect(value).then(activate)["finally"](overlay.stop.bind(overlay,overlayId))}};var usbmodemSettings=$scope.usbmodemSettings;activate()}])}();