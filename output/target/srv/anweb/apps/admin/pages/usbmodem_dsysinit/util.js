"use strict";!function(){angular.module("app").service("USBModemUtil",["cpe","funcs","devinfo","device",function(cpe,funcs,devinfo,device){function getConfig(){return config?config:{}}function getSchedule(){if(!__initConfig)return{};var result={};return funcs.setValue(paths.scheduler,funcs.fetchBranch(__initConfig,paths.scheduler),result),funcs.setValue(paths.commands,funcs.fetchBranch(__initConfig,paths.commands),result),result}function getScheduleAttrs(){if(!__initAttrs)return{};var result={};return funcs.setValue(paths.scheduler,funcs.fetchBranch(__initAttrs,paths.scheduler),result),funcs.setValue(paths.commands,funcs.fetchBranch(__initAttrs,paths.commands),result),result}function getAutoconnectInfo(){return config?config.Autoconnect:!1}function support(param){return _.has(attrs,param)}function getModem(inx){return inx&&config?_.find(config.Modems,{__inx:inx}):{}}function getModemsList(){return config?config.modemsList:{}}function getActivate(){return isActivate}var config=null,attrs=null,__initConfig=null,__initAttrs=null,converter=device.usbmodem.converter,isActivate=!1,paths={modem:"Device.USB.Modem.",iface:"Device.USB.Connection.",group:"Device.Network.Group.1.",scheduler:"Device.System.Scheduler.",commands:"Device.System.Command.",autoconnect:"Device.USB.AutoConnect.Enable"};return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return __initConfig=funcs.deepClone(data),config=converter.dsysinitToNative(data),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),__initAttrs=funcs.deepClone(attrs),attrs=converter.attrsToNative(attrs),isActivate=!0,Promise.resolve()}var modemPath=paths.modem,configPaths=[modemPath,paths.iface,paths.group],attrsPaths=[paths.modem];return Promise.all([cpe.GetParameterValues(configPaths),cpe.GetParameterAttributes(attrsPaths)]).then(success,function(){return Promise.reject()})},apply:function(){return Promise.resolve()},applyAutoconnect:function(value){var result={};return funcs.setValue(paths.autoconnect,value,result),cpe.ApplyDifference(result)},subscribeInfo:function(cb,$scope){devinfo.subscribe(paths.modem+"|"+paths.iface,function(response){var modem,ifaces,input,data;response&&response[paths.modem]&&(modem=funcs.splitTree(response[paths.modem]),ifaces=funcs.splitTree(response[paths.iface]),input=funcs.buildTree(modem.concat(ifaces)),data=converter.dsysinitToNative(input),cb&&cb(data))},$scope)},unsubscribeInfo:function(cb){devinfo.unsubscribe(paths.modem+"|"+paths.iface,cb)},subscribeSMSInfo:function(cb,$scope,path){devinfo.subscribe(path,function(response){var data;response&&response[path]&&(data=funcs.fetchBranch(response[path],path),cb&&cb(data))},$scope)},getConfig:getConfig,support:support,updateActiveSIM:function(modemInx,activeSIM){var path=paths.modem+modemInx+".ActiveSIM",result={};return activeSIM=parseInt(activeSIM),funcs.setValue(path,activeSIM,result),cpe.ApplyDifference(result)},getModem:getModem,getModemsList:getModemsList,isActivate:getActivate,lockedPIN:function(data){var path=paths.modem+data.modem+".SIM."+data.sim+".PIN.Lock",params=[];return params.push({Name:"PIN",Value:data.pin}),params.push({Name:"Enable",Value:data.locked}),cpe.Execute(path,params)},changePIN:function(data){var path=paths.modem+data.modem+".SIM."+data.sim+".PIN.Change",params=[];return params.push({Name:"Old",Value:data.pin}),params.push({Name:"New",Value:data.newPin}),cpe.Execute(path,params)},entryPIN:function(data){var path=paths.modem+data.modem+".SIM."+data.sim+".PIN.Verify",params=[];return"PIN"==data.status?params.push({Name:"PIN",Value:data.pin}):(params.push({Name:"PUK",Value:data.pin}),params.push({Name:"PIN",Value:data.newPin})),cpe.Execute(path,params)},updateSIMInfo:function(data){var path=paths.modem+data.modem+".";return Promise.all([cpe.GetParameterValues([path])]).then(function(response){var activeSIM,params=funcs.buildTree(response[0].result.ParameterList),resp=converter.dsysinitToNative(params),modem=_.find(resp.Modems,{__inx:data.modem}),sim={};if(modem)sim=_.find(modem.SIM,{__inx:data.sim});else{if(modem=funcs.fetchBranch(params,path),!modem)return Promise.reject();activeSIM=modem.SIM[data.sim],sim={PIN:{Locked:activeSIM.PIN.Locked,PIN:activeSIM.PIN.PINLeft,PUK:activeSIM.PIN.PUKLeft,Status:activeSIM.PIN.Status}}}return Promise.resolve(sim[data.param])},function(){return Promise.reject()})},sendUssd:function(data){var path=paths.modem+data.modem+".USSD",params=[];return params.push({Name:"Code",Value:data.code}),cpe.Execute(path,params)},getMessages:function(data){var path=paths.modem+data.modem+".SIM."+data.sim+".SMS.List";return cpe.Execute(path,[])},removeMessages:function(data){var path=paths.modem+data.modem+".SIM."+data.sim+".SMS.Remove",queue=_.map(data.items,function(elem){var indexes=_.map(elem.Indexes,function(obj,key){return{Name:"Index."+(key+1)+".Value",Value:obj}});return cpe.Execute(path,indexes)});return Promise.all(queue)},sendSMS:function(data){var path=paths.modem+data.modem+".SIM."+data.sim+".SMS.Send",queue=_.map(data.numbers,function(elem){var params=[],number="7"==elem.Number[0]?"+"+elem.Number:elem.Number;return params.push({Name:"Number",Value:number}),params.push({Name:"Text",Value:data.text}),cpe.Execute(path,params)});return Promise.all(queue)},powerChange:function(action,modem){var path=paths.modem+modem+"."+("on"==action?"PowerOn":"PowerOff");return cpe.Execute(path)},getSchedule:getSchedule,getScheduleAttrs:getScheduleAttrs,changeScheduleState:function(scheduleKey,state){var output={};return funcs.setValue(paths.scheduler+"Commands."+scheduleKey,{Enable:state},output),output=funcs.splitTree(output),cpe.SetParameterValues(output)},getAutoconnectInfo:getAutoconnectInfo}}])}();