"use strict";!function(){angular.module("app").controller("loadBalancingRuleCtrl",["$scope","$state","funcs","loadBalancingUtil","ngDialog","translate",function($scope,$state,funcs,util,ngDialog,translate){function activate(){function __activate(){balance.rule=util.getRule(__index),balance.data=util.getData(),__backupRule=angular.copy(balance.rule),balance.isMultiLAN=util.isMultiLAN(),balance.isActivate=!0,!balance.isMultiLAN&&_.has(balance.rule,"__id")&&util.subscribeInfo(balance.rule.__id,function(response){var currentRule=_.find(response.Rules,{__id:balance.rule.__id});currentRule&&(balance.rule.Status=currentRule.Status,balance.rule.StatusText=currentRule.StatusText)},$scope),$scope.$emit("pageload")}function error(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})}return util.wasActivate()?void __activate():void util.pull().then(__activate)["catch"](error)}function wasModified(){return balance.rule&&__backupRule&&_.some(angular.copy(balance.rule),function(elem,key){return"Status"==key||"StatusText"==key?!1:"WAN"==key?function(list1,list2){return list1=angular.copy(list1),list2=angular.copy(list2),list1.length!=list2.length?!0:_.some(list1,function(obj,key){return!_.isEqual(obj,list2[key])})}(elem,__backupRule[key]):!_.isEqual(elem,__backupRule[key])})}function openDialog(index,item){ngDialog.open({template:"/admin/dialogs/load_balancing/dialog.tpl.html",controller:"loadBalancingConnCtrl",resolve:funcs.getLazyResolve("dialogs/load_balancing/ctrl.lazy.js","loadBalancingConnCtrl"),data:{data:item,index:index,wanList:function(wans,initEnable){var elem,obj,result=[];for(var i in wans)elem=wans[i],obj={},elem.LinkUSB&&!initEnable?(obj.Value=elem.LinkUSB,obj.Name=elem.Name):obj=elem,result.push(obj);return result}(balance.data.WAN,balance.rule.InitEnable),busyConns:balance.rule.WAN},scope:$scope}).closePromise.then(function(data){data&&data.value&&(null!=index?balance.rule.WAN[index]=data.value:balance.rule.WAN.push(data.value))})}$scope.balanceRule={rule:null,data:null,isMultiLAN:null,wasModified:wasModified,apply:function(){function success(){var state;balance.data.LAN.length>1?(state=currentState+".balance",$state.go(state)):activate()}if(!$scope.balanceForm.$invalid){if(balance.rule.Enable&&balance.rule.WAN.length<2)return void alert(translate("load_balancing_warning_wan_list"));var overlay=$scope.overlay.circular,overlayId=overlay.start(),index=util.isMultiLAN()?__index:"0",applyObj=util.applyRule(balance.rule,index);util.apply(applyObj).then(success)["catch"](function(){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})})["finally"](overlay.stop.bind(overlay,overlayId))}},getIfaceName:function(wan){var elem,ifaces=balance.data.WAN;for(var i in ifaces)if(elem=ifaces[i],elem.Value==wan||elem.LinkUSB==wan)return elem.Name;return"-"},add:function(){openDialog(null,{Link:"",Weight:1,WeightType:"auto"})},edit:function(item,key){openDialog(key,item)},remove:function(items,keys){keys=_.sortBy(keys),_.each(keys.reverse(),function(key){balance.rule.WAN.splice(key,1)})},addDisabled:function(){return balance.rule&&balance.data&&balance.rule.WAN.length==balance.data.WAN.length},checkLAN:function(){var index=util.isMultiLAN()?__index:"0";return util.isUniqueLAN(balance.rule.LAN,index)?null:translate("msg_error_value_is_not_uniq")},isActivate:!1};var balance=$scope.balanceRule,__index=_.isUndefined($state.params.inx)?void 0:parseInt($state.params.inx),__backupRule=null,currentState=$state.current.name.split(".");currentState.pop(),currentState.pop(),currentState=currentState.join("."),activate()}])}();