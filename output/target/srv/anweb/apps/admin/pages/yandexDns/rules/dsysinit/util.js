"use strict";!function(){angular.module("app").service("yandexDnsRulesUtil",["cpe","funcs","device",function(cpe,funcs,device){function push(settings){var inputData={__id:config.__id,rules:settings},input=converter.nativeToDsysinit.rules(inputData),init=converter.nativeToDsysinit.rules(__initConfig),diff=funcs.newConfig.makeDiff(init,input,attrs);return cpe.ApplyDifference(diff)}function getConfig(){return config?config:{}}function setRules(rules){config||(config={}),config.rules=funcs.deepClone(rules)}var config=null,attrs=null,__initConfig=null,paths={dns:"Device.Network.Server.DNS.",clients:"Device.Statistics.Neighbours.",iface:"Device.Network.Interface."},converter=device.yandexDns.converter,_availableModes=[{value:"off",label:"yadns_protection_off_mode"},{value:"safe",label:"yadns_safe_mode"},{value:"child",label:"yadns_child_mode"}];return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),config=converter.dsysinitToNative.rules(data),__initConfig=funcs.deepClone(config),Promise.resolve()}return Promise.all([cpe.GetParameterValues([paths.dns,paths.clients,paths.iface]),cpe.GetParameterAttributes([paths.dns])]).then(success,function(){return Promise.reject()})},push:push,getConfig:getConfig,getAvailableModes:function(){return _availableModes},setRules:setRules}}])}();