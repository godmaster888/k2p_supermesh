"use strict";!function(){function yandexDnsRulesController($scope,ngDialog,translate,device,funcs,util){function refreshData(){util.pull().then(activate)}function activate(){$scope.yandexDns=mapToModel(),__initialRules=angular.copy($scope.yandexDns.rules),$scope.loading=!1,$scope.$emit("pageload")}function getModeName(mode){return translate(yandexModes[mode])}function ruleMap(rule){return rule?_.extend(_.pick(rule,"ip","mac","host","mode","__id"),{modeName:getModeName(rule.mode)}):null}function clientMap(client){var rule=_.findWhere(util.getConfig().rules,{mac:client.mac.toUpperCase()});return _.extend({},client,{rule:ruleMap(rule)})}function getUniqueItemByMac(arr,param){var i,j,n=arr.length,k=0,b=[];for(i=0;n>i;i++){for(j=0;k>j&&b[j][param].toUpperCase()!==arr[i][param].toUpperCase();)j++;j==k&&(b[k]=arr[i],k++)}return b}function mapToModel(){var config=util.getConfig(),rules=_.map(config.rules,ruleMap),clients=_.map(config.clients,clientMap),settings=config.settings;return $scope.rules=getUniqueItemByMac(rules,"mac"),$scope.clients=getUniqueItemByMac(clients,"mac"),_.each(rules,function(rule){_.each($scope.rules,function(data){data.ipList=data.ipList||[],data.mac==rule.mac&&data.ipList.push(rule.ip)})}),_.each(clients,function(client){_.each($scope.clients,function(data){data.ipList=data.ipList||[],data.mac==client.mac&&data.ipList.push(client.ip)})}),{"default":settings["default"],enabled:settings.enabled,clients:clients,rules:rules}}function editRule(rule){var dlg=ngDialog.open({template:"dialogs/yandex_rule_edit/dialog.tpl.html",controller:"yandexRuleDialogController",resolve:funcs.getLazyResolve("dialogs/yandex_rule_edit/ctrl.lazy.js","yandexRuleDialogController"),preCloseCallback:function(dlgRule){var duplicate=!!dlgRule&&dlgRule.isNew&&_.some($scope.yandexDns.rules,function(r){return r.mac==dlgRule.mac&&r.ip==dlgRule.ip});return duplicate?(alert(translate("yadns_rule_exists_2")),!1):!0},data:{rule:rule,rules:$scope.rules}}),oldRule=angular.copy(rule);dlg.closePromise.then(function(result){function isContainsRulesIpv4(){var temp=!1;return _.each($scope.yandexDns.rules,function(rule){rule.mac==mappedRules[0].mac&&funcs.is.ipv4(rule.ip)&&(temp=!0)}),temp}if(result&&result.value&&!_.isString(result.value)){var oldRules,mappedRules=[],rules=$scope.yandexDns.rules,clients=_.map(util.getConfig().clients,clientMap);if(_.each(result.value,function(value){mappedRules.push(ruleMap(value))}),rule.isNew){if(oldRules=_.where(clients,{mac:oldRule.mac}),_.each(mappedRules,function(rule){_.findWhere(rules,{ip:rule.ip,mac:rule.mac})||rules.push(rule)}),oldRules.length>mappedRules.length)return _.each(rules,function(rule){rule.mac==mappedRules[0].mac&&(rule.host=mappedRules[0].host?mappedRules[0].host:rule.host,rule.mode=mappedRules[0].mode)}),void updateViewModel(rules);_.each(clients,function(client){var newMappedRule;client.mac==mappedRules[0].mac&&(newMappedRule={ip:client.ip,mac:client.mac,host:mappedRules[0].host,mode:mappedRules[0].mode},_.findWhere(rules,{ip:newMappedRule.ip,mac:newMappedRule.mac})||_.findWhere(oldRules,{ip:newMappedRule.ip})||isContainsRulesIpv4()||rules.push(newMappedRule))}),_.each(rules,function(rule){rule.mac==mappedRules[0].mac&&(rule.host=mappedRules[0].host?mappedRules[0].host:rule.host,rule.mode=mappedRules[0].mode)})}else rules=_.filter(rules,function(rule){return rule.mac!=oldRule.mac}),_.each(mappedRules,function(rule){rules.push(rule)});updateViewModel(rules)}})}function updateViewModel(rules){util.setRules(rules),$scope.yandexDns=mapToModel()}function saveEnabled(){function normalizeModel(item){return _.pick(item,"ip","mac","mode","host")}return __initialRules&&__initialRules.length!=$scope.yandexDns.rules.length||_.some(__initialRules,function(ir){return!_.some($scope.yandexDns.rules,function(cr){return _.isEqual(normalizeModel(cr),normalizeModel(ir))})})}var __initialRules=null;device.yandexDns.rules;var yandexModes={};_.each(util.getAvailableModes(),function(item){yandexModes[item.value]=item.label}),$scope.showIpList=function(item){return _.uniq(item.ipList)},_.extend($scope,{createRule:function(){var rule={isNew:!0,mode:$scope.yandexDns["default"]};editRule(rule)},editRule:editRule,editRuleForClient:function(client){if(!client.rule){var rule={ip:client.ip,mac:client.mac,mode:$scope.yandexDns["default"],isNew:!0,ipList:client.ipList,host:client.hostname};editRule(rule)}},removeRules:function(deletedRules){var rules=_.reject($scope.yandexDns.rules,function(rule){return!!_.findWhere(deletedRules,{mac:rule.mac})});updateViewModel(rules)},getDefaultModeString:function(){return translate("by_default")+" ("+getModeName($scope.yandexDns["default"])+")"},saveRules:function(){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.push($scope.rules).then(refreshData)["finally"](overlay.stop.bind(overlay,overlayId))},yandexDns:{},loading:!0,saveEnabled:saveEnabled,isNotEmpty:function(value){return value&&""!=value}}),device.safeDns&&_.isFunction(device.safeDns.pullEnabled)&&device.safeDns.pullEnabled().then(function(enabled){enabled?($scope.ydSafeDNSWarning=!0,$scope.$emit("pageload")):refreshData()}),refreshData()}angular.module("app").controllerProvider.register("yandexDnsRulesController",yandexDnsRulesController),yandexDnsRulesController.$inject=["$scope","ngDialog","translate","device","funcs","yandexDnsRulesUtil"]}();