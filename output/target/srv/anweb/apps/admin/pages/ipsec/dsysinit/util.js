"use strict";!function(){angular.module("app").service("IPsecUtil",["cpe","device","funcs","devinfo",function(cpe,device,funcs,devinfo){function wasActivate(){return activate}function apply(settings){function splitDiff(diff,settings){var diffs=funcs.deepClone(diff);return diffs=subnetDeleted(diffs),diffs=createZone(diffs,settings),diffs=setEnabled(diffs,settings)}function subnetDeleted(diff){var delSubnets={},input=funcs.deepClone(diff);return input.Device&&input.Device.Network&&_.each(input.Device.Network.Connection.IPsec,function(elem,key){_.each(elem.LeftSubnet,function(net,id){var netPath;/-/.test(id)&&(netPath=paths.ipsec.connections+key+".LeftSubnet."+id,funcs.setValue(netPath,{},delSubnets),funcs.cutBranch(diff,netPath+"."))}),_.each(elem.RightSubnet,function(net,id){var netPath;/-/.test(id)&&(netPath=paths.ipsec.connections+key+".RightSubnet."+id,funcs.setValue(netPath,{},delSubnets),funcs.cutBranch(diff,netPath+"."))})}),_.size(delSubnets)?[delSubnets].concat([diff]):diff}function createZone(diff,settings){var input=funcs.deepClone(_.isArray(diff)?diff[1]:diff),zones=funcs.fetchBranch(input,paths.fwZones),zonesIPv6=funcs.fetchBranch(input,paths.fwZonesIPv6),isIPv6=!1;if(_.each(settings,function(elem){_.isArray(elem)&&_.has(elem[0],"ipv6")&&(isIPv6=elem[0].ipv6)}),!isIPv6&&_.isEmpty(zones))return diff;if(isIPv6&&_.isEmpty(zonesIPv6))return diff;var isAdd=_.findKey(zones,function(elem,id){return-1!=id.indexOf("+")}),isAddIPv6=_.findKey(zonesIPv6,function(elem,id){return-1!=id.indexOf("+")});if(!isIPv6&&!isAdd)return diff;if(isIPv6&&!isAddIPv6)return diff;var ifaces=isIPv6?zonesIPv6[isAddIPv6].Interfaces:zones[isAdd].Interfaces,tunnels=_.has(input.Device,"Network")?funcs.fetchBranch(input,paths.common):void 0,services=_.has(input.Device,"Services")?funcs.fetchBranch(input,paths.services):void 0,rules=!isIPv6&&_.has(input.Device.Firewall.IPv4,"Rules")?funcs.fetchBranch(input,paths.firewall+"Rules."):_.has(input.Device.Firewall.IPv6,"Rules")?funcs.fetchBranch(input,paths.firewallIPv6+"Rules."):void 0,result={};return isIPv6||(funcs.setValue(paths.fwZones+(settings.firewall.ipv4.maxInstZone+1)+".Interfaces",ifaces,result),funcs.cutBranch(_.isArray(diff)?diff[1]:diff,paths.fwZones+isAdd+".Interfaces.")),isIPv6&&(funcs.setValue(paths.fwZonesIPv6+(settings.firewall.ipv6.maxInstZone+1)+".Interfaces",ifaces,result),funcs.cutBranch(_.isArray(diff)?diff[1]:diff,paths.fwZonesIPv6+isAddIPv6+".Interfaces.")),tunnels&&(funcs.setValue("Device.Network",tunnels,result),funcs.cutBranch(diff,paths.common)),services&&(funcs.setValue("Device.Services.IPsec",services,result),funcs.cutBranch(diff,"Device.Services.")),rules&&(isIPv6||(funcs.setValue(paths.firewall+"Rules",rules,result),funcs.cutBranch(diff,paths.firewall+"Rules.")),isIPv6&&(funcs.setValue(paths.firewallIPv6+"Rules",rules,result),funcs.cutBranch(diff,paths.firewallIPv6+"Rules."))),_.isArray(diff)?diff.concat(result):[diff].concat(result)}function setEnabled(diff,settings){var input=funcs.deepClone(diff),tunnels=_.isArray(input)?funcs.fetchBranch(_.last(input),paths.ipsec.connections):funcs.fetchBranch(input,paths.ipsec.connections);if(_.isEmpty(tunnels))return diff;var isAdd=_.findKey(tunnels,function(elem,id){return-1!=id.indexOf("+")}),tunnel=_.find(settings.tunnels,function(elem){return _.isUndefined(elem.__index)});if(!isAdd||!tunnel)return diff;var result={};return funcs.setValue(paths.ipsec.connections+(settings.maxInstTunnel+1)+".Enable",tunnel.enable,result),_.isArray(diff)?diff.concat(result):[diff].concat(result)}var data=converter.nativeToDsysinit(settings),oldData=converter.nativeToDsysinit(__initNativeData),diff=funcs.newConfig.makeDiff(oldData,data,attrs);return diff=splitDiff(diff,settings),Promise.all([cpe.ApplyDifference(diff)]).then(function(){return Promise.resolve()},function(response){return Promise.reject(response.error?response.error:"unknown error")})}function makeHelper(){return new device.ipsec.Helper(config,attrs,__initCpeData)}var activate=!1,config=null,attrs=null,__initCpeData=null,__initNativeData=null,paths=device.ipsec.constants.paths,converter=device.ipsec.converter;return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return __initCpeData=funcs.deepClone(data),config=converter.dsysinitToNative(data),__initNativeData=funcs.deepClone(config),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),activate=!0,Promise.resolve()}function error(response){var error=response&&response.error?response.error:{};return Promise.reject(error)}return Promise.all([cpe.GetParameterValues([paths.common,paths.services,paths.devMode,paths.fwZones,paths.fwPolicy,paths.fwRules,paths.fwZonesIPv6,paths.fwPolicyIPv6,paths.fwRulesIPv6,paths.countryCode]),cpe.GetParameterAttributes([paths.common,paths.services,paths.fwZones,paths.fwPolicy,paths.fwRules,paths.fwZonesIPv6,paths.fwPolicyIPv6,paths.fwRulesIPv6])]).then(success,error)},apply:apply,wasActivate:wasActivate,makeHelper:makeHelper,subscribeInfo:function(cb,$scope){function prepareData(response){var newIpsec,helper,status;response&&response[paths.ipsec.connections]&&(newIpsec=response[paths.ipsec.connections],newIpsec=converter.dsysinitToNative(newIpsec),helper=device.ipsec.Helper(newIpsec,attrs,__initCpeData),status=helper.getTunnelsStatus(),cb&&cb(status))}devinfo.subscribe(paths.ipsec.connections,prepareData,$scope)},subscribeIface:function(cb,$scope){function prepareData(response){var conns,groups,ip,input,data,helper,tunnels;response&&response[paths.interfaces]&&response[paths.group]&&response[paths.ipAddress]&&(conns=funcs.splitTree(response[paths.interfaces]),groups=funcs.splitTree(response[paths.group]),ip=funcs.splitTree(response[paths.ipAddress]),input=funcs.buildTree(conns.concat(groups,ip)),data=converter.dsysinitToNative(input),_.isEqual(__initNativeData.tunnels,data.tunnels)||(helper=device.ipsec.Helper(data,attrs,__initCpeData),tunnels=helper.getTunnels(),cb&&cb(tunnels)))}devinfo.subscribe(paths.interfaces+"|"+paths.ipAddress+"|"+paths.group,prepareData,$scope)},unsubscribe:function(){devinfo.unsubscribe(paths.ipsec.connections,paths.interfaces,paths.groups)},reconnect:function(items){function getLinks(items){return _.map(items,function(elem){return"Device.Network.Connection.IPsec."+elem.__id})}function setEnabled(links,status){return cpe.SetParameterValues(makeApplyValues(links,status))}function makeApplyValues(links,status){var output={};return _.each(links,function(link){funcs.setValue(link,{Enable:status},output)}),funcs.splitTree(output)}_.isArray(items)||(items=[items]);var links=getLinks(items);return setEnabled(links,!1).then(function(){return setEnabled(links,!0)})}}}])}();