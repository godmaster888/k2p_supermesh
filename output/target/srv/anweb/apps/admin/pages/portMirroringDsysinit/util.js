"use strict";!function(){angular.module("app").service("PortMirroringUtil",["cpe","device","devinfo","funcs",function(cpe,device,devinfo,funcs){function getInitConfig(){return __initConfig?__initConfig:{}}function getData(){return config?config:{}}function getTypes(){return attrs?attrs.Device.Switch.PortMirror["#template"].Source["#template"].Mode["enum"]:[]}function getPorts(){return config?config.Ports:[]}function apply(settings){var data=converter.nativeToDsysinit(settings),diff=funcs.newConfig.makeDiff(__initConfig,data,attrs);if(!Object.keys(diff).length)return Promise.resolve();var mirrors=funcs.fetchBranch(diff,paths.portmirror);for(var key in mirrors)for(var keySource in mirrors[key].Source)0>keySource&&funcs.setValue(""+paths.portmirror+key+".Source."+keySource+".",{},diff);return cpe.ApplyDifference(diff)}var config=null,attrs=null,converter=device.portMirroring.converter,__initConfig=null,paths={portmirror:"Device.Switch.PortMirror.",ports:"Device.Switch.Ports.",usb:"Device.USB."},configPaths=[paths.portmirror,paths.ports];return{pull:function(){function success(response){return config=funcs.buildTree(response[0].result.ParameterList),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),__initConfig=funcs.deepClone(config),config=converter.dsysinitToNative(config),Promise.resolve()}return Promise.all([cpe.GetParameterValues(configPaths,void 0,!0),cpe.GetParameterAttributes([paths.portmirror])]).then(success,function(){return Promise.reject()})},apply:apply,getData:getData,getTypes:getTypes,getPorts:getPorts,getInitConfig:getInitConfig}}])}();