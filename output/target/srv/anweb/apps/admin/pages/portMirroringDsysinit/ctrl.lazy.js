"use strict";function PortMirroringCtrl($scope,$state,funcs,util,translate){function activate(){util.pull().then(function(){var data=util.getData();mirroring.data=data.Mirroring,mirroring.ports=util.getPorts(),mirroring.types=util.getTypes(),mirroring.__initData=funcs.deepClone(mirroring.data),mirroring.isActivate=!0,$scope.$emit("pageload")})["catch"](function(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})})}function errorPush(){$state.go("error",{code:"msg_push_error",message:"msg_error_desc"})}$scope.mirroring={data:null,ports:null,__initData:null,isActivate:!1,apply:function(){if(!$scope.form.$invalid){var note,__initConfig=util.getInitConfig(),usbConns=_.filter(mirroring.data.Source,function(m){return/USB/.test(m.Link)&&"None"!=m.Mode}),isUSBnotMirroring=[];if(_.each(usbConns,function(elem){var conn=funcs.newConfig.normalize(funcs.fetchBranch(__initConfig,elem.Link)),modem=funcs.newConfig.normalize(funcs.fetchBranch(__initConfig,"Device.USB.Modem."));_.find(modem,function(m){return m.Connection==elem.Link&&conn.InterfaceOnly||m.Connection!=elem.Link})&&isUSBnotMirroring.push(elem.Name)}),_.isEmpty(isUSBnotMirroring)||(note=isUSBnotMirroring.join(", ")+" "+translate("port_mirroring_participating_note"),confirm(note))){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.apply(mirroring.data).then(activate)["catch"](errorPush)["finally"](overlay.stop.bind(overlay,overlayId))}}},wasModified:function(){function checkSource(source1,source2){var elem1,elem2;for(var i in source1)if(elem1=source1[i],elem2=source2[i],elem1.Mode!=elem2.Mode)return!0;return!1}var elem;if(!mirroring.data||!mirroring.__initData)return!1;for(var key in mirroring.data)if(elem=mirroring.data[key],"Source"==key){if(checkSource(elem,mirroring.__initData[key]))return!0}else if(elem!=mirroring.__initData[key])return!0;return!1},getPortIcon:function(port){return"DSL"==port.Name?"dsl":"ethernet"},changeEnabled:function(){var overlay=$scope.overlay.circular,overlayId=overlay.start();util.apply(mirroring.data).then(activate)["catch"](errorPush)["finally"](overlay.stop.bind(overlay,overlayId))},getTargetPorts:function(){return mirroring.ports.filter(function(p){return!!mirroring.data.Source.find(function(s){return s.Link==p.Link&&"None"==s.Mode})})}};var mirroring=$scope.mirroring;activate()}angular.module("app").controllerProvider.register("PortMirroringCtrl",["$scope","$state","funcs","PortMirroringUtil","translate",PortMirroringCtrl]);