"use strict";function ScheduleCtrl($scope,$state,funcs,scheduler,cpe,device,ngDialog){function pull(){return Promise.all([cpe.GetParameterValues(["Device.System.Scheduler.","Device.System.Command."]),cpe.GetParameterAttributes(["Device.System.Scheduler.","Device.System.Command."])])}function sortSchedules(schedule){var day=_.sortBy(_.filter(schedule,function(s){return"*"==s.cronWithDuration.split(" ")[2]&&"*"!=s.cronWithDuration.split(" ")[1]&&"*"!=s.cronWithDuration.split(" ")[0]&&"*"==s.cronWithDuration.split(" ")[4]}),"interval"),week=_.sortBy(_.filter(schedule,function(s){return"*"!=s.cronWithDuration.split(" ")[4]}),"interval"),month=_.sortBy(_.filter(schedule,function(s){return"*"!=s.cronWithDuration.split(" ")[2]&&"*"==s.cronWithDuration.split(" ")[3]}),"interval"),hour=_.filter(schedule,function(s){return"*"==s.cronWithDuration.split(" ")[1]&&"*"!=s.cronWithDuration.split(" ")[0]}),minute=_.filter(schedule,function(s){return"*"==s.cronWithDuration.split(" ")[0]});return _.union(day,week,month,hour,minute)}function setAutoReboot(){showDialog({command:commands.reboot,nameCmd:"reboot",config:config,attrs:attrs})}function edit(item){showDialog({rule:item,attrs:attrs,config:config})}function add(){showDialog({rule:null,attrs:attrs,config:config})}function remove(items){var overlayId=$scope.overlay.circular.start(),arrayId=[];_.each(items,function(item){arrayId.push(item.id)});var removeConfig=helper.getRemoveScheduleConfig(config,arrayId),diff=helper.getDiffRule(config,removeConfig,attrs);applyDiff(diff).then(function(){})["catch"](function(err){console.log(err)})["finally"](function(){$scope.overlay.circular.stop(overlayId),$state.reload()})}function showDialog(options){!function(options){return ngDialog.open({template:"dialogs/schedule_form/dialog.tpl.html",controller:"ScheduleFormDialogCtrl",scope:$scope,data:options,className:"schedule-dialog-width"})}(options)}function applyDiff(diff){return cpe.ApplyDifference(diff)}$scope.schedule={isActivate:!1,isEmptyRules:function(){return!_.isObject($scope.schedule.rules)||0===_.keys($scope.schedule.rules).length},rules:null,autoreboot:{state:{enable:!1,schedule:[]},set:setAutoReboot},edit:edit,add:add,remove:remove};var helper=null,helperCmd=null,attrs=null,config=null,commands={tree:null,reboot:[]};!function(){function success(response){var rebootState,tree=funcs.buildTree(response[0].result.ParameterList);config=tree,$scope.schedule.rules=tree.Device.System.Scheduler.Config,attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),$scope.schedule.isActivate=!0,$scope.$emit("pageload"),helper=new device.schedule.helper($scope.schedule.rules),$scope.schedule.rules=helper.convertRules(),commands.tree=tree.Device.System.Scheduler.Commands,helperCmd=helper.commands();var autoreboot=helperCmd.getCommand(commands.tree,tree,"reboot");autoreboot.length&&(rebootState=$scope.schedule.autoreboot.state,rebootState.enable=!0,_.each(autoreboot,function(cmd){commands.reboot.push(cmd),rebootState.schedule.push(scheduler.translateSchedule(helper.convertCronToUserString(cmd.Cron)))})),_.each($scope.schedule.rules,function(item,i){$scope.schedule.rules[i].interval=scheduler.translateSchedule(item.interval),$scope.schedule.rules[i].duration=scheduler.translateSchedule(item.duration.toString())}),$scope.schedule.rules=sortSchedules($scope.schedule.rules)}pull().then(success).then(function(){function successFw(response){var config=funcs.buildTree(response.result.ParameterList),converterIpFilter=device.ipfilter.ipfilterConverter.dsysinitToNative,converterMacFilter=device.macfilter.converter.dsysinitToNative.config,converterUrlFilter=device.urlfilter.converter.dsysinitToNative,rules=$scope.schedule.rules;rules=scheduler.addRuleNamesToTasks(rules,converterIpFilter(config),"ipfilter",[function(item){return item.is_ipv6?"IPv6":"IPv4"},"__index"]),rules=scheduler.addRuleNamesToTasks(rules,converterMacFilter({config:config}).Rules,"macfilterIPv4");var dataUrlFilter=converterUrlFilter(config).config;rules=scheduler.addRuleNamesToTasks(rules,dataUrlFilter,"urlfilterEnable",[function(){return"IPv4"},"__ruleIdIPv4"]),rules=scheduler.addRuleNamesToTasks(rules,dataUrlFilter,"urlfilterEnable",[function(){return"IPv6"},"__ruleIdIPv6"])}(function(rules){return _.some(rules,function(rule){return _.some(rule.genInfo.tasks,function(task){return/Device.Firewall./.test(task.Link)})})})($scope.schedule.rules)&&cpe.GetParameterValues(["Device.Firewall."]).then(successFw)})}()}angular.module("app").controllerProvider.register("ScheduleCtrl",["$scope","$state","funcs","scheduler","cpe","device","ngDialog",ScheduleCtrl]);