"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}!function(){angular.module("app").service("EoIPUtil",["cpe","device","funcs","devinfo","translate",function(cpe,device,funcs,devinfo,translate){function getData(){return config?config.Tunnels:{}}function getRule(index){var rule;return config&&index?(rule=_.find(config.Tunnels,function(elem){return elem.__id==index}),rule?rule:getTemplate()):getTemplate()}function getConnList(){return config?config.Conns:{}}function applyRule(rule,index){var id;return _.isUndefined(index)?config.Tunnels.push(rule):(id=_.findIndex(config.Tunnels,function(elem){return elem.__id==index}),config.Tunnels[id]=rule),config}function apply(settings){function prepareDiff(diff){function delVlan(initBridge,diff){var ifaces,ethIface,ethLinkId,vlanId,switchId,vlanPath,ethLink=_.find(initBridge.Members,function(e){return-1!=e.Link.indexOf("Ethernet")});return ethLink&&(ifaces={},funcs.setValue(paths.iface,__initConfig.Ifaces,ifaces),ethIface=funcs.fetchBranch(ifaces,ethLink.Link),ethIface&&(ethLinkId=ethLink.Link?ethLink.Link.match(/\.\d+\.$/g,""):void 0,funcs.setValue(paths.iface+"Ethernet.-"+ethLinkId[0].replace(/\./g,""),{LowerLayer:""},diff),deleteVlanList.push(ethIface.Name),vlanId=ethIface?ethIface.LowerLayer.match(/\.\d+\.$/g,""):void 0,switchId=ethIface?ethIface.LowerLayer.match(/(Switches)\.\d+\./g,""):void 0,vlanId&&(vlanPath="Device.Switch."+switchId+"Vlan.-"+vlanId[0].replace(/\./g,""),funcs.setValue(vlanPath,{Enable:!1,CreateIface:!1},diff)))),diff}return _.each(diff.Device.Network.Interface.EoIP,function(elem,key){-1!=key.indexOf("-")&&(elem.Enable=!1)}),_.each(diff.Device.Network.Interface.Vconfig,function(elem,key){-1!=key.indexOf("-")&&(elem.Enable=!1)}),_.each(diff.Device.Network.Interface.Bridge,function(elem,key){if("1"!=key){var initBridge=initData.Device.Network.Interface.Bridge[key],delMembers=_.filter(elem.Members,function(e,k){return-1!=k.indexOf("-")}),minLinks=autoconf.BR2_PACKAGE_ANWEB_INTERFACE_GROUPING?1:2;_.size(initBridge.Members)-_.size(delMembers)<minLinks&&(isDeleteVlan=!0,funcs.setValue(paths.iface+"Bridge.-"+key,elem,diff),funcs.cutBranch(diff,paths.iface+"Bridge."+key+"."),diff=delVlan(initBridge,diff))}}),diff}var data=converter.nativeToDsysinit(settings),initData=converter.nativeToDsysinit(__initConfig),diff=funcs.newConfig.makeDiff(initData,data,attrs),isDeleteVlan=!1,deleteVlanList=[];return _.size(diff)?(diff=prepareDiff(diff),isDeleteVlan&&!confirm(translate("eoip_vlan_remove_warning",{name:"VLAN",list:deleteVlanList.join(", ")}))?Promise.resolve():cpe.ApplyDifference(diff)):Promise.resolve()}function getTemplate(){return{IP:"",MTU:1400,PeerIP:"",Enable:!0,Name:function(){return"EoIP".split(" ").join("_")+"_"+Math.round(100*Math.random())}(),KeepaliveInterval:0,KeepaliveRetries:0}}function removeTunnels(keys){return _.each(keys.sort().reverse(),function(key){config.Tunnels.splice(key,1)}),apply(config)}function checkUnique(value,index,type){var input=funcs.deepClone(config.Tunnels),id=_.findIndex(config.Tunnels,function(elem){return elem.__id==index});return-1!=id&&(input=_.omit(input,id)),_.every(input,function(elem){return"Name"==type?elem.Name!=value:"Iface"==type?elem.IP!=value:"PeerIP"==type?elem.PeerIP!=value:"TunnelID"==type?elem.TunnelID!=value:void 0})}var _ref,config=null,attrs=null,__initConfig=null,__initNativeConfig=null,isActivate=!1,converter=device.eoip.converter,paths={conns:"Device.Network.Connection.",iface:"Device.Network.Interface.",group:"Device.Network.Group.",devMode:"Device.DeviceInfo.DeviceMode",vlan:"Device.Switch.Switches.",fw:"Device.Firewall.*.Zones.3.",dhcp:"Device.Network.Server.DHCP.",dns:"Device.Network.Server.DNS."},requestPaths=[paths.conns,paths.iface,paths.group,paths.devMode];return _ref={pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return __initNativeConfig=funcs.deepClone(data),config=converter.dsysinitToNative(data),__initConfig=funcs.deepClone(config),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),isActivate=!0,Promise.resolve()}return Promise.all([cpe.GetParameterValues(requestPaths),cpe.GetParameterAttributes([paths.iface])]).then(success,function(){return Promise.reject()})},applyRule:applyRule,apply:apply,getData:getData,getRule:getRule,getConnList:getConnList,getActivate:function(){return isActivate},removeTunnels:removeTunnels,subscribeInfo:function(cb,$scope){devinfo.subscribe(paths.conns+"|"+paths.iface+"|"+paths.group+"||"+paths.devMode,function(response){var conns,eoip,group,input,data;response&&response[paths.iface]&&(conns=funcs.splitTree(response[paths.conns]),eoip=funcs.splitTree(response[paths.iface]),group=funcs.splitTree(response[paths.group]),input=funcs.buildTree(conns.concat(eoip,group)),data=converter.dsysinitToNative(input),cb&&cb(data))},$scope)}},_defineProperty(_ref,"getConnList",getConnList),_defineProperty(_ref,"checkUnique",checkUnique),_ref}])}();