"use strict";!function(){angular.module("app").service("VrrpUtil",["cpe","device","funcs","devinfo",function(cpe,device,funcs,devinfo){function getData(){return config?config.Settings:{}}function getIfaces(){return config?config.Ifaces:{}}function getConns(){return config?config.Conns:{}}function apply(settings){var input=converter.nativeToDsysinit(settings),diff=funcs.newConfig.makeDiff(__initCpeData,input,attrs);return _.isEmpty(diff)?Promise.resolve():cpe.ApplyDifference(diff)}var config=null,attrs=null,__initCpeData=null,converter=device.vrrp.converter,paths={vrrp:"Device.Services.VRRP.",connection:"Device.Network.Connection.","interface":"Device.Network.Interface.",dhcp:"Device.Network.Server.DHCP.",devMode:"Device.DeviceInfo.DeviceMode",group:"Device.Network.Group."};return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return __initCpeData=funcs.deepClone(data),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),config=converter.dsysinitToNative(data,attrs),funcs.deepClone(config),Promise.resolve()}return Promise.all([cpe.GetParameterValues([paths.vrrp,paths.connection,paths["interface"],paths.dhcp,paths.devMode,paths.group]),cpe.GetParameterAttributes([paths.vrrp])]).then(success,function(){return Promise.reject()})},apply:apply,getData:getData,getIfaces:getIfaces,getConns:getConns,subscribeInfo:function(cb,$scope){devinfo.subscribe(paths.vrrp+"|"+paths.connection+"|"+paths["interface"]+"|"+paths.dhcp+"|"+paths.devMode,function(response){var input,data;response&&response[paths.vrrp]&&(input=[],_.each(paths,function(path){input=input.concat(funcs.splitTree(response[path]))}),input=funcs.buildTree(input),data=converter.dsysinitToNative(input),cb&&cb(data.Settings))},$scope)}}}])}();