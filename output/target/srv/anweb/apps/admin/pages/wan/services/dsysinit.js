"use strict";angular.module("app").factory("wanPage",["cpe","funcs","wanPageCommon","device","devinfo",function(cpe,funcs,wanPageCommon,device,devinfo){function convertData(config,attrs){config.OnlyInternalModems=!autoconf.BR2_PACKAGE_ANWEB_STORAGE,config.hasL2TPv3=!!autoconf.BR2_PACKAGE_ANWEB_CUSTOM_MTS_29548,config.hasDualLAN=wanPageCommon.supportDualLAN;var data=device.wan.dsysinitToNative(config,attrs);return data.__checksum=wanPageCommon.checksum(JSON.stringify(data)),data.__flatConnList=wanPageCommon.flattenConnections(data),data.__flatIfaceList=wanPageCommon.flattenIfaces(data),data}function pushDiffCreate(diffs,connsData,workModel){var conn,initConfig=device.wan.nativeToDsysinit(__initNativeModel),nativeModel=function(dataConns,workModel){var c,data=funcs.deepClone(workModel),conns=wanPageCommon.flattenConnections(dataConns);for(var i in conns)c=conns[i],c.__New&&funcs.setValue(c.__Path,c,data);var model={Device:{WAN:data}};return function(){function isWrongBridgeLink(conn){var member,media=funcs.fetchBranch(model,conn.MediaPath);return media&&media.__BridgeLink&&media.__MemberInst&&(member=funcs.fetchBranch(__initConfig,media.__BridgeLink+"Members."+media.__MemberInst+"."),!member)?!0:!1}function removeBridgeLink(conn){var pathConnIface="Device.WAN."+conn.__Path+"Media."+conn.MediaType+".";funcs.setValue(pathConnIface+"__BridgeLink","",model),funcs.setValue(pathConnIface+"__MemberInst","",model)}var conn;for(var i in conns)conn=conns[i],isWrongBridgeLink(conn)&&removeBridgeLink(conn)}(),model}(connsData,workModel),newConfig=device.wan.nativeToDsysinit(nativeModel);connsData.Bridge&&connsData.Bridge.Connection&&(conn=Object.values(connsData.Bridge.Connection)[0],addBridgeConnsToInit(initConfig,conn,nativeModel,__initConfig),addBridgeConnsToNew(newConfig,conn,nativeModel,__initConfig));var diffCreate=funcs.newConfig.makeDiff(initConfig,newConfig,__attrs,__storageObj);diffCreate=function(diff){if(!diff.Device||!diff.Device.Routing||!diff.Device.Routing.RIP)return diff;var hasNetworks=!1;for(var i in diff.Device.Routing.RIP.Networks)/-/.test(i)||(hasNetworks=!0);return hasNetworks&&funcs.setValue("Device.Routing.RIP.Enable",!0,diff),diff}(diffCreate),diffs.push(diffCreate)}function pushDiffsRemove(diffs,pathsConns,workModel,isConflict){var bridgeLinks,freeIfaces,bridgeConns=pathsConns.filter(function(path){return-1!=path.indexOf("Bridge")});bridgeConns.length&&(bridgeLinks=getDelBridgeLinks(bridgeConns,workModel,__initConfig),bridgeLinks.conns.length&&(pushDelDiff(diffs,bridgeLinks.conns),isConflict&&bridgeLinks.conns.map(function(link){return funcs.cutBranch(__initConfig,link)})),isConflict||(freeIfaces=bridgeLinks.ifaces.filter(function(iface){return!isBusyIface(iface,pathsConns,workModel.__flatConnList)}),bridgeLinks.ifaceDeps.length&&pushDelDiff(diffs,bridgeLinks.ifaceDeps),freeIfaces.length&&pushDelDiff(diffs,freeIfaces))),pathsConns=pathsConns.filter(function(path){return-1==path.indexOf("Bridge")});var links=getDelLinks(pathsConns,workModel,isConflict);pushDisabledConnsDiff(diffs,links),links.deps.length&&pushDelDiff(diffs,links.deps),pushDisabledServisesDiff(diffs,links),links.conns.length&&pushDelDiff(diffs,links.conns),links.connSupports.length&&pushDelDiff(diffs,links.connSupports),links.ifaceDeps.length&&pushDelDiff(diffs,links.ifaceDeps),links.ifaces.length&&pushDelDiff(diffs,links.ifaces)}function getDelLinks(pathsConns,nativeModel,isConflict){function getLinksConns(inputConn){var conn,path,links=[inputConn.__Link];inputConn.__LinkSub&&links.push(inputConn.__LinkSub);var linksDepsConns=conns.filter(function(conn){return conn.__LowerConnection==inputConn.__Link}).map(function(conn){return conn.__Link});linksDepsConns.length&&(links=links.concat(linksDepsConns));var l2tp=links.filter(function(link){return-1!=link.indexOf("L2TP")});if(l2tp.length)for(var i in l2tp)conn=conns.find(function(conn){return conn.__Link==l2tp[i]}),conn.__IPsecInst&&(path="Device.Network.Connection.IPsec."+conn.__IPsecInst+".",links.find(function(link){return link==path})||links.push("Device.Network.Connection.IPsec."+conn.__IPsecInst+".")),"L2TPDUAL"==conn.ActualType&&conn.__LinkSub&&links.push(conn.__LinkSub);return links}function getDeps(inputLinks,listIgnore){var allDepLinks=getAllDeps(inputLinks),links=allDepLinks.filter(function(link){var listСascadeDel=["Device.Network.DNS.Current.","Device.Network.Group.","Device.Routing.IPv4.Routes.","Device.Routing.IPv4.Rules.","Device.Routing.IPv6.Routes.","Device.Routing.IPv6.Rules.","Device.Routing.Tables.","Device.Statistics.Routing.","Device.USB.Modem.","Device.Network.Server.DHCP."];listIgnore&&(listСascadeDel=listСascadeDel.concat(listIgnore));for(var i in listСascadeDel)if(-1!=link.indexOf(listСascadeDel[i]))return!1;return-1!=link.indexOf(paths.network+"Connection.")?!1:-1!=link.indexOf(paths.usb+"Connection.")?!1:-1!=link.indexOf(paths.network+"Interface.EoGRE.")?!1:-1!=link.indexOf(paths.udpxy)?!1:-1!=link.indexOf(paths.network+"Server.VPN.")?!1:-1!=link.indexOf(paths.network+"Settings.StaticL2TPv3Tunnel.")?!1:-1!=link.indexOf("Device.Services.VRRP.")?!1:-1!=link.indexOf("Device.Services.TWAMPServer.")?!1:/Device.Network.IP.\d+.IPv(4|6)Address/.test(link)?!1:!0});return links}function getAllDeps(links){var posLinks=__links.filter(function(objLink){return links.includes(objLink.Link)}).map(function(objLink){return objLink.Position}),depLinks=posLinks.map(function(link){return-1!=link.indexOf("Server.DHCP.")?link:link.replace(/(\.\d+\.)[a-zA-Z.]+$/,function(match,p1){return p1})});return depLinks}function getIface(conn){if(conn.MediaPath&&-1!=conn.MediaPath.indexOf("DSL")){var media=funcs.fetchBranch(nativeModel,conn.MediaPath.replace("Device.WAN.",""));return media.__Link}}function getConnSupports(connsLinks){var conn,links=[];for(var i in connsLinks)conn=conns.find(function(conn){return conn.__Link==connsLinks[i]}),conn&&conn.__LinkConfiguration&&links.push(conn.__LinkConfiguration);return links}function getLinksDisabled(connsLinks){var links=[],allDepLinks=getAllDeps(connsLinks),removedIPsecConns=connsLinks.filter(function(link){return-1!=link.indexOf("Connection.IPsec.")}),IPSecConns=allDepLinks.filter(function(link){var linkConn;if(-1==link.indexOf("Connection.IPsec."))return!1;for(var i in removedIPsecConns)if(linkConn=removedIPsecConns[i],-1!=link.indexOf(linkConn))return!1;return!0});IPSecConns.length&&(links=links.concat(IPSecConns));var greConns=allDepLinks.filter(function(link){return-1!=link.indexOf("Connection.GRE.")});greConns.length&&(links=links.concat(greConns));var EoGREIfaces=allDepLinks.filter(function(link){return-1!=link.indexOf("Interface.EoGRE.")});EoGREIfaces.length&&(links=links.concat(EoGREIfaces));var udpxy=allDepLinks.find(function(link){return-1!=link.indexOf(paths.udpxy)});udpxy&&(links=links.concat(udpxy));var serversVPN=allDepLinks.filter(function(link){return-1!=link.indexOf(paths.network+"Server.VPN.")});serversVPN.length&&(links=links.concat(serversVPN));var usbConns=connsLinks.filter(function(link){return-1!=link.indexOf("USB.Connection.")});usbConns.length&&(links=links.concat(usbConns));var l2tpv3Ifaces=allDepLinks.filter(function(link){return-1!=link.indexOf("Settings.StaticL2TPv3Tunnel.")});l2tpv3Ifaces.length&&(links=links.concat(l2tpv3Ifaces));var dhcps=allDepLinks.filter(function(link){return-1!=link.indexOf("Server.DHCP.")});dhcps.length&&(links=links.concat(dhcps));var vrrps=allDepLinks.filter(function(link){return-1!=link.indexOf("Services.VRRP")});vrrps.length&&(links=links.concat(vrrps));var twamps=allDepLinks.filter(function(link){return-1!=link.indexOf("Services.TWAMPServer")});return twamps.length&&(links=links.concat(twamps)),links}var conn,linksConns,depLinksConns,connSupports,disabled,iface,ifaceDeps,cellular,cellularDeps,links={deps:[],disabled:[],conns:[],connSupports:[],ifaces:[],ifaceDeps:[]},conns=wanPageCommon.flattenConnections(nativeModel),_loop=function(){conn=conns.find(function(conn){return conn.__Path==pathsConns[i]}),linksConns=getLinksConns(conn),links.conns=links.conns.concat(linksConns),depLinksConns=getDeps(linksConns),depLinksConns.length&&(links.deps=links.deps.concat(depLinksConns)),connSupports=getConnSupports(linksConns),connSupports.length&&(links.connSupports=links.connSupports.concat(connSupports)),disabled=getLinksDisabled(linksConns),disabled.length&&(links.disabled=links.disabled.concat(disabled)),isConflict||(iface=getIface(conn),iface&&!isBusyIface(iface,pathsConns,conns)&&(links.ifaces.push(iface),ifaceDeps=getDeps([iface]),ifaceDeps.length&&(links.ifaceDeps=links.ifaceDeps.concat(ifaceDeps)))),-1!=conn.__Path.indexOf("USB")&&conn.Interface&&(cellular=conn.Interface,cellularDeps=getDeps([cellular],["Device.Network.IP."]),cellularDeps.length&&(links.deps=links.deps.concat(cellularDeps)));var isConnIPv4=-1!=conn.__Path.indexOf("IPv4oE"),isConnIPv6=-1!=conn.__Path.indexOf("IPv6oE"),isConnUSB=-1!=conn.__Path.indexOf("USB");if(isConnIPv4||isConnIPv6||isConnUSB){var linkIface=conn.__LinkIface;if(!/ATM/.test(linkIface)){var ifaceDepLinks=getAllDeps(linkIface).filter(function(link){if(!~link.indexOf("Device.Network.IP."))return!1;if(isConnUSB&&!/Device.Network.IP.\d+.IPv(4|6)Address/.test(link))return!1;var noDelIP=void 0;if(isConnIPv6){var ipv4Address=funcs.fetchBranch(__initConfig,link+".IPv4Address.");noDelIP=noDelIP||ipv4Address&&Object.keys(ipv4Address).length>1}if(isConnIPv4){var ipv6Address=funcs.fetchBranch(__initConfig,link+".IPv6Address.");noDelIP=noDelIP||ipv6Address&&Object.keys(ipv6Address).length>1}return!noDelIP});ifaceDepLinks.length&&(links.deps=links.deps.concat(ifaceDepLinks))}}};for(var i in pathsConns)_loop();return links}function isBusyIface(iface,pathsConns,conns){var ifaceConns;return/^Device\.Network\.Interface\.PTM\./.test(iface)?(ifaceConns=conns.filter(function(o){return funcs.fetchBranch(o,"Media."+o.MediaType+".").__Link==iface}).map(function(o){return o.__Path}),_.difference(ifaceConns,pathsConns).length>0):!1}function pushDelDiff(diffs,links){var tmp,activeSIMConns,key,conn,modem,simList,activeSIM,simKey,newConfig=funcs.deepClone(__initConfig);for(var i in links)tmp=funcs.fetchBranch(newConfig,links[i]),tmp&&(_.isObject(tmp)?funcs.cutBranch(newConfig,links[i]):funcs.setValue(links[i],"",newConfig));var diff=funcs.newConfig.makeDiff(__initConfig,newConfig,__attrs,__storageObj);if(diff.Device&&diff.Device.Network&&diff.Device.Network.Connection&&diff.Device.Network.Connection.IPIP6)for(var i in diff.Device.Network.Connection.IPIP6)funcs.cutBranch(diff,"Device.Network.Connection.IPIP6."+i+".Interface");if(diff.Device&&diff.Device.Network&&diff.Device.Network.IP)for(var _i in diff.Device.Network.IP)if(parseInt(_i)<0)diff.Device.Network.IP[_i].IPv4Address&&(diff.Device.Network.IP[_i].IPv4Address={}),diff.Device.Network.IP[_i].IPv6Address&&(diff.Device.Network.IP[_i].IPv6Address={}),delete diff.Device.Network.IP[_i].LowerLayer;else{for(var g in diff.Device.Network.IP[_i].IPv4Address)diff.Device.Network.IP[_i].IPv4Address[g]={};for(var _g in diff.Device.Network.IP[_i].IPv6Address)diff.Device.Network.IP[_i].IPv6Address[_g]={}}diff=checkDelUSBZone(diff);var fwDiff={};if(diff.Device&&diff.Device.USB&&diff.Device.USB.Connection&&Object.keys(diff.Device.USB.Connection).length>1){activeSIMConns={};for(var i in diff.Device.USB.Connection)if(key=i.slice(1),conn=funcs.fetchBranch(__initConfig,"Device.USB.Connection."+key+"."),conn.Binding.Modem&&""!=conn.Binding.Modem&&(modem=funcs.fetchBranch(__initConfig,conn.Binding.Modem),simList=funcs.newConfig.normalize(modem.SIM),activeSIM=modem.ActiveSIM,Object.keys(simList).length>1)){simKey="";for(var j in simList)conn.Binding.IMSI==simList[j].IMSI&&(simKey=i);""!=simKey&&simKey==activeSIM&&(funcs.setValue("Device.USB.Connection."+i,funcs.fetchBranch(diff,"Device.USB.Connection."+i+"."),activeSIMConns),funcs.cutBranch(diff,"Device.USB.Connection."+i+"."))}Object.keys(activeSIMConns).length&&(diffs.push(diff),diffs.push(activeSIMConns),diff={})}diff.Device&&diff.Device.Firewall&&(diff.Device.Firewall.IPv4&&diff.Device.Firewall.IPv4.Zones||diff.Device.Firewall.IPv6&&diff.Device.Firewall.IPv6.Zones)&&(diff.Device.Firewall.IPv4&&diff.Device.Firewall.IPv4.Zones&&(funcs.setValue("Device.Firewall.IPv4.Zones",diff.Device.Firewall.IPv4.Zones,fwDiff),funcs.cutBranch(diff,"Device.Firewall.IPv4.Zones.")),diff.Device.Firewall.IPv6&&diff.Device.Firewall.IPv6.Zones&&(funcs.setValue("Device.Firewall.IPv6.Zones",diff.Device.Firewall.IPv6.Zones,fwDiff),funcs.cutBranch(diff,"Device.Firewall.IPv6.Zones.")),diffs.push(diff),diff=fwDiff),Object.keys(diff).length&&diffs.push(diff)}function checkDelUSBZone(diff){function checkZone(diff,type){var delIfaceLength,initZone,initIfaceLength;if(!diff.Device.Firewall[type]||!diff.Device.Firewall[type].Zones)return diff;for(var key in funcs.deepClone(diff.Device.Firewall[type].Zones))delIfaceLength=Object.keys(diff.Device.Firewall[type].Zones[key].Interfaces).length,initZone=__initConfig.Device.Firewall[type].Zones[key],initIfaceLength=Object.keys(funcs.newConfig.normalize(initZone.Interfaces)).length,delIfaceLength==initIfaceLength&&"USB"==initZone.Name&&(funcs.cutBranch(diff.Device.Firewall[type].Zones,key),funcs.setValue("Device.Firewall."+type+".Zones.-"+key+".",{},diff));return diff}return diff.Device&&diff.Device.Firewall?(diff=checkZone(diff,"IPv4"),diff=checkZone(diff,"IPv6")):diff}function pushDisabledConnsDiff(diffs,links){var link,newConfig=funcs.deepClone(__initConfig);for(var i in links.conns)link=links.conns[i],(-1!=link.indexOf("Device.Network.Connection.DHCP")||-1!=link.indexOf("USB.Connection."))&&funcs.setValue(link+"Enable",!1,newConfig);var diff=funcs.newConfig.makeDiff(__initConfig,newConfig,__attrs,__storageObj);Object.keys(diff).length&&diffs.push(diff)}function pushDisabledServisesDiff(diffs,links){function isClearedRIP(deps){var pathNetworksRIP="Device.Routing.RIP.Networks.",networksRIP=funcs.newConfig.instanceObjectToArray(funcs.fetchBranch(__initConfig,pathNetworksRIP));if(0==networksRIP.length)return!1;var removeNetworksRIP=deps.filter(function(link){return-1!=link.indexOf(pathNetworksRIP)});return networksRIP.length==removeNetworksRIP.length}function getInxsClearedLoadBalancing(deps){var instLB,initWans,removeWansLB,pathLoadBalancing=paths.network+"LoadBalancing.",loadBalancing=funcs.newConfig.normalize(funcs.fetchBranch(__initConfig,pathLoadBalancing)),inxs=[];for(var i in loadBalancing)instLB=loadBalancing[i],initWans=funcs.newConfig.normalize(instLB.WAN),removeWansLB=deps.filter(function(link){return-1!=link.indexOf(""+pathLoadBalancing+i+".WAN.")}),Object.keys(initWans).length-removeWansLB.length<2&&inxs.push(i);return inxs}var link,linkServer,dhcpLink,newConfig=funcs.deepClone(__initConfig);isClearedRIP(links.deps)&&funcs.setValue(paths.rip+"Enable",!1,newConfig);var disabledIPSec=links.disabled.filter(function(link){return-1!=link.indexOf("Connection.IPsec.")});if(disabledIPSec.length)for(var i in disabledIPSec){var link=disabledIPSec[i];funcs.setValue(link+"Enable",!1,newConfig),funcs.setValue(link+"Left","Device.Network.Group.1.",newConfig)}var disabledGRE=links.disabled.filter(function(link){return-1!=link.indexOf("Connection.GRE.")});if(disabledGRE.length)for(var i in disabledGRE){var link=disabledGRE[i];funcs.setValue(link+"Enable",!1,newConfig),funcs.setValue(link+"IP","",newConfig)}var disabledEoGRE=links.disabled.filter(function(link){return-1!=link.indexOf("Interface.EoGRE.")});if(disabledEoGRE.length)for(var i in disabledEoGRE){var link=disabledEoGRE[i];funcs.setValue(link+"Enable",!1,newConfig),funcs.setValue(link+"IP","",newConfig)}links.disabled.find(function(link){return-1!=link.indexOf(paths.udpxy)})&&(funcs.setValue(paths.udpxy+"Enable",!1,newConfig),funcs.setValue(paths.udpxy+"IfaceWan","",newConfig));var inxs=getInxsClearedLoadBalancing(links.deps);if(inxs.length)for(var i in inxs)funcs.setValue(paths.network+"LoadBalancing."+inxs[i]+".Enable",!1,newConfig);var serversVPN=links.disabled.filter(function(link){return-1!=link.indexOf(paths.network+"Server.VPN.")});if(serversVPN.length)for(var i in serversVPN)linkServer=serversVPN[i],funcs.setValue(linkServer+"Enable",!1,newConfig),funcs.setValue(linkServer+"ListenIP","Device.Network.Group.1.",newConfig);var disabledL2TPv3=links.disabled.filter(function(link){return-1!=link.indexOf("Settings.StaticL2TPv3Tunnel.")});if(disabledL2TPv3.length)for(var i in disabledL2TPv3){var link=disabledL2TPv3[i];funcs.setValue(link+"LocalIP","Device.Network.Group.1.",newConfig)}var dhcps=links.disabled.filter(function(link){return-1!=link.indexOf("Server.DHCP.")});if(dhcps.length)for(var i in dhcps){var link=dhcps[i];funcs.setValue(""+link,"",newConfig),dhcpLink=link.replace(/(\.\d+\.)\w+$/,function(match,p1){return p1}),-1!=link.indexOf("PrimaryWANv6")?funcs.setValue(dhcpLink+"DNSModev6","Default",newConfig):funcs.setValue(dhcpLink+"DNSMode","Default",newConfig)}var vrrps=links.disabled.filter(function(link){return-1!=link.indexOf("Services.VRRP.")});if(vrrps.length)for(var i in vrrps){var link=vrrps[i];funcs.setValue(link+"ObjectTrackingLink","Device.Network.Group.1.",newConfig)}var twamps=links.disabled.filter(function(link){return-1!=link.indexOf("Services.TWAMPServer")});if(twamps.length)for(var i in twamps)link=twamps[i],funcs.setValue(""+link,"Device.Network.Group.1.",newConfig);var diff=funcs.newConfig.makeDiff(__initConfig,newConfig,__attrs,__storageObj);Object.keys(diff).length&&diffs.push(diff)}function getLinksForReconnect(paths,all){var conn,links=[];for(var i in paths)conn=wanPageCommon.getByPath(paths[i],all),conn.__LinkSub&&conn.__IPsecInst||links.push(conn.__Link),conn.__LinkSub&&links.push(conn.__LinkSub);return links}function getNativeModelForSwitchPBR(valuePBR){var nativeModel=funcs.deepClone(__initNativeModel);return nativeModel.Device.WAN.PBREnable=valuePBR,nativeModel}function addBridgeConnsToInit(config,conn,nativeModel,initConfig){var groups,iface,inxTechGroup,techGroup,techBridge,pathBridge,bridge;if(conn.__New){groups=funcs.fetchBranch(initConfig,"Device.Network.Group.");var iface=funcs.fetchBranch(nativeModel,conn.MediaPath);if(inxTechGroup=iface&&iface.__BridgeLink?_.findKey(groups,function(group){return group.LAN&&group.LAN==iface.__BridgeLink}):_.findKey(groups,function(group){return group.Name&&-1!=group.Name.indexOf("_tech#bridge")}),!inxTechGroup)return void funcs.setValue("Device.Network.Interface.Bridge",{},config);techGroup=groups[inxTechGroup],techBridge=funcs.fetchBranch(initConfig,techGroup.LAN),funcs.setValue(techGroup.LAN,_.pick(techBridge,"Members"),config)}else iface=funcs.fetchBranch(nativeModel,conn.MediaPath),pathBridge=iface.__BridgeLink,bridge=funcs.fetchBranch(initConfig,pathBridge),funcs.setValue(pathBridge,_.pick(bridge,"Members"),config)}function addBridgeConnsToNew(config,conn,nativeModel,initConfig){function getDataBridge(path,conn,nativeModel,initConfig){var objBr,inxMember,iface=funcs.fetchBranch(nativeModel,conn.MediaPath),bridge=funcs.fetchBranch(initConfig,path);return bridge?(objBr=funcs.deepClone(bridge),inxMember=_.findKey(bridge.Members,function(member){return member.Link==iface.__Link}),inxMember?objBr.Members[inxMember].Name=conn.Name:objBr.Members.new_inst={Link:iface.__Link,Name:conn.Name},objBr):{Members:{new_inst:{Link:iface.__Link,Name:conn.Name}}}}var pathBridge,groups,inxTechGroup,iface,pathAtm;if(conn.__New){groups=funcs.fetchBranch(initConfig,"Device.Network.Group.");var iface=funcs.fetchBranch(nativeModel,conn.MediaPath);inxTechGroup=iface&&iface.__BridgeLink?_.findKey(groups,function(group){return group.LAN&&group.LAN==iface.__BridgeLink}):_.findKey(groups,function(group){return group.Name&&-1!=group.Name.indexOf("_tech#bridge")}),inxTechGroup?pathBridge=groups[inxTechGroup].LAN:(pathBridge="Device.Network.Interface.Bridge.new_inst.",funcs.setValue("Device.Network.Group.new_inst.",{Name:"_tech#bridge",LAN:pathBridge},config))}else iface=funcs.fetchBranch(nativeModel,conn.MediaPath),pathBridge=iface.__BridgeLink;var dataBridge=getDataBridge(pathBridge,conn,nativeModel,initConfig);funcs.setValue(pathBridge,_.pick(dataBridge,"Members"),config);var atmIfaces=Object.values(dataBridge.Members).filter(function(member){return member.Link&&-1!=member.Link.indexOf("ATM")}).map(function(member){return member.Link});for(var i in atmIfaces)pathAtm=atmIfaces[i],funcs.setValue(pathAtm+"LinkType.","BRIDGE",config)}function getDelBridgeLinks(pathConns,nativeModel,config){function getDeps(inputLinks){var posLinks=__links.filter(function(objLink){return inputLinks.includes(objLink.Link)}).map(function(objLink){return objLink.Position}),depLinks=posLinks.map(function(link){return link.replace(/(\.\d+\.)[a-zA-Z.]+$/,function(match,p1){return p1})});return depLinks=depLinks.filter(function(link){var ignoreList=["Device.Network.DNS.Current.","Device.Network.Group.","Device.Routing.IPv4.Routes.","Device.Routing.IPv4.Rules.","Device.Routing.IPv6.Routes.","Device.Routing.IPv6.Rules.","Device.Routing.Tables.","Device.Statistics.Routing.","Device.USB.Modem."];for(var i in ignoreList)if(-1!=link.indexOf(ignoreList[i]))return!1;return!0})}var pathBridge,bridge,members,member,ifaceDeps,links={conns:[],ifaces:[],ifaceDeps:[]},pathConns=wanPageCommon.flattenConnections(nativeModel).filter(function(conn){return-1!=pathConns.indexOf(conn.__Path)}).map(function(conn){return conn.__Link}),groups=funcs.fetchBranch(config,"Device.Network.Group."),bridgeGroups=Object.values(groups).filter(function(group){return group.Name&&group.Name.indexOf("#bridge")});for(var i in bridgeGroups){pathBridge=bridgeGroups[i].LAN,bridge=funcs.fetchBranch(config,pathBridge),members=funcs.newConfig.normalize(bridge.Members);for(var j in members)member=members[j],-1!=pathConns.indexOf(member.Link)&&(links.conns.push(pathBridge+"Members."+j+"."),/ATM|PTM/.test(member.Link)&&(links.ifaces.push(member.Link),ifaceDeps=getDeps([member.Link]),ifaceDeps.length&&(links.ifaceDeps=links.ifaceDeps.concat(ifaceDeps))))}return links.ifaceDeps=links.ifaceDeps.filter(function(link){return!links.conns.includes(link)}),links}var paths={network:"Device.Network.",firewall:"Device.Firewall.",devinfo:"Device.DeviceInfo.",group:"Device.Network.Group.",rip:"Device.Routing.RIP.",ripv6:"Device.Routing.RIPng.",igmp:"Device.Services.IGMPX.",mld:"Device.Services.MLDProxy.",xdsl:"Device.xDSL.",xdslStats:"Device.Statistics.xDSL.",ipsec:"Device.Services.IPsec.",usb:"Device.USB.","switch":"Device.Switch.",udpxy:"Device.Services.Udpxy.",tr:"Device.Services.TR069.",voip:"Device.Voip.",links:"Links.",ifaceStats:"Device.Statistics.Interface.",routing:"Device.Routing.*.Routes.",ddns:"Device.Services.DDNS.Instances.",ethernet:"Device.Network.Interface.Ethernet."},configPaths=[paths.network,paths.firewall,paths["switch"],paths.devinfo,paths.igmp,paths.mld,paths.udpxy,paths.rip,paths.ripv6,paths.xdsl,paths.xdslStats,paths.usb,paths.ipsec,paths.tr,paths.voip,paths.ifaceStats,paths.routing,paths.ddns],dataChecksum=null,__initNativeModel=null,__initConfig=null,__attrs=null,__links=null,__storageObj={num:0,mapLinks:{}};return{pull:function(){return Promise.all([cpe.GetParameterValues(configPaths.concat(paths.links),void 0,!0),cpe.GetParameterAttributes(configPaths,void 0,!0)]).then(function(response){var config=funcs.buildTree(response[0].result.ParameterList);__initConfig=funcs.deepClone(config),__links=Object.values(config.Links);var attrs=funcs.buildTreeAttributes(response[1].result.ParameterList);__attrs=funcs.deepClone(attrs);var data=convertData(config,attrs);return dataChecksum=data.__checksum,__initNativeModel={Device:{WAN:funcs.deepClone(data)}},data})},push:function(connsData,conflicts,workModel){return function(){var diffs=[];return conflicts.length&&pushDiffsRemove(diffs,conflicts,workModel,!0),pushDiffCreate(diffs,connsData,workModel),cpe.ApplyDifference(diffs)}()},subscribe:function(handler,$scope){var areas=configPaths.concat(paths.links).join("|");devinfo.subscribe(areas,function(response){if(response){var config=configPaths.concat(paths.links).reduce(function(memo,path){return funcs.deepExtend(memo,response[path])},{});__initConfig=funcs.deepClone(config),__links=Object.values(config.Links);var data=convertData(config);data.__checksum!=dataChecksum&&(dataChecksum=data.__checksum,handler(data))}},$scope)},setGwif:function(path,all,ipv6){var wanGroup,linkWan,links=[],conn=wanPageCommon.getByPath(path,all),wanVersion=ipv6?"WANv6":"WAN",groups=funcs.newConfig.normalize(funcs.fetchBranch(__initConfig,paths.group));for(var inxGroup in groups){wanGroup=funcs.newConfig.normalize(groups[inxGroup][wanVersion]);for(var inxWan in wanGroup)if(linkWan=wanGroup[inxWan].Link,(linkWan==conn.__Link||linkWan==conn.__LinkSub||linkWan==conn.Interface)&&links.push(""+paths.group+inxGroup+"."+wanVersion+"."+inxWan+"."),"USB"==conn.__Type)for(var inxIface in conn.__LinkIface)linkWan==conn.__LinkIface[inxIface]&&links.push(""+paths.group+inxGroup+"."+wanVersion+"."+inxWan+".")}return Promise.all(links.map(function(link){return cpe.ChangeOrder(link,0)}))},reconnect:function(paths,all){function setStatus(links,status){return cpe.SetParameterValues(function(links,status){var output={};for(var i in links)funcs.setValue(links[i],{Status:status},output);return funcs.splitTree(output)}(links,status))}var links=getLinksForReconnect(paths,all);return setStatus(links,"Disabling").then(function(){return setStatus(links,"Enabling")})},remove:function(pathsConns,nativeModel){var diffs=[];return pushDiffsRemove(diffs,pathsConns,nativeModel),cpe.ApplyDifference(diffs)},getGwifList:function(conns,type){var nameField="ipv4"==type?"__LinkGroupv4":"__LinkGroupv6";return conns.filter(function(conn){return conn[nameField]})},wanUsedInTr69:function(data,conn){var linkConn,tr69=data.TR069;if(!tr69)return!1;if(conn.__Link==tr69.Iface)return!0;if("Dongle"==conn.MediaType)for(var i in conn.Connections){if(linkConn=conn.Connections[i].Link,linkConn==tr69.Iface)return!0;if(-1!=linkConn.indexOf("DHCPv6")&&conn.__LinkSub==tr69.Iface)return!0}return!1},availableTypesForBasePPTP:function(){function add(type){types.push({name:type,value:type})}var types=[];return add("dynip"),add("statip"),add("mobileinet"),types},availableTypesForBaseIPIP6:function(){return[{name:"dynipv6",value:"dynipv6"},{name:"statipv6",value:"statipv6"}]},wanUsedInVoIP:function(data,conn){if(!data.VoIP)return!1;var linkConn,linkVoIP=data.VoIP.XDLinkNetworkConnection;if(!linkVoIP)return!1;if(linkVoIP==conn.__Link)return!0;if("Dongle"==conn.MediaType)for(var i in conn.Connections)if(linkConn=conn.Connections[i].Link,linkConn==linkVoIP)return!0;return!1},wanUsedInReserve:function(data,conn){return conn.IsFailover?!0:!1},getIfacePtmByVlan:function(data,conn){var ifacesPtm=Object.values(data.Media.DSL.PTM.Link),ifaceConn=conn.Media.DSL.PTM,vlan=conn.VLAN,iface=ifacesPtm.find(function(iface){return iface.__Link==ifaceConn.__Link?!1:0==vlan.Enable&&"0"==iface.__VID?!0:vlan.Enable&&iface.__VID==vlan.ID&&iface.__VPR==vlan.Priority?!0:!1});return iface?iface.Name:null},updateVlan:function(vlan,media){return media.__VID?(vlan.Enable=!0,vlan.ID=media.__VID,void(vlan.Priority=media.__VPR)):(vlan.Enable=!1,vlan.ID=void 0,void(vlan.Priority=0))},getStatusText:function(data,conn){return conn.Enable?conn.StatusExt?conn.StatusExt:conn.Status:"Disabled"},isSimpleConfig:function(conns){var base,pppoeConn=conns.find(function(e){return"PPPoE"==e.__Type}),ipoeConn=conns.find(function(e){return"IPv4oE"==e.__Type});if(pppoeConn&&ipoeConn&&pppoeConn.DefaultGateway)return!0;var pptpConn=conns.find(function(e){return"PPTP"==e.__Type});return pptpConn&&(base=conns.find(function(e){return"Device.WAN."+e.__Path==pptpConn.BaseConnection}),base&&!pptpConn.AutomaticalConnection&&pptpConn.DefaultGateway)?!0:!1},switchPBR:function(value){var initConfig=device.wan.nativeToDsysinit(__initNativeModel),nativeModel=getNativeModelForSwitchPBR(value),newConfig=device.wan.nativeToDsysinit(nativeModel),diff=funcs.newConfig.makeDiff(initConfig,newConfig,__attrs,__storageObj);return cpe.ApplyDifference(diff)}}}]);