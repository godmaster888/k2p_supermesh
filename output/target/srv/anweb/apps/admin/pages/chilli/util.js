"use strict";!function(){angular.module("app").service("ChilliUtil",["cpe","device","funcs","devinfo",function(cpe,device,funcs,devinfo){function apply(settings){function splitDiff(diff){var zone,applyDiff=funcs.deepClone(diff),cleanLinks={},removeServers={},overSettings=diff,diffs=[];if(applyDiff.Device.Firewall&&applyDiff.Device.Firewall.IPv4){for(var key in applyDiff.Device.Firewall.IPv4.Zones)if(zone=applyDiff.Device.Firewall.IPv4.Zones[key],-1!=key.indexOf("-"))funcs.setValue(paths.fw+"Zones."+key.slice(1),zone,cleanLinks),funcs.setValue(paths.fw+"Zones."+key,{},overSettings);else for(var inst in zone.Interfaces)-1!=inst.indexOf("-")&&(funcs.setValue(paths.fw+"Zones."+key+".Interfaces."+inst,zone.Interfaces[inst],cleanLinks),funcs.cutBranch(overSettings,paths.fw+"Zones."+key+".Interfaces."+inst+"."));for(var key in applyDiff.Device.Firewall.IPv4.Masquerade)-1!=key.indexOf("-")&&(funcs.setValue(paths.fw+"Masquerade."+key.slice(1),{Source:{Interface:""}},cleanLinks),funcs.setValue(paths.fw+"Masquerade."+key,{},overSettings));for(var key in applyDiff.Device.Firewall.IPv4.Rules)-1!=key.indexOf("-")&&(funcs.setValue(paths.fw+"Rules."+key.slice(1),{Source:{Iface:""}},cleanLinks),funcs.setValue(paths.fw+"Rules."+key,{},overSettings))}if(applyDiff.Device.Network){for(var key in applyDiff.Device.Network.Server.Chilli)-1!=key.indexOf("-")&&(funcs.setValue(paths.chilli+key,applyDiff.Device.Network.Server.Chilli[key],removeServers),funcs.cutBranch(overSettings,paths.chilli+key+"."));Object.keys(overSettings.Device.Network.Server.Chilli).length||funcs.cutBranch(overSettings,"Device.Network.")}return Object.keys(cleanLinks).length&&diffs.push(cleanLinks),Object.keys(removeServers).length&&diffs.push(removeServers),Object.keys(overSettings).length&&diffs.push(overSettings),diffs}var data=converter.nativeToDsysinit(settings),init=converter.nativeToDsysinit(__initConfig),diff=funcs.newConfig.makeDiff(init,data,attrs);return _.size(diff)?(diff=splitDiff(diff),cpe.ApplyDifference(diff)):Promise.resolve()}function makeHelper(){return new device.chilli.Helper(config,attrs)}var config=null,attrs=null,__initConfig=null,isActivate=!1,converter=device.chilli.converter,paths={chilli:"Device.Network.Server.Chilli.",ifaces:"Device.Network.Interface.",group:"Device.Network.Group.",fw:"Device.Firewall.IPv4.",vlan:"Device.Switch.Switches."};return{pull:function(){function success(response){var data=funcs.buildTree(response[0].result.ParameterList);return config=converter.dsysinitToNative(data),__initConfig=funcs.deepClone(config),attrs=funcs.buildTreeAttributes(response[1].result.ParameterList),isActivate=!0,Promise.resolve()}function error(response){var error=response&&response.error?response.error:{};return Promise.reject(error)}return Promise.all([cpe.GetParameterValues([paths.chilli,paths.ifaces,paths.group,paths.fw,paths.vlan]),cpe.GetParameterAttributes([paths.chilli,paths.fw])]).then(success,error)},apply:apply,wasActivate:function(){return isActivate},subscribeInfo:function(cb,$scope){devinfo.subscribe(paths.chilli+"|"+paths.fw,function(response){var chilli,fw,data;response&&response[paths.chilli]&&(chilli=funcs.splitTree(response[paths.chilli]),fw=funcs.splitTree(response[paths.fw]),data=funcs.buildTree(chilli.concat(fw)),cb&&cb(converter.dsysinitToNative(data)))},$scope)},makeHelper:makeHelper}}])}();