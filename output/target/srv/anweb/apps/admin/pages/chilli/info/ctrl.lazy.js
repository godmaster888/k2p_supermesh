"use strict";!function(){angular.module("app").controllerProvider.register("ChilliInfoCtrl",["$scope","$state","ChilliUtil","translate","funcs",function($scope,$state,util,translate,funcs){function activate(){function success(){helper=util.makeHelper(),chilli.data=helper.getData(),chilli.isActivate=!0,util.subscribeInfo(function(response){chilli.data.Servers=response.Servers},$scope)}util.pull().then(success)["catch"](errorPull),$scope.$emit("pageload")}function errorPull(){$state.go("error",{code:"msg_pull_error",message:"msg_error_desc"})}function errorRemove(){$state.go("error",{code:"msg_push_error",message:"msg_push_error"})}function add(){$state.go(currentState+".add")}function edit(items,key){$state.go(currentState+".edit",{inx:key})}function remove(items,keys){if(confirm(translate("chilli_remove_servers_warning"))){var overlay=$scope.overlay.circular,overlayId=overlay.start(),applyObj=helper.removeRules(keys);util.apply(applyObj).then(activate)["catch"](errorRemove)["finally"](overlay.stop.bind(overlay,overlayId))}}$scope.chilli={data:null,isActivate:!1,add:add,edit:edit,remove:remove,addDisabled:function(){return chilli.data.Servers.length==chilli.data.IfacesList.length},getIfaceName:function(item){var iface=_.find(chilli.data.IfacesList,function(e){return e.value==item.Iface});return iface?iface.name:"-"},getNetwork:function(item){return item.NetworkIP&&item.NetworkMask?item.NetworkIP+"/"+funcs.ipv4.mask["short"](item.NetworkMask):"-"}};var helper,chilli=$scope.chilli,currentState=$state.current.name.split(".");currentState.pop(),currentState=currentState.join("."),activate()}])}();