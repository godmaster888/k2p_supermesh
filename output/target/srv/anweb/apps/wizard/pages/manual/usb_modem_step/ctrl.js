"use strict";function UsbModemStepController($scope,$rootScope,$stateParams,manualProfile,manualStepApiDispatcher,dongle,devinfo,device,$timeout,$state,translate,stepManager,util){function startSubscribe(){stopSubscribe(),devinfo.subscribe("dongle|net|notice",subscribeFunc)}function stopSubscribe(){devinfo.unsubscribe("dongle|net|notice",subscribeFunc),$scope.dongleStep.startUsbConnectionStamp=null}function subscribeFunc(data){util.dongleHandler(data,profile,$scope)}function apply(dataPIN){util.applyPIN(dataPIN,profile.$DongleStep.Modem,profile.$DongleStep.SIM).then(function(){$rootScope.rootDongleReadyStamp=_.now(),dongle.state("wait_create"),$rootScope.showOverlay(!1)})["catch"](function(errorStatus){65==errorStatus?$timeout(function(){apply(dataPIN)},1e3):devinfo.once("dongle").then(function(data){var dongleData=_.find(data.dongle,function(o){return o.__id==profile.$DongleStep.Modem})||{};$rootScope.showOverlay(!1),$scope.dongleStep.modemPinStatus=dongleData.pinStatus,$scope.dongleStep.modemTryLeft=-1==dongleData.pinTryLeft?null:dongleData.pinTryLeft,_.defer(function(){alert(-1!=dongleData.pinTryLeft?translate("dcc_wrong_pin")+"\r\n"+translate("dcc_pin_attempt")+" "+dongleData.pinTryLeft:translate("dcc_wrong_pin"))})})})}function validationPIN(value){if(!value)return null;var re=/^[0-9]{4,8}$/g;return re.test(value)?null:"usb_modem_pin_code_wrong"}function isPUKRequired(){return"wait_pin"==$scope.dongleStep.dongle.state()&&"puk_required"==$scope.dongleStep.modemPinStatus}function getSimList(){return dongle.info()[dongleStep.modemNumber]?dongle.info()[dongleStep.modemNumber].simList:[]}function onSIMChange(){$rootScope.showOverlay(!0);var simList=getSimList(),simInfo=_.find(simList,function(sm){return sm.__id==profile.$DongleStep.SIM});util.changeSIM(profile.$DongleStep.Modem,profile.$DongleStep.SIM)["finally"](function(){simInfo&&simInfo.conn_info&&simInfo.conn_info.has_conn?util.changeOrder(simInfo.conn_info.group_inst)["finally"](function(){$rootScope.showOverlay(!1)}):$rootScope.showOverlay(!1)})}var profile=manualProfile.profile(),dongleStep={profile:profile,dongle:dongle,modemNumber:0,modemPIN:"",modemTryLeft:null,formatPinMessage:function(error){var pinType=$scope.translatePinStatus(error);return translate("dcc_unknown_pin").replace(/<TYPE>/,pinType)},modemData:{PIN:"",newPin:"",tryCount:0},modemApplyPIN:function(){null===validationPIN($scope.dongleStep.modemData.PIN)&&(!isPUKRequired()||$scope.dongleStep.isConfirm&&null===validationPIN($scope.dongleStep.modemData.newPin))&&($timeout(function(){$scope.$emit("goToErrorForm",!0)}),$scope.dongleStep.modemData.PIN&&($rootScope.showOverlay(!0),$scope.showAvailOverlay(!1),apply($scope.dongleStep.modemData)))},modemAutoconnectTimeout:1e4,usbModemLoaderHidden:function(){return profile.__modemFields||_.contains(["intersected_subnet","wan_created","wan_failed","wait_pin","sim_is_blocked"],dongle.state())},modemAbortCheck:function(){profile.__modemFields=!0,stopSubscribe(),dongle.state("wan_failed"),$scope.nextStep()},exit:function(){manualProfile.clean(),stepManager.action("exit")},validationPIN:validationPIN,checkPINConfirm:function(value){$scope.dongleStep.isConfirm=value},isDisabled:function(){return $scope.manualStepForm.$invalid||isPUKRequired()&&!$scope.dongleStep.isConfirm||""==$scope.dongleStep.modemData.PIN||isPUKRequired()&&""==$scope.dongleStep.modemData.newPin},isArrayModemList:function(){var info=dongle.info();return _.isArray(info)},stopSubscribe:stopSubscribe,getActiveSIM:function(){var modem=_.find(dongle.info(),function(o){return o.__id==profile.$DongleStep.Modem}),sim=_.find(modem.simList,{__id:modem.activeSIM.toString()});return"SIM"+sim.name},getSimList:getSimList,isShowSIMList:function(){return _.size(getSimList())>1},onModemChange:function(){dongleStep.modemNumber=_.findIndex(dongle.info(),function(o){return o.__id==profile.$DongleStep.Modem}),profile.__modemFields=!1,dongle.state("wait_create"),util.dongleHandler({dongle:$rootScope.gDongleData},profile,$scope),startSubscribe();var modem=_.find(dongle.info(),function(o){return o.__id==profile.$DongleStep.Modem});profile.$DongleStep.SIM=modem.activeSIM.toString(),onSIMChange()},onSIMChange:onSIMChange,getSIMName:function(sim){var name="SIM "+sim.name;return name+=sim.inserted?" IMSI: "+(sim.imsi||"-"):" "+translate("dcc_wait_sim")}};$scope.dongleStep=dongleStep,$scope.modemTitle="wan_modem_settings_title",$scope.dccWaitModem="dcc_wait_dongle",manualStepApiDispatcher.get().registerStepApi({name:"UsbModemStep",onActivate:function(){dongle.state()?util.dongleHandler({dongle:$rootScope.gDongleData},profile,$scope):devinfo.once("net|dongle|notice").then(function(data){util.dongleHandler({dongle:$rootScope.gDongleData},profile,$scope),util.dongleHandler(data,profile,$scope)}),startSubscribe()},onLeave:function(){$scope.showAvailOverlay(!0),stopSubscribe()}})}angular.module("wizard").controller("UsbModemStepController",UsbModemStepController),UsbModemStepController.$inject=["$scope","$rootScope","$stateParams","manualProfile","manualStepApiDispatcher","dongle","devinfo","device","$timeout","$state","translate","stepManager","usbModemStepUtil"];