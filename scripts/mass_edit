#!/bin/bash

RED='\033[0;31m'
#GRAY='\033[1;30m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

LAST_PROFILE=$(cat .last_profile 2> /dev/null)

cleaning() {
	printf '\n===================================\n'
	if [ -n "$LAST_PROFILE" ]; then
		echo "$LAST_PROFILE" > .last_profile
	else
		rm .last_profile 2> /dev/null
		LAST_PROFILE='not set'
	fi
	printf '%bYour current PROFILE is %s%b\n' "$BLUE" "$LAST_PROFILE" "$NC"
	exit 0
}

check_profile()
{
	local profile_path="$1"

	local old_ifs=$IFS
	IFS=$'\n'
	for find_opt in $FIND; do
		if ! grep -q "$find_opt" "$profile_path"; then
			return 1
		fi
	done
	IFS=$old_ifs

	return 0
}

updating() {
	while IFS= read -r -d '' profile
	do
		profile=$(basename "$profile")
		local profile_path="./profiles/$profile/$profile"
		total=$((total + 1))

		local md5before=("$(md5sum "$profile_path")")

		if check_profile "$profile_path"; then
			echo "$OPTIONS" >> "$profile_path"
		else
			printf '%s was skipped\n' "$profile"
			continue;
		fi

		if ! make PROFILE="$profile" olddefconfig >/dev/null 2>&1
		then
			printf '%b%s failed%b\n' "$RED" "$profile" "$NC"
			continue
		fi

		local md5after=("$(md5sum "$profile_path")")

		if [ "${md5before[0]}" == "${md5after[0]}" ]; then
			printf '%s was skipped\n' "$profile"
		else
			updated=$((updated + 1))
			printf '%b%s was updated%b\n' "$GREEN" "$profile" "$NC"
		fi

	done < <(find ./profiles/ -mindepth 1 -maxdepth 1 -type d -print0)
	echo "==================================="
	printf "DONE! %d/%d profiles were updated" "$updated" "$total"
}

get_data() {
	set -x
	tempfile=$(mktemp)

	$EDITOR "$tempfile"
	cat "$tempfile"
	unlink "$tempfile"
	set +x
}

run_editor() {
	if ! $EDITOR "$@"; then
		exit 1
	fi
}

prepare() {
	local interactive=false
	FIND=""
	OPTIONS=""

	while getopts ":f:o:i" opt; do
		case "$opt" in
			f)
				FIND="${OPTARG//;/$'\n'}"
				;;
			o)
				OPTIONS="${OPTARG//;/$'\n'}"
				;;
			i)
				interactive=true
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				exit 1
				;;
			:)
				echo "Option -$OPTARG requires an argument." >&2
				exit 1
				;;
		esac
	done

	if $interactive; then
		echo "Enter find options:"
		local tempfile

		tempfile=$(mktemp -p .)

		if [ -n "$FIND" ]; then
			echo "$FIND" >> "$tempfile"
		else
			echo "BR2_DSYSINIT=y" >> "$tempfile"
		fi

		run_editor "$tempfile"

		FIND=$(cat "$tempfile")
		unlink "$tempfile"

		echo "Enter new options:"
		tempfile=$(mktemp -p .)

		echo "$OPTIONS" >> "$tempfile"

		run_editor "$tempfile"

		OPTIONS=$(cat "$tempfile")
		unlink "$tempfile"

		echo "For repeat:"
		echo "$0 -f '${FIND//$'\n'/;}' -o '${OPTIONS//$'\n'/;}'"
		echo ""
		printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
	fi
}

trap cleaning SIGINT
prepare "$@"
updating
cleaning
