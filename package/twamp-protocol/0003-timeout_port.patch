From b869a20a83a47962021432045b768685e0592d1f Mon Sep 17 00:00:00 2001
From: Vladimir Yaichkin <vyaichkin@rzn.dlink.ru>
Date: Sat, 28 Dec 2019 17:47:06 +0300
Subject: twamp, server: add function timeout sessions and choose control port
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Patch-from-hash: b3407d2adbb820bc00cfb54449ac323a307c8bc6
Patch-repo: twamp-protocol
Patch-branch: master
Patch-version: 1

Added the ability to enable timeout for monitoring sessions and tests.
Also added the ability to select a TСP port to listen for control messages.

Signed-off-by: Vladimir Yaichkin <vyaichkin@rzn.dlink.ru>
---
 server.c    | 216 +++++++++++++++++++++++++++++++++++++++++++++++++---
 timestamp.c |   9 +++
 twamp.h     |  18 ++++-
 3 files changed, 231 insertions(+), 12 deletions(-)

diff --git a/server.c b/server.c
index e99986f..5ca457f 100644
--- a/server.c
+++ b/server.c
@@ -28,7 +28,7 @@

 #define MAX_CLIENTS 10
 #define MAX_SESSIONS_PER_CLIENT 10
-#define PORTBASE	20000
+#define PORTBASE    20000

 typedef enum {
     kOffline = 0,
@@ -48,6 +48,9 @@ struct active_session {
     uint32_t snd_nb;
     uint32_t fw_msg;
     uint32_t fw_lst_msg;
+#ifdef DLINK_SOFTWARE
+    time_t timestamp;
+#endif
 };

 struct client_info {
@@ -59,6 +62,9 @@ struct client_info {
     int sess_no;
     struct timeval shutdown_time;
     struct active_session sessions[MAX_SESSIONS_PER_CLIENT];
+#ifdef DLINK_SOFTWARE
+    time_t timestamp;
+#endif
 };

 const uint8_t One = 1;
@@ -81,16 +87,20 @@ static void usage(char *progname)
     fprintf(stderr, "\nWhere \"options\" are:\n");

     fprintf(stderr,
-            "	-a authmode		Default is Unauthenticated\n"
-            "	-p port_min		Port range for Test receivers based on port_min (>1063)\n"
-            "	-o servo     	2 Octets to be reflected by Sender in Reflected Mode (<65536)\n"
-            "	-6              Use IPv6 if this option is defined. Otherwise, Ipv4 will be used.\n"
-            "	-h         		Prints this help message and exits\n");
+            "   -a authmode     Default is Unauthenticated\n"
+            "   -p port_min     Port range for Test receivers based on port_min (>1063)\n"
+            "   -o servo        2 Octets to be reflected by Sender in Reflected Mode (<65536)\n"
+            "   -6              Use IPv6 if this option is defined. Otherwise, Ipv4 will be used.\n"
+            "   -h              Prints this help message and exits\n");
     return;
 }

 /* Parses the command line arguments for the server */
+#ifdef DLINK_SOFTWARE
+static int parse_options(char *progname, int argc, char *argv[], custom_opt_t *c_opt)
+#else
 static int parse_options(char *progname, int argc, char *argv[])
+#endif
 {
     int opt;
     if (argc < 1 || argc > 7) {
@@ -98,7 +108,11 @@ static int parse_options(char *progname, int argc, char *argv[])
         return 1;
     }

+#ifdef DLINK_SOFTWARE
+    while ((opt = getopt(argc, argv, "J:U:u:a:p:o:h:6")) != -1) {
+#else
     while ((opt = getopt(argc, argv, "a:p:o:h:6")) != -1) {
+#endif
         switch (opt) {
         case 'a':
             authmode = strtol(optarg, NULL, 10);
@@ -125,6 +139,18 @@ static int parse_options(char *progname, int argc, char *argv[])
             socket_family = AF_INET6;
             break;
         case 'h':
+
+#ifdef DLINK_SOFTWARE
+        case 'J':
+            c_opt->ctrl_port = strtol(optarg, NULL, 10);
+            break;
+        case 'U':
+            c_opt->server_timeout = strtol(optarg, NULL, 10);
+            break;
+        case 'u':
+            c_opt->reflect_timeout = strtol(optarg, NULL, 10);
+            break;
+#endif
         default:
             return 1;
         }
@@ -157,6 +183,9 @@ static void cleanup_client(struct client_info *client)
             close(client->sessions[i].socket);
             client->sessions[i].socket = -1;
             used_sockets--;
+#ifdef DLINK_SOFTWARE
+            client->sessions[i].timestamp = 0;
+#endif /* DLINK_SOFTWARE */
         }
     memset(client, 0, sizeof(struct client_info));
     client->status = kOffline;
@@ -174,6 +203,130 @@ static int find_empty_client(struct client_info *clients, int max_clients)
     return -1;
 }

+#ifdef DLINK_SOFTWARE
+static time_t minimum_timeout(struct client_info *clients, int max_clients, custom_opt_t *c_opt)
+{
+    /* из https://tools.ietf.org/html/rfc5357 "default value of SERVWAIT SHALL be 900 seconds" */
+    time_t timeout = 900;
+
+    struct timeval now;
+    gettimeofday(&now, NULL);
+
+    for (int i = 0; i < max_clients; i++) {
+        if (clients[i].status == kOffline)
+            continue;
+
+        time_t sess_to = 0;
+
+        for (int j = 0; j < clients[i].sess_no; j++) {
+            if (!clients[i].sessions[j].timestamp)
+                continue;
+
+            sess_to = now.tv_sec - clients[i].sessions[j].timestamp;
+
+            if (!sess_to)
+                sess_to = c_opt->reflect_timeout;
+
+            if (sess_to < timeout)
+                timeout = sess_to;
+        }
+
+        if (!clients[i].timestamp || clients[i].timestamp > now.tv_sec)
+            continue;
+
+        time_t conn_to = now.tv_sec - clients[i].timestamp;
+
+        if (!conn_to)
+            conn_to = c_opt->server_timeout;
+
+        if (conn_to < timeout)
+            timeout = conn_to;
+    }
+
+    return timeout;
+}
+
+
+enum {
+    UNKNOW_TIMEOUT    = 0x0,
+    SERVER_TIMEOUT    = 0x1,
+    REFLECTOR_TIMEOUT = 0x2,
+};
+
+static int timeout_type(time_t timeout, custom_opt_t *c_opt)
+{
+    // printf("Timeout: %ld, c_opt: s %ld r %ld\n", timeout, c_opt->server_timeout, c_opt->reflect_timeout);
+    if (!timeout)
+        return UNKNOW_TIMEOUT;
+
+    /* TODO: может быть что ReflectorTimeout > ServerTimeout  */
+
+    if (timeout <= c_opt->reflect_timeout)
+        return REFLECTOR_TIMEOUT;
+
+    if (timeout >= c_opt->server_timeout)
+        return SERVER_TIMEOUT;
+
+    return SERVER_TIMEOUT;
+}
+
+/* Check connected clients to expired timeout. */
+static void check_connected_clients(struct client_info *clients, int max_clients,
+                                    time_t timeout, int type)
+{
+    if (type == UNKNOW_TIMEOUT)
+        return;
+
+    struct timeval now;
+    gettimeofday(&now, NULL);
+
+    int cleanup = 0;
+
+    for (int i = 0; i < max_clients; i++) {
+        cleanup = 0;
+
+        switch (type) {
+
+            case SERVER_TIMEOUT: {
+                if (clients[i].status != kConnected)
+                    break;
+
+                if (now.tv_sec - clients[i].timestamp >= timeout)
+                    cleanup = 1;
+
+                break;
+            }
+
+            case REFLECTOR_TIMEOUT: {
+                if (clients[i].status != kTesting)
+                    break;
+
+                for (int j = 0; j < clients[i].sess_no; j++) {
+                    if (clients[i].sessions[j].socket <= 0)
+                        continue;
+
+                    if (now.tv_sec - clients[i].sessions[j].timestamp < timeout)
+                        continue;
+
+                    cleanup = 1;
+                    break;
+                }
+                break;
+            }
+
+            default:
+                break;
+        }
+
+        if (!cleanup)
+            continue;
+
+        cleanup_client(&clients[i]);
+    }
+}
+#endif /* DLINK_SOFTWARE */
+
+
 /* Sends a ServerGreeting message to the Control-Client after
  * the TCP connection has been established.
  */
@@ -317,6 +470,9 @@ static int receive_start_sessions(struct client_info *client)
             fd_max = client->sessions[i].socket;
     }
     client->status = kTesting;
+#ifdef DLINK_SOFTWARE
+    client->sessions[i].timestamp = get_timestamp_sec();
+#endif
     /* Title for printing */
     fprintf(stderr,
             "\tSnd@\t,\tTime\t, Snd#\t, Rcv#\t, SndPt\t,"
@@ -387,8 +543,6 @@ static int send_accept_session(struct client_info *client, RequestSession * req)
         }

         if (check_time > 0) {
-
-
             acc.Accept = kOK;
             acc.Port = req->ReceiverPort;
             client->sessions[client->sess_no].socket = testfd;
@@ -668,7 +822,14 @@ int main(int argc, char *argv[])
 #endif

     /* Parse options */
+#ifdef DLINK_SOFTWARE
+    custom_opt_t c_opt;
+    memset(&c_opt, 0, sizeof(c_opt));
+
+    if (parse_options(progname, argc, argv, &c_opt)) {
+#else
     if (parse_options(progname, argc, argv)) {
+#endif
         usage(progname);
         exit(EXIT_FAILURE);
     }
@@ -689,7 +850,11 @@ int main(int argc, char *argv[])
         memset(&serv_addr, 0, sizeof(serv_addr));
         serv_addr.sin6_family = AF_INET6;
         serv_addr.sin6_addr = in6addr_any;
+#ifdef DLINK_SOFTWARE
+        serv_addr.sin6_port = htons(c_opt.ctrl_port ?: SERVER_PORT);
+#else
         serv_addr.sin6_port = htons(SERVER_PORT);
+#endif /* DLINK_SOFTWARE */

         if (bind(listenfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) <
             0) {
@@ -702,7 +867,11 @@ int main(int argc, char *argv[])
         memset(&serv_addr, 0, sizeof(serv_addr));
         serv_addr.sin_family = AF_INET;
         serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+#ifdef DLINK_SOFTWARE
+        serv_addr.sin_port = htons(c_opt.ctrl_port ?: SERVER_PORT);
+#else
         serv_addr.sin_port = htons(SERVER_PORT);
+#endif /* DLINK_SOFTWARE */

         if (bind(listenfd, (struct sockaddr *)&serv_addr, sizeof(struct sockaddr)) <
             0) {
@@ -734,13 +903,30 @@ int main(int argc, char *argv[])
     FD_ZERO(&tmp_fds);

 #ifdef DLINK_SOFTWARE
+    struct timeval server_timeout;
+    server_timeout.tv_sec = 900;
+    server_timeout.tv_usec = 0;
     dlink_service_connect(0);
 #endif

     int rv;
     while (1) {
         tmp_fds = read_fds;
+#ifdef DLINK_SOFTWARE
+        time_t last_timeout = minimum_timeout(clients, MAX_CLIENTS, &c_opt);
+        server_timeout.tv_sec = last_timeout;
+        // printf("SELECT with %ld timeout\n",server_timeout.tv_sec);
+        int result = select(fd_max + 1, &tmp_fds, NULL, NULL, &server_timeout);
+
+        if (!result) {
+            // printf("Exit: Timeout %ld expired\n", server_timeout.tv_sec);
+            int type = timeout_type(last_timeout, &c_opt);
+            check_connected_clients(clients, MAX_CLIENTS, last_timeout, type);
+            continue;
+        } else if (result < 0) {
+#else
         if (select(fd_max + 1, &tmp_fds, NULL, NULL, NULL) < 0) {
+#endif
             perror("Error in select");
             close(listenfd);
             exit(EXIT_FAILURE);
@@ -769,6 +955,11 @@ int main(int argc, char *argv[])
                     clients[pos].addr = client_addr;
                     clients[pos].addr6 = client_addr6;
                     clients[pos].mode = authmode;
+#ifdef DLINK_SOFTWARE
+                    server_timeout.tv_sec = c_opt.server_timeout;
+                    clients[pos].timestamp = get_timestamp_sec();
+                    // printf("Put SERVER timestamp %ld [timeout = %ld]\n", clients[pos].timestamp, server_timeout.tv_sec);
+#endif /* DLINK_SOFTWARE */
                     clients[pos].sess_no = 0;
                     used_sockets++;
                     FD_SET(newsockfd, &read_fds);
@@ -852,12 +1043,17 @@ int main(int argc, char *argv[])
                 for (j = 0; j < clients[i].sess_no; j++) {
                     rv = get_actual_shutdown(&current,
                                              &clients[i].shutdown_time,
-                                             &clients[i].sessions[j].req.
-                                             Timeout);
+                                             &clients[i].sessions[j].req.Timeout);
                     if (rv > 0) {
                         has_active_test_sessions = 1;
                         if (FD_ISSET(clients[i].sessions[j].socket, &tmp_fds)) {
                             rv = receive_test_message(&clients[i], j);
+#ifdef DLINK_SOFTWARE
+                            server_timeout.tv_sec = c_opt.reflect_timeout;
+                            clients[i].sessions[j].timestamp = get_timestamp_sec();
+                            // printf("Put REFLECTOR timestamp %ld [timeout = %ld]\n",
+                            //     clients[i].sessions[j].timestamp, server_timeout.tv_sec);
+#endif /* DLINK_SOFTWARE */
                         }
                     } else {
                         FD_CLR(clients[i].sessions[j].socket, &read_fds);
diff --git a/timestamp.c b/timestamp.c
index 2b2892b..b4c8a2c 100644
--- a/timestamp.c
+++ b/timestamp.c
@@ -57,6 +57,15 @@ TWAMPTimestamp get_timestamp()
     return ts;
 }

+#ifdef DLINK_SOFTWARE
+time_t get_timestamp_sec()
+{
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+    return tv.tv_sec;
+}
+#endif /* DLINK_SOFTWARE */
+
 uint64_t get_usec(const TWAMPTimestamp * ts)
 {
     struct timeval tv;
diff --git a/twamp.h b/twamp.h
index 5dd21b3..7d41cdf 100644
--- a/twamp.h
+++ b/twamp.h
@@ -29,10 +29,11 @@
 #include <inttypes.h>
 #include <sys/time.h>

-#define HDR_TTL		255         /* TTL=255 in TWAMP for IP Header */
+#define HDR_TTL     255         /* TTL=255 in TWAMP for IP Header */
 #define SERVER_PORT 862
 #define CHECK_TIMES 100
-#define LOSTTIME	2           /* SECONDS - Timeout for TWAMP test packet */
+#define LOSTTIME    2           /* SECONDS - Timeout for TWAMP test packet */
+

 enum CommandNumber {
     kReserved,
@@ -73,6 +74,15 @@ typedef struct twamp_timestamp {
     uint32_t fractional;
 } TWAMPTimestamp;

+#ifdef DLINK_SOFTWARE
+/* Custom options */
+typedef struct {
+    uint16_t ctrl_port;
+    time_t server_timeout;
+    time_t reflect_timeout;
+} custom_opt_t;
+#endif
+
 /*****************************************/
 /*                                       */
 /* TWAMP-Control specific messages       */
@@ -242,6 +252,10 @@ uint64_t get_usec(const TWAMPTimestamp * ts);

 TWAMPTimestamp get_timestamp();

+#ifdef DLINK_SOFTWARE
+time_t get_timestamp_sec();
+#endif /* DLINK_SOFTWARE */
+
 int get_actual_shutdown(const struct timeval *tv, const struct timeval *ts,
                         const TWAMPTimestamp * t);

--
2.20.1

