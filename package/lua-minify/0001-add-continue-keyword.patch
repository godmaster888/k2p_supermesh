diff -ruNp a/FormatBeautiful.lua b/FormatBeautiful.lua
--- a/FormatBeautiful.lua
+++ b/FormatBeautiful.lua
@@ -242,6 +242,8 @@ local function Format_Beautify(ast)
 			end
 		elseif statement.AstType == 'BreakStatement' then
 			out = getIndentation() .. "break"
+		elseif statement.AstType == 'ContinueStatement' then
+			out = getIndentation() .. "continue"
 		elseif statement.AstType == 'RepeatStatement' then
 			out = getIndentation() .. "repeat" .. EOL
 			indent = indent + 1
diff -ruNp a/FormatIdentity.lua b/FormatIdentity.lua
--- a/FormatIdentity.lua
+++ b/FormatIdentity.lua
@@ -335,6 +335,9 @@ local function Format_Identity(ast)
 		elseif statement.AstType == 'BreakStatement' then
 			appendNextToken( "break" )
 
+		elseif statement.AstType == 'ContinueStatement' then
+			appendNextToken( "continue" )
+
 		elseif statement.AstType == 'RepeatStatement' then
 			appendNextToken( "repeat" )
 			formatStatlist(statement.Body)
diff -ruNp a/FormatMini.lua b/FormatMini.lua
--- a/FormatMini.lua
+++ b/FormatMini.lua
@@ -268,6 +268,9 @@ local function Format_Mini(ast)
 		elseif statement.AstType == 'BreakStatement' then
 			out = "break"
 
+		elseif statement.AstType == 'ContinueStatement' then
+			out = "continue"
+
 		elseif statement.AstType == 'RepeatStatement' then
 			out = "repeat"
 			out = joinStatementsSafe(out, formatStatlist(statement.Body))
diff -ruNp a/ParseLua.lua b/ParseLua.lua
--- a/ParseLua.lua
+++ b/ParseLua.lua
@@ -29,7 +29,7 @@ local Symbols = lookupify{'+', '-', '*',
 local Scope = require'Scope'
 
 local Keywords = lookupify{
-	'and', 'break', 'do', 'else', 'elseif',
+	'and', 'break', 'continue', 'do', 'else', 'elseif',
 	'end', 'false', 'for', 'function', 'goto', 'if',
 	'in', 'local', 'nil', 'not', 'or', 'repeat',
 	'return', 'then', 'true', 'until', 'while',
@@ -1289,6 +1289,12 @@ local function ParseLua(src)
 			nodeBreak.Tokens  = tokenList
 			stat = nodeBreak
 
+		elseif tok:ConsumeKeyword('continue', tokenList) then
+			local nodeContinue = {}
+			nodeContinue.AstType = 'ContinueStatement'
+			nodeContinue.Tokens  = tokenList
+			stat = nodeContinue
+
 		elseif tok:ConsumeKeyword('goto', tokenList) then
 			if not tok:Is('Ident') then
 				return false, GenerateError("Label expected")
diff -ruNp a/RobloxPlugin/Minify.lua b/RobloxPlugin/Minify.lua
--- a/RobloxPlugin/Minify.lua
+++ b/RobloxPlugin/Minify.lua
@@ -75,7 +75,7 @@ local HexDigits = lookupify{'0', '1', '2
 local Symbols = lookupify{'+', '-', '*', '/', '^', '%', ',', '{', '}', '[', ']', '(', ')', ';', '#'}
 
 local Keywords = lookupify{
-    'and', 'break', 'do', 'else', 'elseif',
+    'and', 'break', 'continue', 'do', 'else', 'elseif',
     'end', 'false', 'for', 'function', 'goto', 'if',
     'in', 'local', 'nil', 'not', 'or', 'repeat',
     'return', 'then', 'true', 'until', 'while',
@@ -1149,6 +1149,11 @@ function ParseLua(src)
 			nodeBreak.AstType = 'BreakStatement'
 			stat = nodeBreak
 
+		elseif tok:ConsumeKeyword('continue') then
+			local nodeContinue = {}
+			nodeContinue.AstType = 'ContinueStatement'
+			stat = nodeContinue
+
 		elseif tok:IsKeyword('goto') then
 			if not tok:Is('Ident') then
 				return false, GenerateError("Label expected")
@@ -1479,6 +1484,9 @@ function Format_Mini(ast)
 		elseif statement.AstType == 'BreakStatement' then
 			out = "break"
 
+		elseif statement.AstType == 'ContinueStatement' then
+			out = "continue"
+
 		elseif statement.AstType == 'RepeatStatement' then
 			out = "repeat"
 			out = joinStatementsSafe(out, formatStatlist(statement.Body))
@@ -1567,4 +1575,4 @@ _G.Minify = function(src)
 	local st, ast = ParseLua(src)
 	if not st then return false, ast end
 	return true, Format_Mini(ast)
-end
\ No newline at end of file
+end
