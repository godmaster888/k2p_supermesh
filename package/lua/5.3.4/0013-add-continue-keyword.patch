From 2816a0b87127fe936babd269dda426a5a8623271 Mon Sep 17 00:00:00 2001
From: Glenn Maynard <glenn@zewt.org>
Date: Mon, 17 Apr 2017 15:33:55 -0500
Subject: [PATCH] Add continue keyword.

---
 llex.c    |  2 +-
 llex.h    |  2 +-
 lparser.c | 18 +++++++++++++++++-
 3 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/src/llex.c b/src/llex.c
index 8f44cbef..a5bdbc65 100644
--- a/src/llex.c
+++ b/src/llex.c
@@ -38,7 +38,7 @@
 
 /* ORDER RESERVED */
 static const char *const luaX_tokens [] = {
-    "and", "break", "do", "else", "elseif",
+    "and", "break", "continue", "do", "else", "elseif",
     "end", "false", "for", "function", "goto", "if",
     "in", "local", "nil", "not", "or", "repeat",
     "return", "then", "true", "until", "while",
diff --git a/src/llex.h b/src/llex.h
index a50b6873..4c1f5d86 100644
--- a/src/llex.h
+++ b/src/llex.h
@@ -25,7 +25,7 @@
 */
 enum RESERVED {
   /* terminal symbols denoted by reserved words */
-  TK_AND = FIRST_RESERVED, TK_BREAK,
+  TK_AND = FIRST_RESERVED, TK_BREAK, TK_CONTINUE,
   TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,
   TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,
   TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,
diff --git a/src/lparser.c b/src/lparser.c
index 5894d8ff..5c0563cc 100644
--- a/src/lparser.c
+++ b/src/lparser.c
@@ -457,6 +457,15 @@ static void breaklabel (LexState *ls) {
   findgotos(ls, &ls->dyd->label.arr[l]);
 }
 
+/*
+** create a label named 'continue' to resolve continue statements
+*/
+static void continuelabel (LexState *ls, int pc) {
+  TString *n = luaS_new(ls->L, "continue");
+  int l = newlabelentry(ls, &ls->dyd->label, n, 0, pc);
+  findgotos(ls, &ls->dyd->label.arr[l]);
+}
+
 /*
 ** generates an error for an undefined 'goto'; choose appropriate
 ** message when label name is a reserved word (which can only be 'break')
@@ -1190,6 +1199,8 @@ static void gotostat (LexState *ls, int pc) {
   int g;
   if (testnext(ls, TK_GOTO))
     label = str_checkname(ls);
+  else if (testnext(ls, TK_CONTINUE))
+    label = luaS_new(ls->L, "continue");
   else {
     luaX_next(ls);  /* skip break */
     label = luaS_new(ls->L, "break");
@@ -1252,6 +1263,7 @@ static void whilestat (LexState *ls, int line) {
   block(ls);
   luaK_jumpto(fs, whileinit);
   check_match(ls, TK_END, TK_WHILE, line);
+  continuelabel(ls, whileinit);
   leaveblock(fs);
   luaK_patchtohere(fs, condexit);  /* false conditions finish the loop */
 }
@@ -1259,7 +1271,7 @@ static void whilestat (LexState *ls, int line) {
 
 static void repeatstat (LexState *ls, int line) {
   /* repeatstat -> REPEAT block UNTIL cond */
-  int condexit;
+  int condexit, iter;
   FuncState *fs = ls->fs;
   int repeat_init = luaK_getlabel(fs);
   BlockCnt bl1, bl2;
@@ -1268,11 +1280,13 @@ static void repeatstat (LexState *ls, int line) {
   luaX_next(ls);  /* skip REPEAT */
   statlist(ls);
   check_match(ls, TK_UNTIL, TK_REPEAT, line);
+  iter = fs->pc; // continue jumps here
   condexit = cond(ls);  /* read condition (inside scope block) */
   if (bl2.upval)  /* upvalues? */
     luaK_patchclose(fs, condexit, bl2.nactvar);
   leaveblock(fs);  /* finish scope */
   luaK_patchlist(fs, condexit, repeat_init);  /* close the loop */
+  continuelabel(ls, iter);
   leaveblock(fs);  /* finish loop */
 }
 
@@ -1302,6 +1316,7 @@ static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {
   block(ls);
   leaveblock(fs);  /* end of scope for declared variables */
   luaK_patchtohere(fs, prep);
+  continuelabel(ls, luaK_getlabel(fs));
   if (isnum)  /* numeric for? */
     endfor = luaK_codeAsBx(fs, OP_FORLOOP, base, NO_JUMP);
   else {  /* generic for */
@@ -1587,6 +1602,7 @@ static void statement (LexState *ls) {
       break;
     }
     case TK_BREAK:   /* stat -> breakstat */
+    case TK_CONTINUE: /* stat -> continuestat */
     case TK_GOTO: {  /* stat -> 'goto' NAME */
       gotostat(ls, luaK_jump(ls->fs));
       break;

